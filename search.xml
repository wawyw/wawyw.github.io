<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gulp压缩初体验</title>
      <link href="posts/175.html"/>
      <url>posts/175.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><a href="http://gulpjs.com/">Gulp</a>  是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务。</p></blockquote><ul><li>搭建web服务器</li><li>文件保存时自动重载浏览器</li><li>使用预处理器如Sass、LESS</li><li>优化资源，比如压缩CSS、JavaScript、压缩图片</li></ul><p>当然Gulp能做的远不止这些。这里也只是简单利用它来压缩html,css,js文件，一定程度上减缓站点加载过慢的问题。</p><h1 id="Gulp的安装"><a href="#Gulp的安装" class="headerlink" title="Gulp的安装"></a>Gulp的安装</h1><p>首先确保已经正确安装了node.js环境，然后以全局方式安装gulp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure><p>全局安装gulp后，还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后在命令行中执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp  // --save-dev用于把gulp写进项目package.json文件的依赖中</span><br></pre></td></tr></table></figure><h1 id="Gulp的使用"><a href="#Gulp的使用" class="headerlink" title="Gulp的使用"></a>Gulp的使用</h1><h2 id="建立gulpfile-js文件"><a href="#建立gulpfile-js文件" class="headerlink" title="建立gulpfile.js文件"></a>建立gulpfile.js文件</h2><p>在项目根目录下新建一个文件名为<code>gulpfile.js</code>的文件，之后要做的事情就是在<code>gulpfile.js</code>文件中定义我们的任务了。下面是这次的 <code>gulpfile.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlminify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html-minify&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./*.js&#x27;</span>) </span><br><span class="line"> .pipe(uglify())</span><br><span class="line"> .pipe(gulp.dest(<span class="string">&#x27;./&#x27;</span>)) </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./*.css&#x27;</span>)</span><br><span class="line"> .pipe(minifyCSS())</span><br><span class="line"> .pipe(gulp.dest(<span class="string">&#x27;./&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./*.html&#x27;</span>)</span><br><span class="line">    .pipe(htmlminify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>API</p><ul><li>gulp.task(‘name’, function(){})    定义任务</li><li>gulp.src(‘path’)    从该路径读取要被压缩的文件</li><li>gulp.dest(‘path’)    把压缩后的文件写入该路径</li></ul><h2 id="安装gulp插件"><a href="#安装gulp插件" class="headerlink" title="安装gulp插件"></a>安装gulp插件</h2><p>这里需要安装</p><ul><li>gulp-uglify  用于压缩js文件大小</li><li>gulp-minify-css  用于压缩css文件大小</li><li>gulp-html-minify  用于压缩html文件大小</li></ul><h2 id="运行gulp任务"><a href="#运行gulp任务" class="headerlink" title="运行gulp任务"></a>运行gulp任务</h2><p>插件安装完成后,使用 <code>gulp</code> 后面可以加上要执行的任务名，例如<code>gulp task1</code>，如果没有指定任务名，则会执行任务名为<code>default</code>的默认任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp task_name</span><br></pre></td></tr></table></figure><h1 id="Gulp使用前后"><a href="#Gulp使用前后" class="headerlink" title="Gulp使用前后"></a>Gulp使用前后</h1><p>压缩前</p><p><img src="https://i.loli.net/2021/01/31/RXSA3Ob6CdPxvn1.png" alt="image-20210131230716274"></p><p>压缩中</p><p><img src="https://i.loli.net/2021/01/31/EMfnGihjT3N19z6.png" alt="image-20210131231014617"></p><p>压缩后</p><p><img src="https://i.loli.net/2021/01/31/Aw4k1GNKv2n67Zh.png" alt="image-20210131231059152"></p><p>这里初次窥见了gulp的强大~~</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>gulp的功能还有很多，也十分便捷高效。此番小试牛刀，更待日后探索。。。</p><p>最后，附上Butterfly主题作者关于Gulp压缩的教程：</p><p><a href="https://butterfly.js.org/posts/4073eda/#Gulp%E5%A3%93%E7%B8%AE">https://butterfly.js.org/posts/4073eda/#Gulp%E5%A3%93%E7%B8%AE</a></p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.jianshu.com/p/a9e7838c8043">gulp 及其常用插件</a></p><p>[2] <a href="https://www.cnblogs.com/2050/p/4198792.html">前端构建工具gulpjs的使用介绍及技巧</a></p><p>[3] <a href="https://blog.csdn.net/weixin_33929309/article/details/86069162?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">Gulp新手入门教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建记录 Hexo+Butterfly+Github Page+Coding</title>
      <link href="posts/50074.html"/>
      <url>posts/50074.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实我一直有搭建博客的想法，想着在博客上记录和分享学习、生活、技术是件挺有意义的事。近期趁着假期时间，在其他优秀博文的帮助下，终于初步完成了个人博客的搭建，这里对他们致以万分感谢。下面就搭建过程进行简单记录。</p><h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><a href="https://hexo.io/zh-cn/">Hexo</a> 是一款基于 Node.js 用于快速搭建博客的框架，有了它就可以完成完成个人博客的构建，它会帮你构建博客的整个框架，你只需要会使用Markdown 写博客即可。关于Hexo的具体介绍，可以在其官方网站查看具体的说明。</li><li><a href="https://butterfly.js.org/">Butterfly</a> A Simple and Card UI Design theme for Hexo.</li><li><a href="https://help.github.com/en/articles/what-is-github-pages">Github Page</a> 是 Github 提供的静态网站托管服务，可从 Github 仓库中展示你的个人、组织或者项目的静态网页。你可以选择使用 Github Pages 免费提供的域名 github.io 或者自己购买域名来发布站点，站点可以被免费托管在 Github 上。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。</li><li><a href="https://coding.net/">Codiing</a> 是一站式软件研发管理协作平台，提供 Git/SVN 代码托管、项目协同、测试管理等工具，将博客托管在coding上，可提高国内访问博客的速度。</li><li><a href="https://git-scm.com/">Git</a> 是目前世界上最先进的分布式版本控制系统（没有之一）。这里我们使用git bash 完成安装，初始化，上传等操作。</li><li><a href="https://nodejs.org/zh-cn/">node.js</a> 是一个基于Chrome V8引擎的JavaScript运行环境。安装好node.js后利用npm包管理工具来安装Hexo</li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>在windows10系统下，前往<a href="https://git-scm.com/">Git</a>官网下载，安装。其他系统下的Git安装方法可在<a href="https://hexo.io/zh-cn/docs/">hexo的文档</a>中查阅。</p><p>安装正确的话，在桌面或文件夹空白处鼠标右键菜单会新增“Git GUI Here”和“Git Bash Here”两个选项。</p><p>Git 常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;branch&gt; https://github.com/xxxx/xxxx.git</span><br><span class="line">git pull</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;comment&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>前往<a href="https://nodejs.org/zh-cn/">node.js官网</a> 选择长期支持版本的node.js下载，默认路径安装即可。</p><p>在cmd中输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --version</span><br></pre></td></tr></table></figure><p>出现版本信息则表示安装成功。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>完成前两个应用的安装后，即可使用npm安装Hexo</p><p>在桌面空白处单击右键，打开git bash，输入Hexo安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>因为npm是从国外服务器下载，可能出现异常，速度慢等问题，所以有更好的选择</p><p><strong><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">淘宝NPM镜像</a></strong></p><p>这是一个完整 <code>npmjs.org</code> 镜像，你可以用此代替官方版本(只读)，同步频率目前为 <strong>10分钟</strong> 一次以保证尽量与官方服务同步。</p><p>其安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>之后可以使用其定制的 <a href="https://github.com/cnpm/cnpm">cnpm</a> (gzip 压缩支持) 命令行工具代替默认的 <code>npm</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>下载速度快了不少有没有</p><p>检查Hexo是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现版本信息则表示安装成功。</p><p>安装好以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo &lt;command&gt;</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code></li></ol><h1 id="搭建工作"><a href="#搭建工作" class="headerlink" title="搭建工作"></a>搭建工作</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>这里在E盘下新建一个目录<code> Blog</code>,用来存放相关文件。在此处打开 <code>Git Bash</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><blockquote><p>注意：若没有把Hexo添加到环境变量，在所有命令中的 <code>hexo</code> 前都要加上 <code>npx</code></p></blockquote><p>命令执行完成后，将在E:\Blog\下生成相应的文件，目录如下：</p><p><img src="https://i.loli.net/2021/01/30/FAnR3pHMTsYbeaL.png" alt="image-20210130221733932"></p><p>主要关注的是：</p><ul><li>_config.yml , 配置文件，在此配置大部分参数</li><li>source/_posts , 存放md文件</li><li>themes , 主题文件夹</li></ul><h2 id="生成静态页面-本地"><a href="#生成静态页面-本地" class="headerlink" title="生成静态页面(本地)"></a>生成静态页面(本地)</h2><p>可通过以下命令生成静态页面:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>完成后会在根目录E:\Blog\下生成public文件夹，里面包含相应的html页面。</p><p><img src="https://i.loli.net/2021/01/30/1sKW7qJ9gkxTCfc.png" alt="image-20210130222715240"></p><h2 id="启动服务器-本地"><a href="#启动服务器-本地" class="headerlink" title="启动服务器(本地)"></a>启动服务器(本地)</h2><p>可通过以下命令启动服务器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这条指令运行完成后可在本地启动服务器并预览博客，默认网址为<code>http://localhost:4000/</code>。<br>如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面。</p><p><img src="https://i.loli.net/2021/01/30/YTqGb8ipVjBWQCv.png"></p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>默认的主题可能并不是我们想要的效果，那么就可以通过更换主题来实现。可以在<a href="https://hexo.io/themes/">Heox官网的主题页面</a>选择想要的主题。这里，选择Butterfly主题。感谢开源此主题的各位大佬们，让我用上了这么好的页面。</p><p>Butterfly主页的展示页面：<a href="https://jerryc.me/">https://jerryc.me</a> </p><p>详细的安装文档的地址为：<a href="https://jerryc.me/posts/21cfbf15">https://jerryc.me/posts/21cfbf15</a></p><p>Github地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><p>根据文档说明直接配置主题即可，这里简单记录如下：</p><blockquote><p>Butterfly主题安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br></pre></td></tr></table></figure><blockquote><p>应用主题</p></blockquote><p>修改站点配置文件<code>_config.yml</code>，把主题改为<code>butterfly</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>为方便后续设置，这里把<code>butterfly</code> 目录下的 <code>_config.yml</code> 配置文件复制到 <code>Blog</code> 目录下，并重新命名为 <code>_config.butterfly.yml</code>。以后对主题的相关设置只需要在 <code>_config.butterfly.yml</code>进行配置就行。</p><p><img src="https://i.loli.net/2021/01/30/bv2jmdBIiKNf7WF.png" alt="image-20210130122459017"></p><blockquote><p>安装相关插件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>在安装，应用主题时遇到的问题可在bufferfly的安装文档中查阅。</p><p>在一定修改后通过以下命令来查看应用主题后的初步效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清楚缓存文件</span><br><span class="line">hexo g  #生成发布用的静态页面</span><br><span class="line">hexo s  #重启本地服务器</span><br></pre></td></tr></table></figure><p>刷新刚才的网址：<a href="http://localhost:4000/">http://localhost:4000</a> ，可以看到更新后的主题:</p><p><img src="https://cdn.jsdelivr.net/gh/wawyw/file/hexo_butterfly_review.png"></p><p>更多细节设置，如菜单栏，背景图片，代码格式等等，可以参考Butterfly的<a href="https://jerryc.me/posts/21cfbf15">文档</a>来配置，这里不再赘述。</p><h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><blockquote><p>截止目前，已经<strong>成功安装好了一个初始化的Hexo博客</strong>。但是暂时还只能在自己电脑上看到，如何让别人通过域名可以访问到呢？接下来就要请出今天的另外一位主角<strong>GitHub Pages</strong>了。<br>另外，以上的安装步骤也可参考<a href="https://link.jianshu.com/?t=https://hexo.io/zh-cn/docs/index.html">Hexo官方文档</a>，关于各命令有更详细的解释。</p></blockquote><h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><p>这里假设已经注册过了Github帐户，如果没有，可以去<a href="https://github.com/">Github</a>注册。</p><p>注册好了后，登录Github,创建仓库：点击右上角的+号，选择new repository</p><p><img src="https://i.loli.net/2021/01/30/4iLYFGOtm1r3NRc.png" alt="image-20210130233629330"></p><p>将仓库名设置为 <code>username.github.io</code> ,<strong>其中,username请对应换成你的github用户名。</strong></p><p><img src="https://i.loli.net/2021/01/30/QR7uxPLNHyA1GWo.png" alt="image-20210130234029747"></p><h2 id="添加SSH公钥"><a href="#添加SSH公钥" class="headerlink" title="添加SSH公钥"></a>添加SSH公钥</h2><p>如果第一次使用git的话，需要设置用户名和邮箱:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your username&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure><p>将上述的”your username”换成自己的真实用户名,”your email”换成真实的email。</p><p>然后，生成公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>在C盘/用户/用户名/.ssh目录下找到<code>id_rsa.pub</code>文件,用文本编辑工具打开，并复制所有文本内容。在Github页面右上角，点击用户头像-Settings-SSH and GPG keys-New SSH key</p><p>把复制的公钥文本内容粘贴到Key中，上方的Title可随意填写</p><p>添加完成后可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果配置成功，可以看到成功的回复。</p><h2 id="上传文件到Github仓库"><a href="#上传文件到Github仓库" class="headerlink" title="上传文件到Github仓库"></a>上传文件到Github仓库</h2><p>在配置文件<code>_config.yml</code>中添加仓库信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: #你的仓库地址,如:https://github.com/wawyw/wawyw.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>直接通过hexo来发布到github，需要安装以下插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装成功后，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d   #生成一个.deploy_git的文件夹，并把本地生成的静态文件部署Github仓库中的master分支上</span><br></pre></td></tr></table></figure><p>刷新github对应的repository页面，即可看到提交的内容：</p><p><img src="https://i.loli.net/2021/01/30/KUetpmHJ9PxB1oa.png" alt="image-20210130235436880"></p><h2 id="配置静态站点"><a href="#配置静态站点" class="headerlink" title="配置静态站点"></a>配置静态站点</h2><p>点击Settings, 进入GitHub Pages配置，由于之前新建仓库的时候，仓库名为username.github.io，github已经自己为我们发布了静态的页面。如果不是username.github.io的格式，则需要手动配置。</p><p>之后在浏览器中输入<code>username.github.io</code>（可能你已经发现了，这个就是之前新建仓库的名字，同时也是博客的域名），没毛病的话，应该可以再次看到那个熟悉又亲切的博客页面了。</p><blockquote><p>至此，我们已经通过Hexo创建了一个最原始的博客，并且通过把博客静态文件放到GitHub的仓库中，实现了从网上以GitHub的默认域名访问这个博客。</p><p>如果需要个性化域名，则需要申请对应的域名并绑定到Github上。</p><p>因为Github用的是国外的服务器，站点加载速度可能较慢，可考虑使用GitHub+coding双托管博客，这样一来，国内访问coding的服务器，国外访问GitHub的服务器，以提升国内访问博客的速度。</p></blockquote><h1 id="部署到Coding"><a href="#部署到Coding" class="headerlink" title="部署到Coding"></a>部署到Coding</h1><h2 id="创建Coding仓库"><a href="#创建Coding仓库" class="headerlink" title="创建Coding仓库"></a>创建Coding仓库</h2><p>同样，先<a href="https://coding.net/">官网注册</a></p><p>选择项目，新建一个代码托管项目<img src="https://i.loli.net/2021/02/02/kFH5Y7sBDtJd6ZO.png" alt="image-20210202114025032"></p><p>填写完项目基本信息后，完成创建</p><p><img src="https://i.loli.net/2021/02/02/Gvh47RtmBHxTCwJ.png" alt="image-20210202114214799"></p><h2 id="添加SSH公钥-1"><a href="#添加SSH公钥-1" class="headerlink" title="添加SSH公钥"></a>添加SSH公钥</h2><p>找到之前部署到Github时生成的<code>id_rsa.pub</code> 文件，复制其内容。</p><p>打开Coding的<code>个人设置</code>，<code>SSH公钥</code>，添加公钥，名称自定，粘贴刚才复制的公钥，添加好后如下图。</p><p><img src="https://i.loli.net/2021/02/02/yTJ34V9SzZxYuNr.png" alt="image-20210202114643411"></p><p><img src="https://i.loli.net/2021/02/02/czZBXJvNPqYMoiQ.png" alt="image-20210202115022080"></p><h2 id="上传文件到Github仓库-1"><a href="#上传文件到Github仓库-1" class="headerlink" title="上传文件到Github仓库"></a>上传文件到Github仓库</h2><p>打开新建的仓库，点击克隆➡模式选ssh➡复制地址，将仓库链接添加到站点的配置文件 <code>_config.yml</code> 中</p><p><img src="https://i.loli.net/2021/02/02/8RJeOF6nyjUsrbi.png" alt="image-20210202115328829"></p><p>修改完之后 <code>hexo d</code> 部署就会将 public 目录推送到 Coding 上博客仓库的 master 分支。部署后仓库如下：</p><p><img src="https://i.loli.net/2021/02/02/ExJgFdcnDqHbXyQ.png" alt="image-20210202115530532"></p><h2 id="配置静态站点-1"><a href="#配置静态站点-1" class="headerlink" title="配置静态站点"></a>配置静态站点</h2><p>把博客上传部署到仓库后，我们还要在Coding生成静态页面。</p><p>进入仓库，进入<code>项目设置</code><strong>（注意这个在左下角）</strong>，<code>项目与成员</code>，右侧<code>功能开关</code>，开启 <code>持续部署</code>即可</p><p><img src="https://i.loli.net/2021/02/02/hw39alxYncKVSiv.png" alt="image-20210202115821544"></p><p>开启后就会在仓库的左侧看到此功能，点击<code>静态网站</code>，新建网站，填写网站名称，其它默认，保存。</p><p>开启服务后会出现访问地址，如下图：</p><p><img src="https://i.loli.net/2021/02/02/sz2NhSQv1c3UPJq.png" alt="image-20210202120139692"></p><p>访问此地址后会跳转到你的博客首页。与GitHub部署类似，此网址相当于你博客的另一个访问地址。我们后面要把所有的这些网址都解析到同一个域名上。</p><h1 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h1><blockquote><p>配置好Github和Coding的静态页面后，已经可以通过给定的网址访问到博客页面了。如果需要个性化域名，则需要申请对应的域名并绑定到Github和Coding上。</p></blockquote><h2 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h2><p>注册域名的平台有很多可以选择，这里以阿里云为例。</p><p>来到<a href="https://wanwang.aliyun.com/domain/">万网平台</a>，查询可注册的域名</p><p><img src="https://i.loli.net/2021/02/02/1euIfLRiU6JWCr4.png" alt="image-20210202122045985"></p><p>挑选喜欢的域名，加入清单→立即结算→立即购买</p><p><img src="https://i.loli.net/2021/02/02/LjRiADB5tTsnMzV.png" alt="image-20210202122234878"></p><blockquote><p>这里选择的是<code> .top</code> 域名，你懂的😂</p></blockquote><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>登录<a href="https://homenew.console.aliyun.com/home/dashboard/ProductAndService">阿里云的控制台</a>，点击左侧菜单-域名，进入域名管理页面。</p><p>在域名列表中，找到需要解析的域名，点击对应的解析按钮。</p><p><img src="https://i.loli.net/2021/02/02/bQ8rnTtdPepaWS7.png" alt="image-20210202123116868"></p><p>点击”添加记录”</p><p><img src="https://i.loli.net/2021/02/02/8gGsqTyaJvHZpO7.png" alt="image-20210202123225340"></p><h3 id="解析-Github"><a href="#解析-Github" class="headerlink" title="@解析-Github"></a>@解析-Github</h3><p>在cmd窗口中，ping一下之前配置的Githun的静态页面地址</p><p><img src="https://i.loli.net/2021/02/02/oeJlf2GacxBF7QT.png" alt="image-20210202123556068"></p><p>可以获取到对应的ip地址</p><p>添加记录编辑如下：</p><p><img src="https://i.loli.net/2021/02/02/MDpf4OdtBhJwT18.png" alt="image-20210202124304317"></p><ul><li>记录类型选择A，添加 A 记录可实现将域名指向 IP 地址。</li><li>主机记录输入@，一般是指子域名的前缀（如需创建子域名为<a href="http://www.dns-example.com/">www.dns-example.com</a>, 主机记录输入 <strong>www</strong>；如需实现dns-example.com，主机记录输入 **@**）</li><li>解析线路选择境外,因为我们是准备国内访问时访问到Coding，国外访问时访问到Github</li><li>记录值输入刚才获取到的ip地址,如:185.199.110.153</li></ul><h3 id="www解析-Github"><a href="#www解析-Github" class="headerlink" title="www解析-Github"></a>www解析-Github</h3><p>添加记录编辑如下：</p><p><img src="https://i.loli.net/2021/02/02/GrqatcWw3FdnSmz.png" alt="image-20210202124929421"></p><ul><li>记录类型选择CNAME,添加 CNAME 记录可实现将域名指向另外一个域名。</li><li>主机记录输入www</li><li>解析线路选择境外</li><li>记录值就输入Github的静态页面地址,即 wawyw.github.io</li></ul><h3 id="解析-Coding"><a href="#解析-Coding" class="headerlink" title="@解析-Coding"></a>@解析-Coding</h3><p>在cmd窗口中，ping一下之前配置的Coding的静态页面地址</p><p><img src="https://i.loli.net/2021/02/02/yt3M4K8bj7sFSHk.png" alt="image-20210202125402543"></p><p>可以获取到对应的ip地址</p><p>添加记录编辑如下：</p><p><img src="https://i.loli.net/2021/02/02/SYh8u9rwLUNixpD.png" alt="image-20210202125550187"></p><ul><li>记录类型选择A</li><li>主机记录输入@</li><li>解析线路选择默认</li><li>记录值输入刚才获取到的ip地址,如:124.156.144.32</li></ul><h3 id="www解析-Coding"><a href="#www解析-Coding" class="headerlink" title="www解析-Coding"></a>www解析-Coding</h3><p>添加记录编辑如下：</p><p><img src="https://i.loli.net/2021/02/02/SeVBI1XAzavonUT.png" alt="image-20210202125909957"></p><ul><li>记录类型选择CNAME</li><li>主机记录输入www</li><li>解析线路选择默认</li><li>记录值就输入Coding的静态页面地址</li></ul><p>最后配置完成如下图：</p><p><img src="https://i.loli.net/2021/02/02/fYBiz2cT3FkqdEX.png" alt="image-20210202130137863"></p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h3 id="Github域名绑定"><a href="#Github域名绑定" class="headerlink" title="Github域名绑定"></a>Github域名绑定</h3><p>在项目根目录-source目录下，新建CNAME文件,内容输入前面申请的域名，如:<a href="http://www.wawyw.top/">www.wawyw.top</a></p><p><img src="https://i.loli.net/2021/02/02/64joLQzHBKOqmiE.png" alt="image-20210202130504760"></p><p>上传到Github和Coding的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>上传后就可以在Github和Coding对应的项目根目录下发到提交到的CNAME文件。</p><p>由于提交了CNAME文件，Github的静态页面服务已经自动绑定了新提交的域名</p><p><img src="https://i.loli.net/2021/02/02/8F6tvVLCE7eWqKl.png" alt="image-20210202130924470"></p><p>这时，就可以用上面自定义的域名访问我们的博客了。</p><h3 id="Coding域名绑定"><a href="#Coding域名绑定" class="headerlink" title="Coding域名绑定"></a>Coding域名绑定</h3><p>回到Coding仓库的静态网站设置页面，选择自定义域名→新建域名</p><blockquote><p><strong>注意</strong>：一定要添加两条，一条带<code>www.</code>的，一条不带<code>www.</code>的</p></blockquote><p><img src="https://i.loli.net/2021/02/02/8oD2RBig7FwLpGV.png" alt="image-20210202135629358"></p><p>添加后会给出两条CNAME记录，需要回到阿里云控制台的解析设置中修改对应的记录值</p><p><img src="https://i.loli.net/2021/02/02/2RzO14uBefParJl.png" alt="image-20210202135944688"></p><blockquote><p>OK！现在我们就算完成了GitHub+Coding双托管博客了</p><p>这样国内的用户访问的就是coding上部署的博客，而国外的用户访问的就是github上部署的博客</p></blockquote><h2 id="国内测速对比"><a href="#国内测速对比" class="headerlink" title="国内测速对比"></a>国内测速对比</h2><p>测速网站：<a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p><p><strong>国内访问GitHub服务器：</strong></p><p><img src="https://i.loli.net/2021/02/02/qeJIVuBFfsxjygP.png" alt="image-20210202170104490"></p><p><strong>国内访问Coding服务器：</strong></p><p><img src="https://i.loli.net/2021/02/02/fWmNrIyg17Ab9ih.png" alt="image-20210202171245483"></p><blockquote><p>一对比我们就可以看到Coding服务器在国内访问快多了，而GitHub服务器在国内访问有很多都是超时，速度提升较明显。</p></blockquote><h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1><p>创建页面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page page_name</span><br></pre></td></tr></table></figure><p>这里在<code>source/_posts</code> 目录下以<code>markdown</code> 的格式编辑博客文章。</p><blockquote><p>Front-matter</p></blockquote><p>Front-matter 是md文件最上方以<code>---</code>分隔的区域，用于指定每篇博客的信息。</p><p>如果标注<code>可选</code>的参数，可根据自己需要添加，不用全部都写在markdown里</p><p><strong>Page Front-matter</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">description:</span><br><span class="line">comments:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">写法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">【必需】页面标题</td></tr><tr><td align="center">date</td><td align="center">【必需】页面创建日期</td></tr><tr><td align="center">type</td><td align="center">【必需】标签、分类等页面需要配置</td></tr><tr><td align="center">updated</td><td align="center">【可选】页面更新日期</td></tr><tr><td align="center">description</td><td align="center">【可选】页面描述</td></tr><tr><td align="center">comments</td><td align="center">【可选】显示页面评论模块(默认 true)</td></tr><tr><td align="center">top_img</td><td align="center">【可选】页面顶部图片</td></tr><tr><td align="center">aside</td><td align="center">【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><p><strong>Post Front-matter</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">sticky:</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">写法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">【必需】文章标题</td></tr><tr><td align="center">date</td><td align="center">【必需】文章创建日期</td></tr><tr><td align="center">updated</td><td align="center">【可选】文章更新日期</td></tr><tr><td align="center">tags</td><td align="center">【可选】文章标签</td></tr><tr><td align="center">categories</td><td align="center">【可选】文章分类</td></tr><tr><td align="center">top_img</td><td align="center">【可选】文章顶部图片</td></tr><tr><td align="center">cover</td><td align="center">【可选】文章封面</td></tr><tr><td align="center">sticky</td><td align="center">【可选】文章置顶，数值越大，置顶的优先级越大。</td></tr></tbody></table><p>博客编辑完成后，仍然是通过这三步发布文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>发布之前，在本地预览博客用到的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/31/Vla8QmTZKeF7SLX.png" alt="image-20210131023529206"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>总的来说，这次的搭建过程还算顺利，期间遇到的一些问题也通过浏览大佬的文章解决了，感谢他们的分享。网络上关于利用Hexo搭建博客的资料有很多，写这篇文章主要是为了记录此次搭建博客的过程，便于后续可能再次部署，同时也希望能帮助到有需要的朋友。完结，撒花~~</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]  <a href="https://hexo.io/zh-cn/docs/">Hexo文档</a></p><p>[2]  <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档</a></p><p>[3]  <a href="https://www.jianshu.com/p/ea5ac6162a96">GitPages + Hexo,从0到1搭建个人博客</a></p><p>[4] <a href="https://www.milovetingting.cn/2020/01/06/Web/Hexo+Butterfly+Github+Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#Hexo-Butterfly-Github-Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">Hexo+Butterfly+Github+Coding搭建个人博客</a></p><p>[5] <a href="https://www.heson10.com/posts/54971.html">Hexo在GitHub和Coding双线部署教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/16107.html"/>
      <url>posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="manifest.json"/>
      <url>manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"string","short_name":"Junzhou","theme_color":"#49b1f5","background_color":"#49b1f5","display":"standalone","start_url":"/","icons":[{"src":"images/pwaicons/36.png","sizes":"36x36","type":"image/png"},{"src":"images/pwaicons/48.png","sizes":"48x48","type":"image/png"},{"src":"images/pwaicons/72.png","sizes":"72x72","type":"image/png"},{"src":"images/pwaicons/96.png","sizes":"96x96","type":"image/png"},{"src":"images/pwaicons/144.png","sizes":"144x144","type":"image/png"},{"src":"images/pwaicons/192.png","sizes":"192x192","type":"image/png"},{"src":"images/pwaicons/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/02/02/Srk85XVcw6L9RoA.jpg"></p><p>很抱歉，内容暂无…</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="link/index.html"/>
      <url>link/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="我的Blog信息"><a href="#我的Blog信息" class="headerlink" title="我的Blog信息"></a>我的Blog信息</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wawyw</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">https://wawyw.top/</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">https://cdn.jsdelivr.net/gh/wawyw/file/avatar.png</span></span><br><span class="line">  <span class="attr">descr:</span> <span class="string">活在当下</span> <span class="string">顺势而为</span></span><br></pre></td></tr></table></figure><blockquote><p>如需要交换友链，请留言！</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
